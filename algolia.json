[{"content":"","date":1569476587,"description":"","lastmod":"2019-09-26T13:43:07+08:00","objectID":"ba64367490f3943ceae7aadace2b4aa5","permalink":"https://vmware.github.io/singleton/_footer/","publishdate":"2019-09-26T13:43:07+08:00","title":"_Footer"},{"content":"After decades of progress and advancement in international communication, the world is more connected than ever. But how much has the rise of modern technology helped us deliver products to customers in their language?\nSoftware globalization (G11n) is the process of delivering software applications in multiple languages. It consists of two parts:\nLocalization (L10n) – the process of adapting software applications for a specific international market Internationalization (i18n) – the process of developing software applications in a way that enables L10n. Singleton is an open-source application for streamlining software globalization. It standardizes and simplifies software application globalization—not just in L10n, but in i18n, too.\nSingleton was originally developed under the R\u0026amp;amp;D Operations and Central Services team in VMware. The core application is written using the Java™ programming language. Client-side code implementation is also available – in JavaScript (Angular, AngularJS and NodeJS web frameworks), C# and Java™ programming languages. While VMware continues to lead the development and maintenance of Singleton, the organization has decided to make it available to the open source community. In May 2019, VMware decided to release an open-source repository in GitHub. We invite you to collaborate with us to enrich Singleton’s resources and help organizations that adopt it to thrive.\nHow does Singleton work? The L10n capabilities of Singleton decouple localized resources from the application software. Singleton delivers a web service that provides an API for sending source artifacts for translation. These artifacts are processed externally, and localized resources are then embedded into the Singleton Service. L10n functions in Singleton are separated from the core application, which makes it possible to update or add new language support independently from the core application’s release cycle—a requirement for fast-paced, agile releases, as well as the SaaS …","date":1569321671,"description":"","lastmod":"2019-09-24T18:41:11+08:00","objectID":"3976528693a0108357f4928017600865","permalink":"https://vmware.github.io/singleton/","publishdate":"2019-09-24T18:41:11+08:00","title":"About Singleton"},{"content":"","date":1569337087,"description":"","lastmod":"2019-09-24T22:58:07+08:00","objectID":"9c38b381b221a87d7218937a08583a59","permalink":"https://vmware.github.io/singleton/docs-previous/","publishdate":"2019-09-24T22:58:07+08:00","title":"Previous Releases"},{"content":"","date":1569337087,"description":"","lastmod":"2019-09-24T22:58:07+08:00","objectID":"e1dc14076a84bb48e01bb450d9d2fcc7","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/","publishdate":"2019-09-24T22:58:07+08:00","title":"v0.1"},{"content":"","date":1569337109,"description":"","lastmod":"2019-09-24T22:58:29+08:00","objectID":"e302555cb26504a00236ba6b0f7e1992","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/get-started/","publishdate":"2019-09-24T22:58:29+08:00","title":"Get Started"},{"content":"Singleton official 0.1.0 Release is available now! Choose the download that\u0026amp;rsquo;s right for you and click one of the links below.\nSingleton Service 0.1.0 Binaries Downloading filename sha1 hash branch/tag singleton-manager-i18n-0.1.0.jar 8e7599495292ce34cdb9769ec43695999071a1fe master/v0.1.0-Singleton-Service singleton-manager-l10n-0.1.0.jar 8d744bb83e310a1b451a68fb65999803488c8cfc master/v0.1.0-Singleton-Service Installation Singleton Service include 2 types of builds, one is i18n manager, the other is l10n manager:\nI18n manager is the main build, it provides the restful APIs to talk with Singleton SDK. L10n manager will work together with I18n manager to achieve the feature Source Collection. Prerequisites\nJDK8 is installed and works well on your environment, as Singleton Service is based on JAVA language development. The ports (8088, 8090, 8091) are allowed to access and not in use, as Singleton service run based on these ports. To start Singleton Service I18n manager\njava -jar singleton-manager-i18n-0.1.0.jar To Start Singleton Service L10n manager\njava -jar singleton-manager-l10n-0.1.0.jar Singleton SDK 0.1.0 Binaries Downloading filename sha1 hash branch/tag singleton-client-java-0.1.0.jar d27afa9e1659759805e320daab7d8d0e5f7b8da2 g11n-java-client/v0.1.0-Singleton-Java-Client @singleton-i18n/js-core-sdk@0.1.0 1e776e866ded0751d39ea391cae29b412089fcc1 g11n-js-client/v0.1.0-Singleton-JS-Client @singleton-i18n/angular-client@0.1.0 8f8ae3ca2ef6e1bfccd828fc1b9e4c6e74f6be20 g11n-angular-client/v0.1.0-Singleton-Angular-Client ","date":1569326666,"description":"","lastmod":"2019-09-24T20:04:26+08:00","objectID":"cfbf52f91e5ed1efeca13825fe97282c","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/get-started/download-and-installation/","publishdate":"2019-09-24T20:04:26+08:00","title":"Download and Installation"},{"content":"The Singleton application suite includes:\nSingleton Service: It contains an Application Program Interface (API), which is a web service that is used for i18n features, such as providing translated text. Singleton Client: It is used to communicate with Singleton Service to get the localized resources. Features and functionality Singleton offers the following features and functionality:\nSingleton Core API - Provides RESTful web services for delivering localized resources. Source collection - Offers a source collection feature for Singleton string-based APIs. For more information about how to use the feature, see the Enabling source collection on Singleton service section of the Singleton\u0026amp;rsquo;s User Guide. Pseudotranslation – Helps test product compatibility with locales before beginning the localization process. It automatically generates text that is designed to test various aspects of localization readiness, including character set support, UI design, and hardcoding. For more information about how to use the feature, see the Enabling pseudo translation on Singleton service section of the Singleton\u0026amp;rsquo;s User Guide. Using Singleton Downloading Singleton source code Prerequisites\nEnsure the following applications are installed: Java 8 Git Set the environment variables: Setting JAVA_HOME Adding JAVA_HOME to the Path system variable Step\nClone the repository to your environment using Git, by running the command git clone git@github.com:vmware/singleton.git.\nCompiling Singleton source code From the singleton/g11n-ws folder, generate the Singleton build file using the Gradle command ./gradlew build.\nThe .jar files are generated in the singleton/publish location. For example:\nsingleton/publish/singleton-0.1.0.jar\nRunning Singleton application To run the Singleton application, from the singleton/g11n-ws folder, run the Spring Boot main application, using the command: java - jar publish/singleton-0.1.0.jar.\nNOTE: To test all available API endpoints from the user …","date":1569326687,"description":"","lastmod":"2019-09-24T20:04:47+08:00","objectID":"6f140c7c38259f76b8dc258e0f224c88","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/get-started/quick-start/","publishdate":"2019-09-24T20:04:47+08:00","title":"Quick Start"},{"content":"Singleton helps streamline the globalization process for software products. It provides a unified solution for product internationalization (i18n) and localization (L10n) across most of the popular programming languages, frameworks, and a wide range of developer tools such as Java, JavaScript, Angular applications.\nThe Singleton application suite includes:\nSingleton Service: It contains an Application Program Interface (API), which is a web service that is used for i18n features, such as providing translated text. Singleton Client: It is used to communicate with Singleton Service to get the localized resources. How Singleton works Singleton separates the localized resources including: embedded strings, locale-sensitive methods, functions, or classes (for example: date/ time formatting, number formatting), custom programming patterns, and static files from the product software. Using the Singleton Service (web service that provides a unified API), it sends the source artifacts or resources for translation. The localized resources are then processed externally and embedded into the Singleton Service.\nSingleton eliminates the need for developers to learn different APIs for internationalization across technologies and programming languages. It acts as an abstraction layer that provides consistent formatting of i18n to various applications that may be written in different programming languages. The web service API exposes REST endpoints for i18n that provides abstraction across multiple clients.\nBenefits of using Singleton Consistency: Singleton offers unified i18n and L10n implementation across programming languages and frameworks (from Java, Python, to various JavaScript frameworks). The unified implementation enables consistent product behaviors (such as date/time format, number format, searching and sorting results) and increases product quality and CSAT. Flexibility: Decoupling i18n and L10n from the product makes possible for asynchronous, continuous, and flexible …","date":1569337121,"description":"","lastmod":"2019-09-24T22:58:41+08:00","objectID":"5c992a6849b5a24931756469f866e524","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/","publishdate":"2019-09-24T22:58:41+08:00","title":"Overview"},{"content":"Singleton for Angular client is common lib developed by VMware G11n team to provide i18n support for Angular framework. The client will communicate with singleton server for fetching translation and i18n patterns.\nMost translations provided by singleton service comes from Human translators, when new application is connected to singleton service, source strings (English strings), required language and related information will be sent to singleton service, singleton service doesn’t return real translation immediately since the human translators need time to figure out the quilted translation, at this moment, singleton service just delivers pseudo tag as placeholder to indicate singleton client works well with singleton service and App itself in development stage. Once the translations are ready, when the client side calls singleton service again, the real translations will be delivered via HTTP request. Please note that under English locale, the client doesn\u0026amp;rsquo;t make a network call to singleton service, but return English directly.\nBesides Localization, singleton client also provides I18n support for Datetime format, number format, currency and plural. singleton I18n service is based on CLDR data repository and keep the same scope in supported locales set. For the specific usages and API details please refer to following sections, if you find below APIs can\u0026amp;rsquo;t cover all usages of your application requirement, please feel free to contact with our team to add related API.\nFeatures Level-2 Dates, Times, Numbers and Currencies formatting support. For more details refer to i18n Level-2. Level-3 support. For more details refer to i18n Level-3. Version 10.x (support Angular10) 9.x (support Angular9) 8.x (support Angular8) 7.x (support Angular7.x) 6.x (support Angular6.x) 1.x (support Angular4.x \u0026amp;amp; Angular5.x) 0.7.x is no longer maintained, only for bugfix Installing the NPM module The module is published internal to VMware only, on the build-artifactory NPM …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"95e83679b8602b2363ee6ecea6044577","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/","publishdate":"2019-09-24T20:08:31+08:00","title":"Angular Client Introduction"},{"content":"Load Translation Download the specified languages of translation files in your project location.\nCommand line arguments description Parameter Type Value Description \u0026amp;ndash;directory string required The directory you want to put translations in. \u0026amp;ndash;host string required This is singleton service which provides clients with translations and pattern. \u0026amp;ndash;product string required Product name. For now, singleton service doesn’t explicitly restrict name of product, but it\u0026amp;rsquo;s better to keep short and sync with the name in release master. \u0026amp;ndash;component string required Component name. \u0026amp;ndash;version string required Release version. \u0026amp;ndash;languages string required Specified the languages your product supports; Separated by , for example, zh-cn,en-US. \u0026amp;ndash;verbose Don\u0026amp;rsquo;t need optional If set, it will show all information during command execution for debug purpose. For example load-translation --directory `pwd`/src/app/assets --host https://singleton.service.com:8090 // It requires to deploy singleton service --product Testing --component default --version 1.0 --languages zh-cn,en-US Config script in package.json { ... scripts: { \u0026amp;#34;load-translation\u0026amp;#34;: \u0026amp;#34;load-translation --directory `pwd`/src/app/assets --host \u0026amp;lt;Singleton Service host\u0026amp;gt; --product \u0026amp;lt;product\u0026amp;gt; --component \u0026amp;lt;component\u0026amp;gt; --version \u0026amp;lt;product version\u0026amp;gt; } ... } Use the script npm run load-translation Collect Source Bundle The @singleton-i18n/angular-client provides a script to collect source strings from source bundles. This script collects the collection named ENGLISH from the files named *.l10n.ts, and then send them to the singleton server.\nCommand line arguments description Parameter Type Value Description \u0026amp;ndash;source-dir string required The directory your source code in. \u0026amp;ndash;host string required This is singleton service which provides clients with translations and pattern. \u0026amp;ndash;product string required Product name. For now, singleton service doesn’t explicitly …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"a6511e5c1c9a7469f163bb2cc89630cc","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/command-line-utils/","publishdate":"2019-09-24T20:08:31+08:00","title":"Command Line Utils"},{"content":"Overview Formats a number into currency string. Group sizing and separator and other locale-specific configurations are based on the pattern data.\nUsage {{ value | currencyFormat [ : currencyCode [ : formatOptions ] ] }} Input Value Parameter Type Description value number / string The number to be formatted. Parameters Parameter Type Required Description currencyCode string Optional Currency code should be in accordance with ISO 4217 standard, such as USD for the US dollar and EUR for the euro. Optional. Default value is USD. formatOptions object Optional The results formats can be customized using the formatOptions argument. See formatOptions for further details. formatOptions Attribute Type Required Description minIntegerDigits number Optional The minimum digits of integer numbers used. The possible values are from 1 to 21, and the default value is 1. minFractionDigits number Optional The minimum digits of fraction numbers used. The possible values are from 0 to 20. The default value comes from ISO 4217 currency code list (if the list is not provided, the default value is 2). maxFractionDigits number Optional The maximum digits of fraction numbers used. The possible values are from 0 to 20. The default value is taken the larger of minimumfractiondigits and ISO 4217 currency code list (if the list is not provided, the default value is 2). notation string Optional The format in which this number should be displayed. For now only support \u0026amp;lsquo;compact\u0026amp;rsquo; for compact number formats. The default is \u0026amp;ldquo;standard\u0026amp;rdquo;. compactDisplay string Optional The \u0026amp;lsquo;compactDisplay\u0026amp;rsquo; is only used when notation is \u0026amp;ldquo;compact\u0026amp;rdquo;. The possible value is \u0026amp;ldquo;short\u0026amp;rdquo; (default) or \u0026amp;ldquo;long\u0026amp;rdquo;, and the default value is \u0026amp;ldquo;short\u0026amp;rdquo;. Example Code // input \u0026amp;#39;201703.5416926\u0026amp;#39; {{ num | currencyFormat }} // output \u0026amp;#39;$201,703.54\u0026amp;#39; // input \u0026amp;#39;1.149999\u0026amp;#39; {{ num | currencyFormat: \u0026amp;#39;JPY\u0026amp;#39; }} // output \u0026amp;#39;¥1\u0026amp;#39; // input …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"518a79f0f29e5843f229e163558b1e09","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/currency-format-pipe/","publishdate":"2019-09-24T20:08:31+08:00","title":"Currency Format Pipe"},{"content":"In general, for most of the products, it\u0026amp;rsquo;s good enough to load all translations and patterns one time in root module when the application starts, but for some special requirements, such like: isolated translation for feature module or using lazy module to enhance performance, please refer to Isolated feature module and Lazy Load Module. singleton client provides two ways to load i18n data and initialize the services in root module:\nBlocking loading For preloading modules - Create a factory function that loads i18n resource data and provide that function to the APP_INITIALIZER token. The function is executed during the application bootstrap process, and the needed data is available on startup.\nexport function initVIPConfig(vipService: VIPService, localeService: LocaleService) { // Specify locale, either from browser language or user\u0026amp;#39;s profile. const currentlocale: string = getBrowserCultureLang(); localeService.init(currentlocale); return () =\u0026amp;gt; vipService.initData(I18nConfig); } @NgModule({ ... imports: [ ... HttpClientModule, VIPModule.forRoot(), ... ], providers: [{ provide: APP_INITIALIZER, useFactory: initVIPConfig, deps: [ VIPService, LocaleService ], multi: true }], ... }) export class AppModule {} For lazy-loading modules - Configure i18nDataGuard as part of the route object to load i18n resource for a lazy-loading module by reading lite Singleton configuration from route parameters, asynchronously load the data, and have it ready by the time the module activates and initializes.\nconst routes: Routes = [ { path: \u0026amp;#39;\u0026amp;#39;, component: SampleComponent, canActivate: [I18nDataGuard], data: { // \u0026amp;#39;vipConfig\u0026amp;#39; is specified keyword of Singleton configuration. // In the simplified configuration of lazy loading module, // only the component name is required, and other fields are optional. vipConfig: { component: \u0026amp;#39;sample\u0026amp;#39;, sourceBundles: [ENGLISH] } } } ] Non-blocking loading Whether it is preloading modules or lazy-loading modules, in …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"358dba3bf10e19941d45b6dc29ab167d","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/data-initialization/","publishdate":"2019-09-24T20:08:31+08:00","title":"Data Initialization"},{"content":"Overview Use the dateFormat pipe in your HTML templates to format a date according to locale rules.\nUsage {{ value | dateFormat [ : format [ : timezone ] ] }} Input Value Parameter Type Description value any a date object or a number (milliseconds since UTC epoch) or an ISO string (https://www.w3.org/TR/NOTE-datetime). Parameters Parameter Type Description format string indicates which date/time components to include. The format can be predefined as shown below (all examples are given for en-US) or custom as shown in the table. Default is \u0026amp;lsquo;mediumDate\u0026amp;rsquo;. timezone string to be used for formatting. It understands UTC/GMT and the continental US time zone abbreviations, but for general use, use a time zone offset, for example, \u0026amp;lsquo;+0430\u0026amp;rsquo; (4 hours, 30 minutes east of the Greenwich meridian) If not specified, the local system timezone of the end-user\u0026amp;rsquo;s browser will be used. Pre-defined format options Format Unit Output \u0026amp;lsquo;shortTime\u0026amp;rsquo; \u0026amp;lsquo;h:mm a\u0026amp;rsquo; e.g. 5:40 PM \u0026amp;lsquo;mediumTime\u0026amp;rsquo; \u0026amp;lsquo;h:mm:ss a\u0026amp;rsquo; e.g. 5:40:22 PM \u0026amp;rsquo;longTime\u0026amp;rsquo; \u0026amp;lsquo;h:mm:ss z\u0026amp;rsquo; e.g. 5:40:22 PM GMT+8 \u0026amp;lsquo;fullTime\u0026amp;rsquo; \u0026amp;lsquo;h:mm:ss zzzz\u0026amp;rsquo; e.g. 5:40:22 PM GMT+08:00 \u0026amp;lsquo;shortDate\u0026amp;rsquo; \u0026amp;lsquo;M/d/yy\u0026amp;rsquo; e.g. 2/9/18 \u0026amp;lsquo;mediumDate\u0026amp;rsquo; \u0026amp;lsquo;MMM d, y\u0026amp;rsquo; e.g. Feb 9, 2018 \u0026amp;rsquo;longDate\u0026#39; \u0026amp;lsquo;MMMM d, y\u0026amp;rsquo; e.g. February 9, 2018 \u0026amp;lsquo;fullDate\u0026amp;rsquo; \u0026amp;lsquo;EEEE, MMMM d, y\u0026amp;rsquo; e.g. Friday, February 9, 2018 \u0026amp;lsquo;short\u0026amp;rsquo; \u0026amp;lsquo;M/d/yy, h:mm a\u0026amp;rsquo; e.g. 2/9/18, 5:40 PM \u0026amp;lsquo;medium\u0026amp;rsquo; \u0026amp;lsquo;MMM d, y, h:mm:ss a\u0026amp;rsquo; e.g. Feb 9, 2018, 5:40:22 PM \u0026amp;rsquo;long\u0026#39; \u0026amp;lsquo;MMMM d, y, h:mm:ss a z\u0026amp;rsquo; e.g. February 9, 2018 at 5:40:22 PM GMT+8 \u0026amp;lsquo;full\u0026amp;rsquo; \u0026amp;lsquo;EEEE, MMMM d, y, h:mm:ss a zzzz\u0026amp;rsquo; e.g. Friday, February 9, 2018 at 5:40:22 PM GMT+08:00 Example Code Assuming \u0026amp;lsquo;date\u0026amp;rsquo; is (year: 2018, month: 2, day: 09, hour: 17, minute: 40, second: 22) in the local time and locale is …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"5bd7c01a65c20af32ed5b294995a9f5b","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/date-time-format-pipe/","publishdate":"2019-09-24T20:08:31+08:00","title":"Date Time Format Pipe"},{"content":"Singleton provides two error streams for users to listen to that emit objects of type VIPError.\nerrors$ on subscription will emit all errors emitted up to this point and each new error after that. lastError$ on subscription will emit last error emitted up to this point and each new error after that. export interface VIPError { code: VIPErrorCode; // custom code representing the type of failure that occurred data: VIPErrorData; // custom data related to the specific error type error: any; // api error response if such exists } User can listen through VIPService instance:\n// user-app.ts this.vipService.errors$.subscribe(error =\u0026amp;gt; { if (error.code === VIPErrorCode.ComponentLoadFailure) { // handle errors } }); this.vipService.lastError$.subscribe(error =\u0026amp;gt; { if (error.code === VIPErrorCode.ComponentLoadFailure) { // handle last error } }); ","date":1655375448,"description":"","lastmod":"2022-06-16T13:30:48+03:00","objectID":"bc5e36878648a3127a9251145fc1ad60","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/error-handling/","publishdate":"2022-06-16T13:30:48+03:00","title":"Error Handling"},{"content":"Overview I18n context is designed to manage the variables from different environments which carries pseudoEnabled, i18nEnabled, preferredLanguage, and other user-scoped values, provides a way to load and share these values between services without having to explicitly pass a parameter through every level of the service. In this way, users can use this interface to modify the default behavior regardless of the development or testing phase. The storage of these variables is configurable, and the default is saved in localstorage.\nimport { I18nContext } from \u0026amp;#34;@singleton-i18n/angular-client\u0026amp;#34;; Context Attributes Attribute Type Writable Default Description pseudoEnabled boolean readonly undefined The pseudo setting from localStorage, determine whether to show pseudo translation in debugging or developing stage. The value can be changed by localStorage, it will override the pseudo setting in i18n configs. i18nEnabled boolean writable undefined The i18n enable setting from localStorage, determine whether to use Singleton features in testing or product stage. preferredLanguage string writable undefined The preferred language from localStorage. Default storage The default context storage is based on localstorage, which can be replaced by cookie, session storage, etc. Developers and testers can directly modify the corresponding attribute values in the localstorage to change the default behavior of the application to achieve the purpose of testing. However, this requires certain development work in the application itself. The specific development and usage scenarios will be explained in detail in the following sessions.\nKey Description vip.pseudoEnabled The key in localStorage determines whether to enable pseudo. The value can be true or false. vip.i18nEnabled The key in localStorage determines whether to enable i18n. The value can be true or false. vip.preferredLanguage The key in the local storage to store the preferred language which is controlled by the application. …","date":1655372585,"description":"","lastmod":"2022-06-16T12:43:05+03:00","objectID":"6182cfc922dcedcbd9ebc50b90960c1d","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/i18n-context/","publishdate":"2022-06-16T12:43:05+03:00","title":"I18n Context"},{"content":"Overview I18n service provides APIs which are supposed to be used in JavaScript module to get supported languages \u0026amp;amp; regions, and format locale-sensitive data.\nimport { I18nService } from \u0026amp;#34;@singleton-i18n/angular-client\u0026amp;#34;; Supported Language \u0026amp;amp; Region \u0026amp;amp; City APIs getSupportedLanguages Get the supported languages which are available in singleton service for the specific product.\ngetSupportedLanguages(): Promise\u0026amp;lt;languagesList\u0026amp;gt;; getSupportedRegions Get the supported regions from singleton service, the supported region list should be unified in all products.\ngetSupportedRegions(languageTag: string): Promise\u0026amp;lt;regionsList\u0026amp;gt;; getCities Get the cities list of the specified region and display the cities\u0026amp;rsquo; names in a specific language.\nNote that the current city list is only available in English, and there is no translation in other languages.\ngetCities(regionCode: string, languageTag: string): Promise\u0026amp;lt;citiesList\u0026amp;gt;; Parameter Type Required Description languageTag String Required Get supported region list with the localized display name by the \u0026amp;rsquo;languageTag\u0026#39;. regionCode string Required Get the cities list of corresponding region. Example Code this.i18nService.getSupportedLanguages().then( languages =\u0026amp;gt; { this.languages = languages; // eg: [ { displayName: \u0026amp;#34;English\u0026amp;#34;, languageTag: \u0026amp;#34;en\u0026amp;#34; }, // { displayName: \u0026amp;#34;français\u0026amp;#34;, languageTag: \u0026amp;#34;fr\u0026amp;#34; }, // { displayName: \u0026amp;#34;简体中文\u0026amp;#34;, languageTag: \u0026amp;#34;zh-Hans\u0026amp;#34; } // ] }); this.i18nService.getSupportedRegions(\u0026amp;#39;fr\u0026amp;#39;).then( regions =\u0026amp;gt; { this.regions = regions; // eg: assuming that languageTag is fr // [ [ \u0026amp;#39;FR\u0026amp;#39;: \u0026amp;#39;France\u0026amp;#39;], // [ \u0026amp;#39;GE\u0026amp;#39;: \u0026amp;#39;Géorgie\u0026amp;#39; ], // [ \u0026amp;#39;CN\u0026amp;#39;: \u0026amp;#39;Chine\u0026amp;#39; ] ] }); Data Formatting APIs Data formatting APIs are locale-sensitive; their return depends on the locale. So when using these formatting APIs in the JavaScript module, locale pattern data is required, which can be loaded synchronously or …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"14a999506d61e37e5fcb54c7c190620c","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/i18n-service/","publishdate":"2019-09-24T20:08:31+08:00","title":"I18n Service"},{"content":"Overview The pipe or directive can\u0026amp;rsquo;t cover all situations, some strings need to be processed in JavaScript module rather than in the template. L10nService provides APIs for translation related information in addition to pipe and directive.\nAPI Get source string Will return source string in sourceBundle by key.\npublic getSourceString(key: string): string; Check if the key exists in the resource Determine whether the key exists in the source bundles or translations. If the locale is source locale, check whether the key exists in sourceBundles. If the locale is not source locale, check whether the key exists in translation.\npublic isExistKey(key: string, locale?: string ): boolean; Register source bundle The registerSourceBundles API is used to register the source strings on demand, such like, register source strings by component. By default, these source strings will be registered under the main configuration for root module or lazy module.\npublic registerSourceBundles(...args: sourceBundleObject[]); If you want to flexibly specify the corresponding configuration to register, please call the underlying source registration api in the VIPService:\npublic registerSourceBundles(sourceBundles: sourceBundleObject[], config: VIPConfig); Get formatted message Get the formatted message of a key. This method is synchronous, you are responsible for knowing when your translations have been loaded, and it is safe to use this method. If you are not sure or you want to support locale live update, you should subscribe to stream API and consume this method in an observer.\npublic getMessage(key: string, variables?: string[]|{}, locale?: string): string; Get scoped translate Get scoped \u0026amp;lsquo;getMessage\u0026amp;rsquo; for isolated module, through this closure the namespace is generated by the specific configuration as a prefix of key to distinguish the original key from the main module. The parameters of the generated function and the original \u0026amp;lsquo;getMessage\u0026amp;rsquo; are the same.\npublic …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"5338aede4e9b52f93e63255d8fb5175a","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/l10n-service/","publishdate":"2019-09-24T20:08:31+08:00","title":"L10n Service"},{"content":"Overview As the application is growing, certain modules will be defined as the lazy module. In that situation, the translation and patterns could be loaded as lazy mode to enhance performance. The Singleton Angular client provides this option to load translation and patterns along with lazy module. Using the \u0026amp;lsquo;forChild\u0026amp;rsquo; API to initialize the Singleton module, thus the lazy module will use the separated Singleton services instances created by its own injector.\nThe following example is the most recommended usage based on non-blocking data loading. Still, it requires subscribing to the stream to ensure that the data has been loaded when consuming synchronous APIs. If you don\u0026amp;rsquo;t want to implement live locale switching or are concerned about subscribing to the stream event, you can load data in a blocking way through I18nDataGuard in the corresponding route and then use synchronous APIs directly. More details, please refer to Data initialization.\nExample // lazy.module.ts ... import { VIPModule } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; @NgModule({ ... imports: [ ... VIPModule.forChild() ], ... }) export class LazyModule { constructor(private service: VIPService) { // In the simplified configuration of lazy loading module, // only the component name is required, and other fields are optional. service.initLazyModuleData({ component: \u0026amp;#39;default\u0026amp;#39;, sourceBundles: [ENGLISH] }); } } // sample.component.ts import { L10nService, I18nService, VIPService } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; import { Component, OnInit, OnDestroy } from \u0026amp;#39;@angular/core\u0026amp;#39;; @Component({ selector: \u0026amp;#39;sample\u0026amp;#39;, templateUrl: \u0026amp;#39;./sample.component.html\u0026amp;#39; }) export class SampleComponent implements OnInit, OnDestroy { subscription: any; constructor(private l10nService: L10nService, private i18nService: I18nService, private vipService: VIPService) { } ngOnInit() { this.subscription = this.vipService.stream.subscribe((locale: string) =\u0026amp;gt; { …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"bf4fc3a5f8c7ee32af3717baaaf9996d","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/lazy-load-module/","publishdate":"2019-09-24T20:08:31+08:00","title":"Lazy Load Module"},{"content":"Overview A locale consists of a number of categories for which country-dependent formatting or other specifications exist. A program\u0026amp;rsquo;s locale defines its code sets, date and time formatting conventions, monetary conventions, decimal formatting conventions, and collation (sort) order. A locale name can be composed of a base language, country (territory) of use, and codeset.\nFor example, German language is de, an abbreviation for Deutsch, while Swiss German is de_CH, CH being an abbreviation for Confederation Helvetica. This convention allows for specific differences by country, such as currency unit notation. The locale naming convention is:language[_territory][.codeset][@modifier]\nsingleton client uses language to determine the translations that need to be displayed in the user interface, as well as the rules for singular plural processing and relative time display. The combination of region and language determines the format of the date time, number, currency, and other string display.\nGet available languages \u0026amp;amp; regions If using a single language from the browser, this language will be treated as a locale for both L2 and L3 support.\nLanguage Provides two ways to get the supported languages: user browser language setting and the language from the user preference. There is one API to get the supported language of the current product, user can pick up one language as a preferred language, then stores into the backend DB. The recommended way is collecting both language and region information from the user as a user profile, this will work well with some complex situations.\nGet user language from browser:\ngetBrowserCultureLang(): string import { getBrowserCultureLang } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; const language = getBrowserCultureLang(); // eg: zh-CN Get supported languages list from singleton:\ngetSupportedLanguages(): Promise\u0026amp;lt;languagesList\u0026amp;gt;; import { I18nService } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; ... …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"027d231503cc0fcf9981f6c738dc5735","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/locale-management/","publishdate":"2019-09-24T20:08:31+08:00","title":"Locale Management"},{"content":"Overview The LocalizedComponent mixin provides a nice abstraction for localizing components in an Angular app.\nUsing the Mixin approach allows you to achieve three things:\nExtract English strings to a separate file, keeping your HTML template clean and containing only DOM. Provides a consistent pattern of where and how English strings are stored allowing easy automation and parsing of those files to collect the English into singleton. Your translation keys will always be prefixed with the key provided in the mixin, helping to avoid namespace clashes with other components. It also is useful to avoid using the translate pipe in HTML as the Angular linter often has trouble with complex English strings.\nExample Code // source.10n.ts export const ENGLISH = { \u0026amp;#34;my-key\u0026amp;#34;: \u0026amp;#34;Some english for my-key {0} {1}\u0026amp;#34;, \u0026amp;#34;my-key-with-html\u0026amp;#34;: ` \u0026amp;lt;em\u0026amp;gt;Some english in emphasis {0} {1}\u0026amp;lt;/em\u0026amp;gt; ` }; // demo.component.ts import { Component } from \u0026amp;#34;@angular/core\u0026amp;#34;; import { L10nService, LocalizedComponent, Mixin } from \u0026amp;#34;@singleton-i18n/angular-client\u0026amp;#34;; import { ENGLISH } from \u0026amp;#34;./my-component.l10n.ts\u0026amp;#34;; @Component({ selector: \u0026amp;#34;my-component\u0026amp;#34;, templateUrl: \u0026amp;#34;./my-component.template.html\u0026amp;#34;, }) @Mixin([LocalizedComponent], { L10nKey: \u0026amp;#34;my-component\u0026amp;#34;, L10nSourceMap: ENGLISH, }) export class MyComponent implements LocalizedComponent { translate: (key: string, ...args: any[]) =\u0026amp;gt; string; constructor(public l10nService: L10nService) {} } \u0026amp;lt;p\u0026amp;gt; {{translate(\u0026amp;#39;my-key\u0026amp;#39;, \u0026amp;#39;argument 1\u0026amp;#39;, \u0026amp;#39;argument 2\u0026amp;#39;)}} \u0026amp;lt;/p\u0026amp;gt; \u0026amp;lt;div [innerHTML]=\u0026amp;#34;translate(\u0026amp;#39;my-key-with-html\u0026amp;#39;, \u0026amp;#39;argument 1\u0026amp;#39;, \u0026amp;#39;argument 2\u0026amp;#39;)\u0026amp;#34;\u0026amp;gt;\u0026amp;lt;/div\u0026amp;gt; Collecting/Extracting Source English With the English sources isolated to a single type of file, we can easily write a script that collects all the English and dumps it into a JSON file for passing it to the translation team.\nThe Singleton Angular Client library provides a …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"e58a8123ebac11e90a0396b8b44d2dee","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/localized-component-mixin/","publishdate":"2019-09-24T20:08:31+08:00","title":"Localized Component Mixin"},{"content":"Overview Formats a number as text. Group sizing and separator and other locale-specific configurations are based on the pattern data.\nUsage {{ value | numberFormat [ : formatOptions ] }} Input Value Parameter Type Description value number / string The number to be formatted. Parameters Parameter Type Required Description formatOptions object Optional The results formats can be customized using the formatOptions argument. See formatOptions for further details. formatOptions Attribute Type Required Description minIntegerDigits number Optional The minimum digits of integer numbers used. The possible values are from 1 to 21, and the default value is 1. minFractionDigits number Optional The minimum digits of fraction numbers used. The possible values are from 0 to 20, and the default value is 0. maxFractionDigits number Optional The maximum digits of fraction numbers used. The possible values are from 0 to 20, and the default value is 3. notation string Optional The format in which this number should be displayed. For now only support \u0026amp;lsquo;compact\u0026amp;rsquo; for compact number formats. The default is \u0026amp;ldquo;standard\u0026amp;rdquo;. compactDisplay string Optional The \u0026amp;lsquo;compactDisplay\u0026amp;rsquo; is only used when notation is \u0026amp;ldquo;compact\u0026amp;rdquo;. The possible value is \u0026amp;ldquo;short\u0026amp;rdquo; (default) or \u0026amp;ldquo;long\u0026amp;rdquo;, and the default value is \u0026amp;ldquo;short\u0026amp;rdquo;. Example Code // input \u0026amp;#39;201703.5416926\u0026amp;#39; {{ num | numberFormat }} // output \u0026amp;#39;201,703.542\u0026amp;#39; // input \u0026amp;#39;1.149999\u0026amp;#39; {{ num | numberFormat }} // output \u0026amp;#39;1.150\u0026amp;#39; // input \u0026amp;#39;2.31\u0026amp;#39; {{ num | numberFormat }} // output \u0026amp;#39;2.31\u0026amp;#39; // input \u0026amp;#39;2017120107\u0026amp;#39; {{ num | numberFormat }} // output \u0026amp;#39;2,017,120,107\u0026amp;#39; // input \u0026amp;#39;.23\u0026amp;#39; {{ num | numberFormat }} // output \u0026amp;#39;0.23\u0026amp;#39; // Format options usages // Please note that pass object as a parameter, // the end of the brace should keep a whitespace. // input \u0026amp;#39;0.5416926\u0026amp;#39; {{ num | numberFormat: { maxFractionDigits: 6 } }} // …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"6c992339e91a6f6cc36cfaad0d769bf9","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/number-format-pipe/","publishdate":"2019-09-24T20:08:31+08:00","title":"Number Format Pipe"},{"content":"Overview Formats a number into percentage string. Group sizing and separator and other locale-specific configurations are based on the pattern data.\nUsage {{ value | percentFormat [ : formatOptions ] }} Parameters Parameter Type Description formatOptions object The results formats can be customized using the formatOptions argument. See formatOptions for further details. formatOptions Attribute Type Required Description minIntegerDigits number Optional The minimum digits of integer numbers used. The possible values are from 1 to 21, and the default value is 1.. minFractionDigits number Optional The minimum digits of fraction numbers used. The possible values are from 0 to 20, and the default value is 0. maxFractionDigits number Optional The maximum digits of fraction numbers used. The possible values are from 0 to 20, and the default value is 3. Example Code // input \u0026amp;#39;0.1\u0026amp;#39; {{ num | percentFormat }} // output \u0026amp;#39;10%\u0026amp;#39; // input \u0026amp;#39;0.1234\u0026amp;#39; {{ num | percentFormat }} // output \u0026amp;#39;12%\u0026amp;#39; // Format options usages // Please note that pass object as a parameter, // the end of the brace should keep a whitespace. // input \u0026amp;#39;0.1234\u0026amp;#39; {{ num | percentFormat: { minFractionDigits: 2 } }} // output \u0026amp;#39;12.34%\u0026amp;#39; // input \u0026amp;#39;12345\u0026amp;#39; {{ num | percentFormat }} // output \u0026amp;#39;1,234,500%\u0026amp;#39; ","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"263c87528eb217b42005fd2db4aa2ab2","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/percent-format-pipe/","publishdate":"2019-09-24T20:08:31+08:00","title":"Percent Format Pipe"},{"content":"Overview Transform a plural message string to a string that pluralizes the value according to locale rules and translations. It can be implemented using l10n utils, the only difference is the definition of the source.\nPlural Source Text The source text defines the message output for each plural case of the specified locale. Syntax:\nselector { message } /** * selector: explicitValue | keyword * explicitValue: \u0026amp;#39;=\u0026amp;#39; number // adjacent, no white space in between * keyword: Pluralization categories * message: string */ Pluralization categories include (depending on the language):\nzero one two few many other There are 6 predefined case keywords in CLDR/ICU. You always have to define a message text for the default plural case \u0026amp;ldquo;other\u0026amp;rdquo; which is contained in every rule set. If you do not specify a message text for a particular plural case, the message text of the plural case \u0026amp;ldquo;other\u0026amp;rdquo; gets assigned to this plural case.\nWhen formatting, the input number is first matched against the explicitValue clauses. If there is no exact-number match, then a keyword is selected by calling the PluralRules with the input number. If there is no clause with that keyword, then the \u0026amp;ldquo;other\u0026amp;rdquo; clauses is returned.\nAn unquoted pound sign (#) in the selected sub-message itself is replaced by the input number.\nNote: The pipe accept a parameters array, the placeholders in message should be index of variable in parameters array.\nExample Code source in bundle\n... \u0026amp;#39;ngx.singleton.files\u0026amp;#39; : \u0026amp;#39;{0, plural, =0 {No files.} one{There is one file on {1}.} other{There are # files on {1}.} }\u0026amp;#39; import { L10nService } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; @Component({ selector: \u0026amp;#39;test\u0026amp;#39;, templateUrl: \u0026amp;#39;./test.component.html\u0026amp;#39; }) export class TestComponent { constructor(private l10nService: L10nService) {} ... // static refresh mode this.thanslatedFiles = this.l10nService.getMessage(\u0026amp;#39;ngx.singleton.files\u0026amp;#39;, [ this.files.length, …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"ea86683437363fbec643bfbfcfe4874a","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/plural-format/","publishdate":"2019-09-24T20:08:31+08:00","title":"Plural Format"},{"content":"Overview Formats simple relative dates. Try to give the best relative time span representation based on start time and end time.\nAPI public formatRelativeTime( from: Date, to: Date, locale?: string, options?: Object ): string Parameters Parameter Type Required Description from Date Required Relative time start time. to Date Required Relative time end time. locale String Optional The locale is only required in async mode for non-blocking loading. Please refer to the stream API usage. options Object Optional The numeric default value is \u0026amp;lsquo;always\u0026amp;rsquo;. If numeric: \u0026amp;lsquo;auto\u0026amp;rsquo; option is passed, it will produce the string yesterday or tomorrow instead of 1 day ago or in 1 day, this allows to not always have to use numeric values in the output. Time Range and Unit Range Unit Output 0s ~ 44 seconds second x second(s) 45 ~ 89 seconds minute 1 minute 90 seconds ~ 44 minutes minute 2 ~ 44 minutes 45 ~ 89 minutes hour an hour 90 minutes ~ 21 hours hour 2 ~ 21 hours 22 ~ 35 hours day a day 36 hours ~ 25 days day 2 ~ 25 day 26 ~ 45 days month a month 45 ~ 319 days month 2 ~ 10 months 320 ~ 547 days(1.5 years) year a year 548 days+ year 2+ years Example Code import { I18nService } from \u0026amp;#39; @singleton-i18n/angular-client\u0026amp;#39;; import { Component, OnInit, OnDestroy } from \u0026amp;#39;@angular/core\u0026amp;#39;; @Component({ selector: \u0026amp;#39;test\u0026amp;#39;, templateUrl: \u0026amp;#39;./test.component.html\u0026amp;#39; }) export class TestComponent implements OnInit, OnDestroy { subscription: any; time:string; constructor(private i18nService: I18nService) {} ngOnInit() { this.subscription = this.i18nService.stream.subscribe((locale: string) =\u0026amp;gt; { // Assuming locale is en-US : const from = new Date(2019, 8, 1), to = new Date(2019, 9, 1); this.time = this.i18nService.formatRelativeTime( from, to, locale); // Output: in 1 month this.time = this.i18nService.formatRelativeTime( to, from, locale); // Output: 1 month ago this.time = this.i18nService.formatRelativeTime( from, to, locale, { numeric: …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"ece7de0eb67836c1db73c9cd6f0dc1dc","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/relative-time-format/","publishdate":"2019-09-24T20:08:31+08:00","title":"Relative Time Format"},{"content":"Overview Creating shared modules allows you to organize and streamline your code. You can put commonly used directives, pipes, and components into one module and then import just that module wherever you need it in other parts of your application. Therefore from the perspective of internationalization, singleton Angular client also provides corresponding support for the shared modules.\nResource Isolation By default, the resources of each Singleton component are isolated and registered in different namespaces to avoid duplicate keys causing content to be unexpectedly overwritten.\nExample Code Configuration // i18n.config.ts import { ENGLISH } from \u0026amp;#39;./header.l10n\u0026amp;#39;; import { PatternCategories } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; const I18nConfig = { productID: \u0026amp;#39;vipuiheader\u0026amp;#39;, component: \u0026amp;#39;default\u0026amp;#39;, version: \u0026amp;#39;1.0.0\u0026amp;#39;, i18nScope: [ PatternCategories.DATE, PatternCategories.NUMBER, PatternCategories.CURRENCIES ], host: \u0026amp;#39;https://singleton.service.com:8090/\u0026amp;#39;, // By default, the resources of each component are isolated. // Please set isolated as false in a shared module. isolated: false, sourceBundles: [ENGLISH] }; Configuration Registration Note: Never call a forRoot static method in a shared module. You might end up with different instances of the service in your injector tree.\n// shared-module.module.ts import { VIPModule, VIPService } from \u0026amp;#39; @singleton-i18n/angular-client\u0026amp;#39;; import { libConfig } from \u0026amp;#39;./i18n.util\u0026amp;#39;; @NgModule({ imports: [ ... VIPModule ] }) export class SharedFeatureModule { constructor(private vipService: VIPService) { // register feature module configuration vipService.registerComponent(libConfig); } } Usages Since the resource loading method in a shared module is uncertain, it may be synchronous or asynchronous depending on the calling scenario, when calling synchronous \u0026amp;lsquo;getMessage\u0026amp;rsquo; or data formatting-related methods, be sure to use these synchronous methods safely by …","date":1655374742,"description":"","lastmod":"2022-06-16T13:19:02+03:00","objectID":"722d1335fc5fd3acd81d0221e361d7ee","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/shared-feature-module/","publishdate":"2022-06-16T13:19:02+03:00","title":"Shared Feature Module"},{"content":"Standalone mode is designed for the application without singleton service at runtime to support internationalization, the translations and formatting patterns need to be downloaded from singleton service into local asset folder at buildtime. In this way, when the application starts, the Singleton Angular client will get translations and patterns from application web server through HTTP request.\nSpecification Register product No matter the singleton service will be running in product environment or not. For the software globalization process, the first step is always to register the product, component, version and supported locales through singleton service.\nNormalize the language code The language normalization is required when the language comes from user browser lanugage, however, each browser relies on different standard of langugae code, so the normalization is used to map the different format of language code to the singleton standard.\nMost of On-Premise applications have the language seletor to narrow down the language options, in that case the language normalization is only for default selection from user browser language, but just to make sure the language code from the language selector is consistent with the value which defined in the downloading script.\nimport { getBrowserCultureLang, LocaleService } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; ... get selectedLanguage(): string { return localStorage.getItem( USER_SELECTED_LANGUAGE ) || getBrowserCultureLang() || \u0026amp;#39;en\u0026amp;#39;; } // Singleton provides API to transform the language code from the browser into Singleton standard language code. // eg: zh-CN -\u0026amp;gt; zh-Hans getNormalizedLanguageCode(language: string): string{ return this.localeService.normalizeLanguageCode(language); } ... Define script to download locale data Use npm command line script to download locale data (translation and formatting pattern) into asset folder at buildtime.\nload-locale-data Parameter Type Value Description \u0026amp;ndash;directory …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"11c60e0cf51258fda187c4074adafb47","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/standalone-mode/","publishdate":"2019-09-24T20:08:31+08:00","title":"Standalone Mode"},{"content":"Overview Use the translate directive in your HTML templates to retrieve translations from the singleton service.\n@Directive({ selector: \u0026amp;#39;[l10n]\u0026amp;#39; }) class L10nDirective implements AfterViewInit { l10n: string; source: string; params: string[]; constructor(el: ElementRef, ...) ngAfterViewInit() } Selector [l10n]\nInputs Attribute Type Required Description key String Required Bound to L10nDirective.l10n.Define the key to identify the translation, it should name like this: component_module_page_control_shortmsg. e.g. web_settings_stats_statsTable_host; source String No Bound to L10nDirective.source.English string as default value, API will return it when there\u0026amp;rsquo;s no translation found either from cache or remote singleton server.If source is null, will looking for source string from sourceBundle. params Array[] No Bound to L10nDirective.params.Parameter array, it\u0026amp;rsquo;s used to format the translation/source when they contain placeholders. Example Code // Translate directive with source from sourceBundle, so there is no source in template \u0026amp;lt;span l10n=\u0026amp;#39;singleton.description\u0026amp;#39; [params]=\u0026amp;#34;[\u0026amp;#39;Singleton for Angular client\u0026amp;#39;]\u0026amp;#34; \u0026amp;gt;\u0026amp;lt;/span\u0026amp;gt; // Deprecated: Simple translate directive use \u0026amp;lt;span l10n=\u0026amp;#39;some.unique.key\u0026amp;#39; source=\u0026amp;#39;English for some.unique.key\u0026amp;#39;\u0026amp;gt;\u0026amp;lt;/span\u0026amp;gt; // Deprecated: Translate directive with substitution \u0026amp;lt;span l10n=\u0026amp;#39;some.unique.key\u0026amp;#39; source=\u0026amp;#39;English for some.unique.key with substitution {0}\u0026amp;#39; [params]=\u0026amp;#34;[\u0026amp;#39;someTemplateVariable\u0026amp;#39;]\u0026amp;#34;\u0026amp;gt;\u0026amp;lt;/span\u0026amp;gt; ","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"d11aad95d7633529f080678157643940","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/translate-directive/","publishdate":"2019-09-24T20:08:31+08:00","title":"Translate Directive"},{"content":"Overview Use the translate pipe in your HTML templates to retrieve translations from the singleton service.\nAPI L10n pipe Get translation by key, will find the source in the sourceBundle according to the key.\n{{ key | vtranslate:[ : variables ] }} Input Parameter Type Required Description key string required Define the key to identify the translation, it should name like this: component_module_page_control_shortmsg. e.g. web_settings_stats_statsTable_host; variables Array[] optional Parameter array, it\u0026amp;rsquo;s used to format the translation/source when they contain placeholders. Example Code export const ENGLISH = { \u0026amp;#39;some.unique.key\u0026amp;#39; : \u0026amp;#39;English for some.unique.key\u0026amp;#39;, \u0026amp;#39;singleton.description\u0026amp;#39; : \u0026amp;#39;{0} is common lib developed by VMware G11n team.\u0026amp;#39;, \u0026amp;#39;innerHTML.usage\u0026amp;#39; : \u0026amp;#39;For more details, please refer to [Singleton Angular Client](https://github.com/vmware/singleton/tree/g11n-angular-client).\u0026amp;#39; // innerHTML usage: use the innerHTML attribute with the pipe on any element. Not only for plain text node, also for raw HTML tags in source strings as inline tags. // Note: Convert \u0026amp;#34; to \u0026amp;amp;quot; for the value of attribute. } // L10n pipe {{\u0026amp;#39;some.unique.key\u0026amp;#39; | vtranslate }} {{\u0026amp;#39;singleton.description\u0026amp;#39; | vtranslate: \u0026amp;#39;Singleton for Angular client\u0026amp;#39;}} // L10n pipe innerHTML sample \u0026amp;lt;label [innerHTML]=\u0026amp;#34;\u0026amp;#39;innerHTML.usage\u0026amp;#39; | vtranslate\u0026amp;#34;\u0026amp;gt;\u0026amp;lt;/label\u0026amp;gt; ","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"476151206d82cce1cd34852e97217f98","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/angular-client-introduction/translate-pipe/","publishdate":"2019-09-24T20:08:31+08:00","title":"Translate Pipe"},{"content":"","date":1569337166,"description":"","lastmod":"2019-09-24T22:59:26+08:00","objectID":"a5d1418ffb3e1f706e29fcda5f79cf2b","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/","publishdate":"2019-09-24T22:59:26+08:00","title":"Singleton SDK"},{"content":"Introduction C# Client is a class libary running on Windows .NET Framework. It enables applications that can use .NET Framework libraries to handle its globalization easily.\nFeatures in C# Client Getting the translation. Getting messages by cache interfaces. Getting configuration content. Enrich implementations by extending different extension interfaces. APIs Available Factory Class I18N Interface For Configuration IConfig IConfigItem Interface For Release IRelease Interface For Translation ITranslation ISource Interface For Cache Messages IReleaseMessages ILocaleMessages IComponentMessages Interface For Extension IExtension ICacheManager ICacheComponentManager ICacheMessages ILog IResourceParser IAccessService Factory Class I18N It\u0026amp;rsquo;s the factory class that creates and initializes the configuration object and the release object. public sealed class I18N { public static IConfig LoadConfig(string resourceBaseName, Assembly assembly, string configResourceName); public static IConfig GetConfig(string product, string version); public static IRelease GetRelease(IConfig config); public static IExtension GetExtension(); } I18N / LoadConfig Load a configuration json or yaml text from the resource defined by a resx file and initialize a correspondent release object. Parameter Type Description resourceBaseName string Resource base name assembly Assembly It owns the resource configResourceName string Configuration resource name after base name Return Description IConfig Configuration Object I18N / GetConfig Get a loaded configuration object by product and version. Parameter Type Description product string Product name version string L10n version Return Description IConfig Configuration Object I18N / GetRelease Get the release object initialized by a configuration object. Parameter Type Description config IConfig Configuration object Return Description IRelease The release object I18N / GetExtension Get the extension interface to change ways of implementation. Return …","date":1584274071,"description":"","lastmod":"2020-03-15T20:07:51+08:00","objectID":"e0694375e6e90c0c6901921b59e67380","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/csharp-client-introduction/","publishdate":"2020-03-15T20:07:51+08:00","title":"C# Client Introduction"},{"content":"The Singleton Go Client is a Singleton SDK to fetch translations from Singleton service or bundles easily.\nFeatures in Go Client SDK Supported interfaces: GetLocaleList: Get supported locale list GetComponentList: Get supported component list GetStringMessage: Get a message with optional arguments. Fallback to default locale is provided. GetComponentMessages: Get messages of a component. Fallback to default locale is NOT provided. Provide cache management as well as cache registration. Support fallback to local bundles when failing to get from server Support fallback to default locale when failing to get a string message of a nondefault locale. APIs Available Global LoadConfig Load configuration from a file.\nParameters Parameter Type Description path string The path to a config file Return values Type Description *Config The config instance created error nil if successful Example\ncfg, err := sgtn.LoadConfig(\u0026amp;#34;resource/conf/singletonconfig.json\u0026amp;#34;) Initialize Initialize the client by the config.\nParameters Parameter Type Description cfg *Config The config to initialize client Return values None\nExample\nsgtn.Initialize(cfg) GetTranslation Get translation instance.\nParameters None\nReturn values Type Description Translation The translation instance Example\ntrans := sgtn.GetTranslation() SetHTTPHeaders Set customized http headers.\nParameters Parameter Type Description h map[string]string The headers to set Return values None\nExample\nsgtn.SetHTTPHeaders(map[string]string{ \u0026amp;#34;user\u0026amp;#34;: \u0026amp;#34;username\u0026amp;#34;, \u0026amp;#34;pass\u0026amp;#34;: \u0026amp;#34;password\u0026amp;#34;, }) SetLogger Set logger for client.\nParameters Parameter Type Description l Logger The logger to set Return values None\nExample\nsgtn.SetLogger(\u0026amp;lt;your logger\u0026amp;gt;) RegisterCache Register a separate cache implementation\nParameters Parameter Type Description c Cache The cache to register Return values None\nExample\nsgtn.RegisterCache(\u0026amp;lt;your cache\u0026amp;gt;) Translation interface GetLocaleList Get available locale list\nParameters …","date":1586226659,"description":"","lastmod":"2020-04-07T10:30:59+08:00","objectID":"d431c6a32751687ab6b19c6ed6c06773","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/go-client-introduction/","publishdate":"2020-04-07T10:30:59+08:00","title":"Go Client Introduction"},{"content":"Singleton Java Client Library To facilitate consumption of the Singleton Service API, internationalization(i18n) client libraries have been developed in several programming languages. These libraries encapsulate API calls to the Singleton service, significantly improving development efficiency and reducing the cost of development work. This section gives a high-level overview of the Singleton Java Client Library.\nFeatures Translation - retrieving localized/translated text Formatting - retrieving formatted data using CLDR-compliant, localized patterns (e.g. date, time, number, currency) Pluralization - retrieving singular/plural variations of data Pseudo-translation - generating a fake(pseudo) translation from source text. This is often used for testing purposes. Client-side Localization(L10n) Cache - allows the client application to quickly serve L10n data without frequently communicating with the Singleton service. Globalization(G11n) Modes A Java client application can be configured in one of the following modes.\nOnline - The Singleton service serves localized resources to the client application over HTTP. Offline - The client application uses localized resources that are stored in locally bundled files. Note: The client application can also be configured with both Online and Offline modes enabled. In this case, then Offline Mode will only be used as fallback in case of a Singleton service call failure.\nInstallation The Singleton Java Client Library must be added as a dependency in your client Java application. Builds can be found in this Maven repository. You may also see a sample application here.\nConfiguration The following properties make up the Singleton configuration of a client application. Store them in a Properties file, and put the file in the application classpath. See the configuration file in the sample application for reference.\nproductName - (Required) The name of the product with resources that are localized in the Singleton service. version: …","date":1569326871,"description":"","lastmod":"2019-09-24T20:07:51+08:00","objectID":"c15a4b9d378a9ad2a711972e4f10d585","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/java-client-introduction/","publishdate":"2019-09-24T20:07:51+08:00","title":"Java Client Introduction"},{"content":"Overview The Singleton JSClient(@singleton-i18n/js-core-sdk) is a Singleton Service-based JavaScript library used for l10n and i18n. It almost supports all JavaScript frameworks, and it can run in browsers, as well as NodeJS environments. With the Singleton JavaScript Client, it makes l10n and i18n implementation more easier in most projects. Now, let\u0026amp;rsquo;s look at what it is and how it works.\nFeatures JSClient Initilization Language and region management Load data API Provide string localization API Provide datetime,number,currency,percentage formatting API Source management via CLI scripts Runtime / Offline Mode JSClient Initilization How to initilize Singleton JSClient in frontend framework? it requires to figure out the root loading point where JSClient is able to comminicate with Singele Service fetching translations and patterns. E.g. index.js in React framework is the root loading point, during the initilizing process, it needs to provice basic product information (E.g. ProductID, Component, Version) and interacts with Singleton Service runtime, it will load corresponding translations and patterns by language and region when switching locale. Singleton JSClient offers API i18nClient.init(Configuration) as below snippet which is used to initilize JSClient when App startup. At the same time, Singleton JSClient also provides l10nService and i18nService APIs so that it is able to use their exposed methods to translate strings and format the data regarding datetime, number, percentage and currency.\nConfiguration Parameter Type Required Description productID string Required Product name. version string Required Translation version. component string Optional From Singleton service perspective, it typically has backend component,frontend component.And default component is \u0026amp;lsquo;default\u0026amp;rsquo;. host string Required Singleton service with which Singleton JSClient commnicaites to fetch translations and patterns by language and region. language string Optional …","date":1569326903,"description":"","lastmod":"2019-09-24T20:08:23+08:00","objectID":"4a02135a0cffd020bb554d55ff1f5157","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/javascript-client-introduction/","publishdate":"2019-09-24T20:08:23+08:00","title":"JavaScript Client Introduction"},{"content":"Introduction Several python files are provided as the python client to support accessing Singleton service, making Singleton users to handle its globalization easily.\nFeatures in Python Client Getting configuration content. Getting the translation. Getting messages of a locale. Prerequisites Python 2.x\nPython 3.x\nIt\u0026amp;rsquo;s better to install PyYAML module of python. Otherwise, the configuration file should be written in json.\nIf formats like Plural, Date, Number are needed, please install PyICU after icu4c is installed on the operating system.\nHow to use python client as a python package Install sgtnclient as a python package.\npip install sgtnclient pip3 install sgtnclient How to get and use the client code git clone -b g11n-python-client https://github.com/vmware/singleton.git Install it as a python package.\npython setup.py install Or use its code directly by putting them to a place where they can be imported to the application code.\nHow to write a configuration file The python client of Singleton needs a configuration file. Here is an example.\nBasic definition Key Type Description product string Product name l10n_version string L10N version, sometimes same with product version online_service_url string Points to singleton service offline_resources_base_url string Points to local directory starting with \u0026amp;lsquo;file://\u0026amp;rsquo; components dict Definition of components Extended definition Key Type Description Default default_locale string Default locale en-US source_locale string Source locale Same with default locale log_path string Log path, \u0026amp;lsquo;./\u0026amp;rsquo; means the path of configuration. None. Not in use cache_type string Cache type. \u0026amp;lsquo;by_key\u0026amp;rsquo; means not using component in api. default cache_path string Cache file path, \u0026amp;lsquo;./\u0026amp;rsquo; means the path of configuration. None. Not in use try_wait integer Interval to try again when failed and max delay of http request 10 cache_expired_time integer Interval to update data 3600 pseudo string Switch of pseudo …","date":1645495690,"description":"","lastmod":"2022-02-22T10:08:10+08:00","objectID":"3719bb4b5ea14c3aa2d0477de333c8e8","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-sdk/python-client-introduction/","publishdate":"2022-02-22T10:08:10+08:00","title":"Python Client Introduction"},{"content":"","date":1569337174,"description":"","lastmod":"2019-09-24T22:59:34+08:00","objectID":"c756b695fc9dc39354278ba25723b0d9","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-service/","publishdate":"2019-09-24T22:59:34+08:00","title":"Singleton Service"},{"content":"","date":1569339017,"description":"","lastmod":"2019-09-24T23:30:17+08:00","objectID":"404141291a641088232d315e934c0234","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-service/configurations/","publishdate":"2019-09-24T23:30:17+08:00","title":"Configurations"},{"content":"Encrypt AWS S3 accesskey and secretkey in Singleton Service Prerequisites Java 8 (Java 9+ are not supported, will get compiler issue)\nSingleton S3 I18n Service Build\nS3 configurations (accessKey, secretkey, region, bucketName)\n1. Encrypt AWS S3 accessKey and secretkey You can use the java language RsaCryptUtils to generate private.key and public.key.\nThe demo code as following:\nimport java.io.IOException; import java.io.UnsupportedEncodingException; import java.security.InvalidKeyException; import java.security.KeyFactory; import java.security.KeyPair; import java.security.KeyPairGenerator; import java.security.NoSuchAlgorithmException; import java.security.PrivateKey; import java.security.PublicKey; import java.security.SecureRandom; import java.security.spec.InvalidKeySpecException; import java.security.spec.PKCS8EncodedKeySpec; import java.security.spec.X509EncodedKeySpec; import java.util.Base64; import javax.crypto.BadPaddingException; import javax.crypto.Cipher; import javax.crypto.IllegalBlockSizeException; import javax.crypto.NoSuchPaddingException; public class RsaCryptUtils { private static final String CHARSET = \u0026amp;#34;utf-8\u0026amp;#34;; private static final Base64.Decoder decoder64 = Base64.getDecoder(); private static final Base64.Encoder encoder64 = Base64.getEncoder(); /** * create SecretKey * @param keySize * @return * @throws NoSuchAlgorithmException */ public static SecretKey generateSecretKey(int keySize) throws NoSuchAlgorithmException { KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\u0026amp;#34;RSA\u0026amp;#34;); keyGen.initialize(keySize, new SecureRandom()); KeyPair pair = keyGen.generateKeyPair(); PrivateKey privateKey = pair.getPrivate(); PublicKey publicKey = pair.getPublic(); return new SecretKey(encoder64.encodeToString(publicKey.getEncoded()), encoder64.encodeToString(privateKey.getEncoded())); } /** * encrypt Data by private key * @param data * @param privateInfoStr * @return * @throws IOException * @throws InvalidCipherTextException */ public static …","date":1614153633,"description":"","lastmod":"2021-02-24T16:00:33+08:00","objectID":"177f5c5da3f72be5b7620a2ddfc0109b","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-service/configurations/enable-s3-key-encrypted/","publishdate":"2021-02-24T16:00:33+08:00","title":"Enable S3 Key Encrypted"},{"content":"Singleton Service now supports to store the translation bundle files on AWS S3.\nThis page will introduce the details about Singleton Service S3 build.\nHow to generate Singleton Service S3 build? The steps to generate S3 build:\nClone Singleton Service code using Git. git clone git@github.com:vmware/singleton.git Update the complie configuration file in singleton/g11n-ws/gradle.properties datatype=bundle to\ndatatype=s3 Update the below s3 config items according to your requirements in singleton/g11n-ws/vip-manager-i18n/src/main/resources/application-s3.properties #S3 store config s3.keysEncryptEnable=true #The decode public key file path s3.publicKey=public.key s3.accessKey=##### s3.secretkey=###### s3.region=###### s3.bucketName=###### For S3 keys, you can define plain text, or encrypted text:\nPlain text: Set s3.keysEncryptEnable=false, only provide s3.accessKey and s3.secretkey; Encrypted text: Set s3.keysEncryptEnable=true, and refer to Enable S3 Key Encrypted for the details. Complie a build using Gradle wrapper under ./gradlew build Jar files will be generated to singleton/publish (Eg. singleton/publish/singleton-0.1.0.jar) The translation bundle structure in AWS S3:\n[bucket name]/l10n/bundles/[product name]/[version]/[component name]/messages_xx.json ","date":1572605613,"description":"","lastmod":"2019-11-01T18:53:33+08:00","objectID":"9ee9ae44542f2893304084808e68ba65","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-service/configurations/enable-s3-storage/","publishdate":"2019-11-01T18:53:33+08:00","title":"Enable S3 Storage"},{"content":"One of Singleton\u0026amp;rsquo;s features is to provide translation for products, but before you can get real translation from Singleton, your translation bundles should be already existing in Singleton Service.\nThis page will show you the details of adding your product(s) definition and corresponding translation bundles to Singleton Service.\nHow to add new product(s) and corresponding translation bundles to Singleton Service? Singleton provides 2 ways to do this:\nUsing Singleton API Go to Singleton Service swagger-ui: https://localhost:8090/i18n/api/doc/swagger-ui.html\ror http://localhost:8091/i18n/api/doc/swagger-ui.html Switch to v2 in Select a spec in the upper right corner;\nFind and expand translation-sync-api, you will get an API as below:\nPUT /i18n/api/v2/translation/products/{productName}/versions/{version} Update translation\nThen click Try it out;\nInput your productName/version/component/locale and the translation messages;\nVerify everything is fine, click Execute, then the translation messages will be pushed into Singleton Service, please use other GET API(s) to fetch the translation.\nNotes:\nproductName/version should match the value in translationData;\nYou can ignore the input for parameters: operationid/dataOrigin/machineTranslation/pseudo/requester, these parameters are VMware internally;\nFor locale definition, please refer to CLDR availableLocales and defaultContent\nCopy translation bundles to the location that Singleton Service reads Check the translation location in singleton-0.1.0.jar\\BOOT-INF\\classes\\application-bundle.properties #translation config\r#the follow item the Directory can\u0026amp;#39;t end of file separator\rtranslation.bundle.file.basepath =.\rtranslation.synch.git.flag = true By default, it\u0026amp;rsquo;s in the same location with the Singleton Service jar file, to find translation.bundle.file.basepath.\nCreate your translation bundle file(s) following the structure as below, and name your file(s) like \u0026amp;ldquo;messages_xx.json\u0026amp;rdquo; (for example: …","date":1589426707,"description":"","lastmod":"2020-05-14T11:25:07+08:00","objectID":"34cdaeb33ac3d8cfa08bc4c7c236e6f7","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-service/configurations/enable-new-product/","publishdate":"2020-05-14T11:25:07+08:00","title":"Enable New Product(s)"},{"content":"Singleton Service adds a new feature to support the product white list defination, that means only the product in the white list can work well to get translations and get supported language list. It is no impact for DateTimes / Numbers / Currencies / Plurals / Measurements / DateFields / RegionList .\nBy default, this feature is disabled.\nThis page will introduce the details about this new feature.\nHow to enable product white list in Singleton Service? The steps:\nGenerate a Singleton Service build or get a Singleton service build based on v0.3.0;\nCreate a JSON file named bundle.json, and put it into the folder .\\l10n\\bundles\\. The content is like:\n{ \u0026amp;#34;Testing\u0026amp;#34;: [\u0026amp;#34;1.0.0\u0026amp;#34;, \u0026amp;#34;1.0.5\u0026amp;#34;], \u0026amp;#34;SampleAPP\u0026amp;#34;: [\u0026amp;#34;1.0.0\u0026amp;#34;] } The products in this file will be supported by Singleton Service, it\u0026amp;rsquo;s not related to version, only productName.\nNotes:\nThis configuration file will be loaded into cache when Singleton Service starts. Please restart Singleton Service if any change for this configuration file.\nIf you use Singleton Service S3 build, please also put this configuration file into local folder .\\l10n\\bundles\\ with Singleton Service S3 build together. Don\u0026amp;rsquo;t move it to AWS storage.\n","date":1576044889,"description":"","lastmod":"2019-12-11T14:14:49+08:00","objectID":"619007e827c7716dd5b55444e9d9facd","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-service/configurations/enable-product-white-list/","publishdate":"2019-12-11T14:14:49+08:00","title":"Enable Product White List"},{"content":"","date":1569326808,"description":"","lastmod":"2019-09-24T20:06:48+08:00","objectID":"b6b86e06a271498ea28c05282d25f556","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-service/configurations/enable-pseudo-translation/","publishdate":"2019-09-24T20:06:48+08:00","title":"Enable Pseudo Translation"},{"content":"","date":1569326795,"description":"","lastmod":"2019-09-24T20:06:35+08:00","objectID":"85db27b5c2eaf19e50dec957a188d441","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-service/configurations/enable-source-collection/","publishdate":"2019-09-24T20:06:35+08:00","title":"Enable Source Collection"},{"content":"1. Prerequisites Java 8 (Java 9+ are not supported, will get compiler issue) Git Docker 2. Create Singleton Database docker image 2.1 Required Linux 64-bit Operation System and install docker successfully 2.2 Prepare the init db scripts 2.2.1 prepare the create users and databases sql scripts vipinitdb.sql CREATE USER pgvipconfig WITH PASSWORD \u0026amp;#39;vipconfig\u0026amp;#39;; CREATE USER pgvipdata WITH PASSWORD \u0026amp;#39;vipdata\u0026amp;#39;; CREATE DATABASE vipconfig OWNER pgvipconfig; CREATE DATABASE vipdata0 OWNER pgvipdata; CREATE DATABASE vipdata1 OWNER pgvipdata; 2.2.2 prepare the create config tab sql scripts vipinitconfigtab.sql create table vip_product(id bigint not null, product character varying(100) not null, datasource character varying(50) not null, status smallint not null default 0, created_userid bigint, crt_time timestamp); create sequence vip_product_seq increment by 1 minvalue 1 no maxvalue start with 1; alter table vip_product add primary key(id); alter table vip_product alter column id set default nextval(\u0026amp;#39;vip_product_seq\u0026amp;#39;); alter table vip_product add constraint uk_vip_product unique(product); 2.2.3 prepare the create data table sql scripts vipinitdatatab.sql create table vip_msg(id bigint not null, product character varying(100) not null, version character varying(50) not null, component character varying(100) not null, locale character varying(100) not null, messages jsonb, crt_time timestamp) partition by list(product); 2.3 prepare the Dockerfile FROM postgres:10.3 ENV INITDB_PATH /usr/local/initdb ENV AUTO_RUN_DIR /docker-entrypoint-initdb.d RUN mkdir -p $INITDB_PATH COPY ./vipinitdb.sql $INITDB_PATH/ COPY ./vipinitdatatab.sql $INITDB_PATH/ COPY ./vipinitconfigtab.sql $INITDB_PATH/ COPY ./vipinstalldb.sh $AUTO_RUN_DIR/ RUN chmod a+x $AUTO_RUN_DIR/vipinstalldb.sh 2.4 prepare the execute shell vipinstalldb.sh psql -U postgres -d postgres -f $INITDB_PATH/vipinitdb.sql psql -U pgvipconfig -d vipconfig -f $INITDB_PATH/vipinitconfigtab.sql psql -U pgvipdata -d …","date":1593659393,"description":"","lastmod":"2020-07-02T11:09:53+08:00","objectID":"87d312de769228f87761f6fa55433eb1","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-service/singleton-service-db-build-introducation/","publishdate":"2020-07-02T11:09:53+08:00","title":"DB builder for User guideline"},{"content":"Singleton Service has two API versions available at present: v1 and v2. API v1 was created in the early times of Singleton, while API v2 has been validated with many VMware products over years, which includes the largest number of APIs, and is closer to the Restful style. It is recommended to use API v2 in practice. This version provides two types of APIs:\nFormatting API, which is used to format the data like the date time/number/currency/unit of measure/singular and plural variations, just to name a few. Translation API Next, we\u0026amp;rsquo;ll talk about the usage of the main APIs under the two types.\nFormatting API Date Time Formatting API (formatting-date-api) Convert the specified time stamp to a new format suitable for the language as requested, using the provided pattern.\nGET/i18n/api/v2/formatting/date/localizedDate Parameters:\nlocale: (required) (String), to indicate the language as requested; e.g. en, zh-CN etc.\nlongDate: (required) (String), to indicate the time stamp in long date format; e.g. 1472728030290\npattern: (required) (String), to indicate the pattern to be used; e.g. YEAR = \u0026amp;ldquo;y\u0026amp;rdquo;, QUARTER = \u0026amp;ldquo;QQQQ\u0026amp;rdquo;, ABBR_QUARTER =\u0026amp;ldquo;QQQ\u0026amp;rdquo;, QUARTER_YEAR = \u0026amp;ldquo;QQQQy\u0026amp;rdquo; etc.\nReturn value:\n(JSON Object) The formatted date time value.\nExample:\n{Singleton service}/i18n/api/v2/formatting/date/localizedDate?locale=zh\u0026amp;ndash;CN\u0026amp;amp;longDate=1472728030290\u0026amp;amp;pattern=QQQQ\nReturn value: \u0026amp;ldquo;第三季度\u0026amp;rdquo; (the third quarter or Q3 in Chinese)\nNumber Formatting API (formatting-number-api) Convert the specified number to a new format suitable for the language as requested, with the decimal place provided.\nGET/i18n/api/v2/formatting/number/localizedNumber Parameters:\nlocale: (required) (String), to indicate the language as requested; e.g. zh-CN etc.\nnumber: (required) (String), to indicate the number to be converted; e.g. 123.45\nscale: (optional) (Integer), to indicate the decimal place to use in the formatted number; e.g. 2. The default value is …","date":1569326755,"description":"","lastmod":"2019-09-24T20:05:55+08:00","objectID":"61ea91676a682cc085422b526c176e11","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-service/singleton-service-apis/","publishdate":"2019-09-24T20:05:55+08:00","title":"Singleton Service APIs"},{"content":"Singleton adds script files to help user to start/check/stop Singleton Service build.\nHow to generate Singleton Script The steps:\nClone Singleton Service code using Git git clone git@github.com:vmware/singleton.git Complie a build using Gradle wrapper under ./g11n-ws folder ./gradlew build -x test Go to ./Singleton/Publish folder, find singletonScripts-0.1.0.zip, and extract it, you will get 4 files as below: singletonall.sh\rsingletonstart.sh\rsingletoncheck.sh\rsingletonstop.sh How to use Singleton Script singletonall.sh This script is used to start, stop, and status detect Singleton Service, also restart it when something wrong in Singleton Service running .\nPrepare: Make sure that Singleton Service build (name like singleton-xxx.jar) and singletonall.sh to same directory.\nUsage:\n./singletonall.sh [options]\rwhere options include:\rstart\tstart Singleton Service\rstatus\tcheck Singleton Service current status\rcheck\tcheck whether Singleton Sevice is running, will restart it if NO running\rstop\tstop Singleton Service singletonstart.sh This script is used to start Singleton Service build name like singleton-xxx.jar by default, also can start specific xxx.jar app by given parameter.\nPrepare: Make sure that Singleton Service build (name like singleton-xxx.jar) or any xxx.jar file you want to start, and singletonstart.sh to same directory.\nUsages:\n./singletonstart.sh\ror ./singletonstart.sh jarfile singletoncheck.sh This script is used to check running status of singleton-xxx.jar by default, also can check the running status of any xxx.jar by given parameter. And it will restart the app when something wrong in running.\nPrepare: Make sure that Singleton Service build (name like singleton-xxx.jar) or any xxx.jar file you want to check, and singletoncheck.sh to same directory.\nUsage:\n./singletoncheck.sh or\r./singletoncheck.sh jarfile singletonstop.sh This script is used to stop Singleton Service build name like singleton-xxx.jar by default, also can stop specific xxx.jar app by …","date":1583131951,"description":"","lastmod":"2020-03-02T14:52:31+08:00","objectID":"33bc4ad95407a7557c5f7f66ff13fb5f","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/overview/singleton-service/singleton-service-script/","publishdate":"2020-03-02T14:52:31+08:00","title":"Singleton Service Script"},{"content":"","date":1569337087,"description":"","lastmod":"2019-09-24T22:58:07+08:00","objectID":"5617073d31985978295a3b2bc83f777d","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/tutorials/","publishdate":"2019-09-24T22:58:07+08:00","title":"Tutorials"},{"content":"Coming soon\n","date":1569327076,"description":"","lastmod":"2019-09-24T20:11:16+08:00","objectID":"76d5215d16f60df659797e2a0cd5ec8d","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/tutorials/deploy-singleton-service-in-your-app/","publishdate":"2019-09-24T20:11:16+08:00","title":"Deploy Singleton Service in Your App"},{"content":"This guideline demonstrates how to integrate Singleton AngularClient with your Angular Framework on your application. Singleton AngularClient is a common lib providing I18n support for Angular framework on your application. The client will communicate with Singleton service to dynamically fetch translation and I18n pattern data for providing globalization support in messages and formatting. For I18n formatting, Singleton AngularClient also provides I18n support for datetime format, number format, currency and plural. Singleton AngularClient formatting is based on CLDR data repository and keeps the same scope in supported locale set. Install npm install @singleton-i18n/angular-client --save Initialization //Configure app.module.ts for loading data import { APP_INITIALIZER } from \u0026amp;#39;@angular/core\u0026amp;#39;; //These function are injected at application startup and executed during app initialization, singleton rely on it to initilize singleton for loading data import { HttpClientModule } from \u0026amp;#39;@angular/common/http\u0026amp;#39;; // Angular-Client based on this to communicate with Singleton Service import { VIPModule, VIPService, LocaleService, PatternCategories, getBrowserCultureLang, } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; import { ENGLISH } from \u0026amp;#39;app.l10n\u0026amp;#39;; //ENGLISH is source strings extracted from Angular Code export function initSingletonConfig(service: VIPService, localeService: LocaleService) { const browserLanguage = getBrowserCultureLang(); //get browser\u0026amp;#39;s language localeService.init(browserLanguage); return () =\u0026amp;gt; service.initData({ productID: \u0026amp;#39;ProductName\u0026amp;#39;, component: \u0026amp;#39;default\u0026amp;#39;, version: \u0026amp;#39;1.0.0\u0026amp;#39;, host: \u0026amp;#39;https://singleton-service\u0026amp;#39;, i18nScope: [ PatternCategories.DATE, PatternCategories.NUMBER, PatternCategories.PLURAL, PatternCategories.CURRENCIES ], isPseudo: false, collectSource: false, sourceBundle: ENGLISH, }); } @NgModule({ ... imports: [ ... HttpClientModule, VIPModule.forRoot(), ... ], providers: [ { …","date":1569327010,"description":"","lastmod":"2019-09-24T20:10:10+08:00","objectID":"987e246f669d697fadf7da6009985de1","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/tutorials/integrate-singleton-in-angular-app/","publishdate":"2019-09-24T20:10:10+08:00","title":"Integrate Singleton in Angular App"},{"content":"Coming soon\n","date":1569327023,"description":"","lastmod":"2019-09-24T20:10:23+08:00","objectID":"846655ba8235d9b25e8b00ecf5655945","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/tutorials/integrate-singleton-in-csharp-app/","publishdate":"2019-09-24T20:10:23+08:00","title":"Integrate Singleton in C# App"},{"content":"This guideline demonstrates how to integrate Singleton client(Java) in your application.\nSingleton Client(Java) is a common lib providing I18n support for Java application. The client will communicate with Singleton service to fetch translation and I18n pattern data for providing globalization support in messages and formatting.\nFor I18n formatting, Singleton Client(Java) also provides I18n support for datetime format, number format, currency and plural. Singleton Client(Java) formatting is based on CLDR data repository and keeps the same scope in supported locale set.\nRequirement Java 8+ - Dependency libraries:\njson-simple-1.1.1.jar slf4j-api-1.7.26 Build All of the builds could be found at this path: https://repo1.maven.org/maven2/com/vmware/singleton/singleton-client-java\nSample Codes of API Usage This is the example of how to use the APIs:\n// Import classes import com.vmware.vipclient.i18n.I18nFactory; import com.vmware.vipclient.i18n.VIPCfg; import com.vmware.vipclient.i18n.base.MessageCache; import com.vmware.vipclient.i18n.base.instances.TranslationMessage; // Initialize global setting VIPCfg cfg = VIPCfg.getInstance(); cfg.initialize(\u0026amp;#34;vipconfig\u0026amp;#34;); cfg.initializeVIPService(); cfg.createTranslationCache(MessageCache.class); // Create TranslationMessage Instance TranslationMessage t = (TranslationMessage) I18nFactory.getInstance(cfg).getMessageInstance(TranslationMessage.class); String translation = t.getString(…); // Create Formatting instance cfg.createFormattingCache(FormattingCache.class); DateFormatting dateformatting = (DateFormatting)i18n.getFormattingInstance(DateFormatting.class); dateformatting.formatDate(…); More JAVA APIs details: https://vmware.github.io/singleton/docs/overview/singleton-sdk/java-client-introduction/\nSample App https://github.com/vmware/singleton/tree/g11n-java-client/sample-client-app\n","date":1569326982,"description":"","lastmod":"2019-09-24T20:09:42+08:00","objectID":"173bef4008aa730a50865c67f6732545","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/tutorials/integrate-singleton-in-java-app/","publishdate":"2019-09-24T20:09:42+08:00","title":"Integrate Singleton in Java App"},{"content":"This guideline demonstrates how to integrate Singleton JSClient with your frontend Framework on your application. Singleton JSClient is a common lib providing I18n support theoretically for any frontend framework on your application. The client will communicate with Singleton service to dynamically fetch translation and I18n pattern data for providing globalization support in messages and formatting. For I18n formatting, Singleton JSClient also provides I18n support for datetime format, number format, currency and plural. Singleton JSClient formatting is based on CLDR data repository and keeps the same scope in supported locale set. Install npm install @singleton-i18n/js-core-sdk --save Integration Create Init method Before integration with Singleton JSClient, it needs to create init method using initialization of basic configuration regarding your application, such as productID, version and so on. Example as below. //i18nClient.js import { i18nClient as jsClient, getBrowserCultureLang, invalidParamater,PatternCategories } from \u0026amp;#34;@singleton-i18n/js-core-sdk\u0026amp;#34;; import { ENGLISH } from \u0026amp;#34;./source.l10n\u0026amp;#34;; const initI18nClient = () =\u0026amp;gt; { const currentLanguage = getBrowserCultureLang(); jsClient.init({ productID: \u0026amp;#34;iReact\u0026amp;#34;, component: \u0026amp;#34;UI\u0026amp;#34;, version: \u0026amp;#34;1.0.0\u0026amp;#34;, isPseudo: true, host: \u0026amp;#34;https://singleton-service:8090\u0026amp;#34;, language: currentLanguage, i18nScope: [PatternCategories.DATE, PatternCategories.NUMBER], sourceBundle: ENGLISH, httpOptions: { timeout: 3000, withCredentials: true, }, }); jsClient.paramError = invalidParamater; return jsClient; }; export const i18nClient = initI18nClient(); Root loading point While integrating with Singleton, it needs to load data regarding translations and formating from Singleton Service,so it has to figure out frontend framework root loading point where jsClient can fetch data ahead of pages rendering。 Generally speaking each frontend framework has a root loading file, for example, it is the …","date":1569326993,"description":"","lastmod":"2019-09-24T20:09:53+08:00","objectID":"455bc0030377fff891a9636dc4a67d2e","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/tutorials/integrate-singleton-in-javascript-app/","publishdate":"2019-09-24T20:09:53+08:00","title":"Integrate Singleton in Javascript App"},{"content":"Coming soon\n","date":1569327017,"description":"","lastmod":"2019-09-24T20:10:17+08:00","objectID":"7064fabf01d7bb1d7d5cc9e5c60c61c9","permalink":"https://vmware.github.io/singleton/docs-previous/v0.1/tutorials/integrate-singleton-in-python-app/","publishdate":"2019-09-24T20:10:17+08:00","title":"Integrate Singleton in Python App"},{"content":"","date":1569337087,"description":"","lastmod":"2019-09-24T22:58:07+08:00","objectID":"4cdd37113783e47641dd300543c94e1b","permalink":"https://vmware.github.io/singleton/docs/","publishdate":"2019-09-24T22:58:07+08:00","title":"Documentation"},{"content":"","date":1569337109,"description":"","lastmod":"2019-09-24T22:58:29+08:00","objectID":"f09cc107d66e7fd665ea6ab4c05074a8","permalink":"https://vmware.github.io/singleton/docs/get-started/","publishdate":"2019-09-24T22:58:29+08:00","title":"Get Started"},{"content":"Singleton official 0.1.0 Release is available now! Choose the download that\u0026amp;rsquo;s right for you and click one of the links below.\nSingleton Service 0.1.0 Binaries Downloading filename sha1 hash branch/tag singleton-manager-i18n-0.1.0.jar 8e7599495292ce34cdb9769ec43695999071a1fe master/v0.1.0-Singleton-Service singleton-manager-l10n-0.1.0.jar 8d744bb83e310a1b451a68fb65999803488c8cfc master/v0.1.0-Singleton-Service Installation Singleton Service include 2 types of builds, one is i18n manager, the other is l10n manager:\nI18n manager is the main build, it provides the restful APIs to talk with Singleton SDK. L10n manager will work together with I18n manager to achieve the feature Source Collection. Prerequisites\nJDK8 is installed and works well on your environment, as Singleton Service is based on JAVA language development. The ports (8088, 8090, 8091) are allowed to access and not in use, as Singleton service run based on these ports. To start Singleton Service I18n manager\njava -jar singleton-manager-i18n-0.1.0.jar To Start Singleton Service L10n manager\njava -jar singleton-manager-l10n-0.1.0.jar Singleton SDK 0.1.0 Binaries Downloading filename sha1 hash branch/tag singleton-client-java-0.1.0.jar d27afa9e1659759805e320daab7d8d0e5f7b8da2 g11n-java-client/v0.1.0-Singleton-Java-Client @singleton-i18n/js-core-sdk@0.1.0 1e776e866ded0751d39ea391cae29b412089fcc1 g11n-js-client/v0.1.0-Singleton-JS-Client @singleton-i18n/angular-client@0.1.0 8f8ae3ca2ef6e1bfccd828fc1b9e4c6e74f6be20 g11n-angular-client/v0.1.0-Singleton-Angular-Client ","date":1569326666,"description":"","lastmod":"2019-09-24T20:04:26+08:00","objectID":"f89bd661109a3f436757f8311bd720a4","permalink":"https://vmware.github.io/singleton/docs/get-started/download-and-installation/","publishdate":"2019-09-24T20:04:26+08:00","title":"Download and Installation"},{"content":"The Singleton application suite includes:\nSingleton Service: It contains an Application Program Interface (API), which is a web service that is used for i18n features, such as providing translated text. Singleton Client: It is used to communicate with Singleton Service to get the localized resources. Features and functionality Singleton offers the following features and functionality:\nSingleton Core API - Provides RESTful web services for delivering localized resources. Source collection - Offers a source collection feature for Singleton string-based APIs. For more information about how to use the feature, see the Enabling source collection on Singleton service section of the Singleton\u0026amp;rsquo;s User Guide. Pseudotranslation – Helps test product compatibility with locales before beginning the localization process. It automatically generates text that is designed to test various aspects of localization readiness, including character set support, UI design, and hardcoding. For more information about how to use the feature, see the Enabling pseudo translation on Singleton service section of the Singleton\u0026amp;rsquo;s User Guide. Using Singleton Downloading Singleton source code Prerequisites\nEnsure the following applications are installed: Java 8 Git Set the environment variables: Setting JAVA_HOME Adding JAVA_HOME to the Path system variable Step\nClone the repository to your environment using Git, by running the command git clone git@github.com:vmware/singleton.git.\nCompiling Singleton source code From the singleton/g11n-ws folder, generate the Singleton build file using the Gradle command ./gradlew build.\nThe .jar files are generated in the singleton/publish location. For example:\nsingleton/publish/singleton-0.1.0.jar\nRunning Singleton application To run the Singleton application, from the singleton/g11n-ws folder, run the Spring Boot main application, using the command: java - jar publish/singleton-0.1.0.jar.\nNOTE: To test all available API endpoints from the user …","date":1569326687,"description":"","lastmod":"2019-09-24T20:04:47+08:00","objectID":"26e5fc5ec888267c5a472b1ddd2f40f2","permalink":"https://vmware.github.io/singleton/docs/get-started/quick-start/","publishdate":"2019-09-24T20:04:47+08:00","title":"Quick Start"},{"content":"Singleton helps streamline the globalization process for software products. It provides a unified solution for product internationalization (i18n) and localization (L10n) across most of the popular programming languages, frameworks, and a wide range of developer tools such as Java, JavaScript, Angular applications.\nThe Singleton application suite includes:\nSingleton Service: It contains an Application Program Interface (API), which is a web service that is used for i18n features, such as providing translated text. Singleton Client: It is used to communicate with Singleton Service to get the localized resources. How Singleton works Singleton separates the localized resources including: embedded strings, locale-sensitive methods, functions, or classes (for example: date/ time formatting, number formatting), custom programming patterns, and static files from the product software. Using the Singleton Service (web service that provides a unified API), it sends the source artifacts or resources for translation. The localized resources are then processed externally and embedded into the Singleton Service.\nSingleton eliminates the need for developers to learn different APIs for internationalization across technologies and programming languages. It acts as an abstraction layer that provides consistent formatting of i18n to various applications that may be written in different programming languages. The web service API exposes REST endpoints for i18n that provides abstraction across multiple clients.\nBenefits of using Singleton Consistency: Singleton offers unified i18n and L10n implementation across programming languages and frameworks (from Java, Python, to various JavaScript frameworks). The unified implementation enables consistent product behaviors (such as date/time format, number format, searching and sorting results) and increases product quality and CSAT. Flexibility: Decoupling i18n and L10n from the product makes possible for asynchronous, continuous, and flexible …","date":1569337121,"description":"","lastmod":"2019-09-24T22:58:41+08:00","objectID":"6557438925ac398717df86f494c6abb8","permalink":"https://vmware.github.io/singleton/docs/overview/","publishdate":"2019-09-24T22:58:41+08:00","title":"Overview"},{"content":"Singleton for Angular client is common lib developed by VMware G11n team to provide i18n support for Angular framework. The client will communicate with singleton server for fetching translation and i18n patterns.\nMost translations provided by singleton service comes from Human translators, when new application is connected to singleton service, source strings (English strings), required language and related information will be sent to singleton service, singleton service doesn’t return real translation immediately since the human translators need time to figure out the quilted translation, at this moment, singleton service just delivers pseudo tag as placeholder to indicate singleton client works well with singleton service and App itself in development stage. Once the translations are ready, when the client side calls singleton service again, the real translations will be delivered via HTTP request. Please note that under English locale, the client doesn\u0026amp;rsquo;t make a network call to singleton service, but return English directly.\nBesides Localization, singleton client also provides I18n support for Datetime format, number format, currency and plural. singleton I18n service is based on CLDR data repository and keep the same scope in supported locales set. For the specific usages and API details please refer to following sections, if you find below APIs can\u0026amp;rsquo;t cover all usages of your application requirement, please feel free to contact with our team to add related API.\nFeatures Level-2 Dates, Times, Numbers and Currencies formatting support. For more details refer to i18n Level-2. Level-3 support. For more details refer to i18n Level-3. Version 10.x (support Angular10) 9.x (support Angular9) 8.x (support Angular8) 7.x (support Angular7.x) 6.x (support Angular6.x) 1.x (support Angular4.x \u0026amp;amp; Angular5.x) 0.7.x is no longer maintained, only for bugfix Installing the NPM module The module is published internal to VMware only, on the build-artifactory NPM …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"0b0fa8f837af61eef2e843b0223b23dc","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/","publishdate":"2019-09-24T20:08:31+08:00","title":"Angular Client Introduction"},{"content":"Load Translation Download the specified languages of translation files in your project location.\nCommand line arguments description Parameter Type Value Description \u0026amp;ndash;directory string required The directory you want to put translations in. \u0026amp;ndash;host string required This is singleton service which provides clients with translations and pattern. \u0026amp;ndash;product string required Product name. For now, singleton service doesn’t explicitly restrict name of product, but it\u0026amp;rsquo;s better to keep short and sync with the name in release master. \u0026amp;ndash;component string required Component name. \u0026amp;ndash;version string required Release version. \u0026amp;ndash;languages string required Specified the languages your product supports; Separated by , for example, zh-cn,en-US. \u0026amp;ndash;verbose Don\u0026amp;rsquo;t need optional If set, it will show all information during command execution for debug purpose. For example load-translation --directory `pwd`/src/app/assets --host https://singleton.service.com:8090 // It requires to deploy singleton service --product Testing --component default --version 1.0 --languages zh-cn,en-US Config script in package.json { ... scripts: { \u0026amp;#34;load-translation\u0026amp;#34;: \u0026amp;#34;load-translation --directory `pwd`/src/app/assets --host \u0026amp;lt;Singleton Service host\u0026amp;gt; --product \u0026amp;lt;product\u0026amp;gt; --component \u0026amp;lt;component\u0026amp;gt; --version \u0026amp;lt;product version\u0026amp;gt; } ... } Use the script npm run load-translation Collect Source Bundle The @singleton-i18n/angular-client provides a script to collect source strings from source bundles. This script collects the collection named ENGLISH from the files named *.l10n.ts, and then send them to the singleton server.\nCommand line arguments description Parameter Type Value Description \u0026amp;ndash;source-dir string required The directory your source code in. \u0026amp;ndash;host string required This is singleton service which provides clients with translations and pattern. \u0026amp;ndash;product string required Product name. For now, singleton service doesn’t explicitly …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"325876591bdef0491efeae40a1dbde44","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/command-line-utils/","publishdate":"2019-09-24T20:08:31+08:00","title":"Command Line Utils"},{"content":"Overview Formats a number into currency string. Group sizing and separator and other locale-specific configurations are based on the pattern data.\nUsage {{ value | currencyFormat [ : currencyCode [ : formatOptions ] ] }} Input Value Parameter Type Description value number / string The number to be formatted. Parameters Parameter Type Required Description currencyCode string Optional Currency code should be in accordance with ISO 4217 standard, such as USD for the US dollar and EUR for the euro. Optional. Default value is USD. formatOptions object Optional The results formats can be customized using the formatOptions argument. See formatOptions for further details. formatOptions Attribute Type Required Description minIntegerDigits number Optional The minimum digits of integer numbers used. The possible values are from 1 to 21, and the default value is 1. minFractionDigits number Optional The minimum digits of fraction numbers used. The possible values are from 0 to 20. The default value comes from ISO 4217 currency code list (if the list is not provided, the default value is 2). maxFractionDigits number Optional The maximum digits of fraction numbers used. The possible values are from 0 to 20. The default value is taken the larger of minimumfractiondigits and ISO 4217 currency code list (if the list is not provided, the default value is 2). notation string Optional The format in which this number should be displayed. For now only support \u0026amp;lsquo;compact\u0026amp;rsquo; for compact number formats. The default is \u0026amp;ldquo;standard\u0026amp;rdquo;. compactDisplay string Optional The \u0026amp;lsquo;compactDisplay\u0026amp;rsquo; is only used when notation is \u0026amp;ldquo;compact\u0026amp;rdquo;. The possible value is \u0026amp;ldquo;short\u0026amp;rdquo; (default) or \u0026amp;ldquo;long\u0026amp;rdquo;, and the default value is \u0026amp;ldquo;short\u0026amp;rdquo;. Example Code // input \u0026amp;#39;201703.5416926\u0026amp;#39; {{ num | currencyFormat }} // output \u0026amp;#39;$201,703.54\u0026amp;#39; // input \u0026amp;#39;1.149999\u0026amp;#39; {{ num | currencyFormat: \u0026amp;#39;JPY\u0026amp;#39; }} // output \u0026amp;#39;¥1\u0026amp;#39; // input …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"9c226c86cad5254e9e28a42bb5c3cbe1","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/currency-format-pipe/","publishdate":"2019-09-24T20:08:31+08:00","title":"Currency Format Pipe"},{"content":"In general, for most of the products, it\u0026amp;rsquo;s good enough to load all translations and patterns one time in root module when the application starts, but for some special requirements, such like: isolated translation for feature module or using lazy module to enhance performance, please refer to Isolated feature module and Lazy Load Module. singleton client provides two ways to load i18n data and initialize the services in root module:\nBlocking loading For preloading modules - Create a factory function that loads i18n resource data and provide that function to the APP_INITIALIZER token. The function is executed during the application bootstrap process, and the needed data is available on startup.\nexport function initVIPConfig(vipService: VIPService, localeService: LocaleService) { // Specify locale, either from browser language or user\u0026amp;#39;s profile. const currentlocale: string = getBrowserCultureLang(); localeService.init(currentlocale); return () =\u0026amp;gt; vipService.initData(I18nConfig); } @NgModule({ ... imports: [ ... HttpClientModule, VIPModule.forRoot(), ... ], providers: [{ provide: APP_INITIALIZER, useFactory: initVIPConfig, deps: [ VIPService, LocaleService ], multi: true }], ... }) export class AppModule {} For lazy-loading modules - Configure i18nDataGuard as part of the route object to load i18n resource for a lazy-loading module by reading lite Singleton configuration from route parameters, asynchronously load the data, and have it ready by the time the module activates and initializes.\nconst routes: Routes = [ { path: \u0026amp;#39;\u0026amp;#39;, component: SampleComponent, canActivate: [I18nDataGuard], data: { // \u0026amp;#39;vipConfig\u0026amp;#39; is specified keyword of Singleton configuration. // In the simplified configuration of lazy loading module, // only the component name is required, and other fields are optional. vipConfig: { component: \u0026amp;#39;sample\u0026amp;#39;, sourceBundles: [ENGLISH] } } } ] Non-blocking loading Whether it is preloading modules or lazy-loading modules, in …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"6008972efb0fc3b0c7e1a612fd2831cc","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/data-initialization/","publishdate":"2019-09-24T20:08:31+08:00","title":"Data Initialization"},{"content":"Overview Use the dateFormat pipe in your HTML templates to format a date according to locale rules.\nUsage {{ value | dateFormat [ : format [ : timezone ] ] }} Input Value Parameter Type Description value any a date object or a number (milliseconds since UTC epoch) or an ISO string (https://www.w3.org/TR/NOTE-datetime). Parameters Parameter Type Description format string indicates which date/time components to include. The format can be predefined as shown below (all examples are given for en-US) or custom as shown in the table. Default is \u0026amp;lsquo;mediumDate\u0026amp;rsquo;. timezone string to be used for formatting. It understands UTC/GMT and the continental US time zone abbreviations, but for general use, use a time zone offset, for example, \u0026amp;lsquo;+0430\u0026amp;rsquo; (4 hours, 30 minutes east of the Greenwich meridian) If not specified, the local system timezone of the end-user\u0026amp;rsquo;s browser will be used. Pre-defined format options Format Unit Output \u0026amp;lsquo;shortTime\u0026amp;rsquo; \u0026amp;lsquo;h:mm a\u0026amp;rsquo; e.g. 5:40 PM \u0026amp;lsquo;mediumTime\u0026amp;rsquo; \u0026amp;lsquo;h:mm:ss a\u0026amp;rsquo; e.g. 5:40:22 PM \u0026amp;rsquo;longTime\u0026amp;rsquo; \u0026amp;lsquo;h:mm:ss z\u0026amp;rsquo; e.g. 5:40:22 PM GMT+8 \u0026amp;lsquo;fullTime\u0026amp;rsquo; \u0026amp;lsquo;h:mm:ss zzzz\u0026amp;rsquo; e.g. 5:40:22 PM GMT+08:00 \u0026amp;lsquo;shortDate\u0026amp;rsquo; \u0026amp;lsquo;M/d/yy\u0026amp;rsquo; e.g. 2/9/18 \u0026amp;lsquo;mediumDate\u0026amp;rsquo; \u0026amp;lsquo;MMM d, y\u0026amp;rsquo; e.g. Feb 9, 2018 \u0026amp;rsquo;longDate\u0026#39; \u0026amp;lsquo;MMMM d, y\u0026amp;rsquo; e.g. February 9, 2018 \u0026amp;lsquo;fullDate\u0026amp;rsquo; \u0026amp;lsquo;EEEE, MMMM d, y\u0026amp;rsquo; e.g. Friday, February 9, 2018 \u0026amp;lsquo;short\u0026amp;rsquo; \u0026amp;lsquo;M/d/yy, h:mm a\u0026amp;rsquo; e.g. 2/9/18, 5:40 PM \u0026amp;lsquo;medium\u0026amp;rsquo; \u0026amp;lsquo;MMM d, y, h:mm:ss a\u0026amp;rsquo; e.g. Feb 9, 2018, 5:40:22 PM \u0026amp;rsquo;long\u0026#39; \u0026amp;lsquo;MMMM d, y, h:mm:ss a z\u0026amp;rsquo; e.g. February 9, 2018 at 5:40:22 PM GMT+8 \u0026amp;lsquo;full\u0026amp;rsquo; \u0026amp;lsquo;EEEE, MMMM d, y, h:mm:ss a zzzz\u0026amp;rsquo; e.g. Friday, February 9, 2018 at 5:40:22 PM GMT+08:00 Example Code Assuming \u0026amp;lsquo;date\u0026amp;rsquo; is (year: 2018, month: 2, day: 09, hour: 17, minute: 40, second: 22) in the local time and locale is …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"6d86ca7d795d07920c4c31f805f40fe9","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/date-time-format-pipe/","publishdate":"2019-09-24T20:08:31+08:00","title":"Date Time Format Pipe"},{"content":"Singleton provides two error streams for users to listen to that emit objects of type VIPError.\nerrors$ on subscription will emit all errors emitted up to this point and each new error after that. lastError$ on subscription will emit last error emitted up to this point and each new error after that. export interface VIPError { code: VIPErrorCode; // custom code representing the type of failure that occurred data: VIPErrorData; // custom data related to the specific error type error: any; // api error response if such exists } User can listen through VIPService instance:\n// user-app.ts this.vipService.errors$.subscribe(error =\u0026amp;gt; { if (error.code === VIPErrorCode.ComponentLoadFailure) { // handle errors } }); this.vipService.lastError$.subscribe(error =\u0026amp;gt; { if (error.code === VIPErrorCode.ComponentLoadFailure) { // handle last error } }); ","date":1655375448,"description":"","lastmod":"2022-06-16T13:30:48+03:00","objectID":"73829e09e82928e6d61f892470818b19","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/error-handling/","publishdate":"2022-06-16T13:30:48+03:00","title":"Error Handling"},{"content":"Overview I18n context is designed to manage the variables from different environments which carries pseudoEnabled, i18nEnabled, preferredLanguage, and other user-scoped values, provides a way to load and share these values between services without having to explicitly pass a parameter through every level of the service. In this way, users can use this interface to modify the default behavior regardless of the development or testing phase. The storage of these variables is configurable, and the default is saved in localstorage.\nimport { I18nContext } from \u0026amp;#34;@singleton-i18n/angular-client\u0026amp;#34;; Context Attributes Attribute Type Writable Default Description pseudoEnabled boolean readonly undefined The pseudo setting from localStorage, determine whether to show pseudo translation in debugging or developing stage. The value can be changed by localStorage, it will override the pseudo setting in i18n configs. i18nEnabled boolean writable undefined The i18n enable setting from localStorage, determine whether to use Singleton features in testing or product stage. preferredLanguage string writable undefined The preferred language from localStorage. Default storage The default context storage is based on localstorage, which can be replaced by cookie, session storage, etc. Developers and testers can directly modify the corresponding attribute values in the localstorage to change the default behavior of the application to achieve the purpose of testing. However, this requires certain development work in the application itself. The specific development and usage scenarios will be explained in detail in the following sessions.\nKey Description vip.pseudoEnabled The key in localStorage determines whether to enable pseudo. The value can be true or false. vip.i18nEnabled The key in localStorage determines whether to enable i18n. The value can be true or false. vip.preferredLanguage The key in the local storage to store the preferred language which is controlled by the application. …","date":1655372585,"description":"","lastmod":"2022-06-16T12:43:05+03:00","objectID":"3b36437b0ade5d6d206fc5ada1eaf1f8","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/i18n-context/","publishdate":"2022-06-16T12:43:05+03:00","title":"I18n Context"},{"content":"Overview I18n service provides APIs which are supposed to be used in JavaScript module to get supported languages \u0026amp;amp; regions, and format locale-sensitive data.\nimport { I18nService } from \u0026amp;#34;@singleton-i18n/angular-client\u0026amp;#34;; Supported Language \u0026amp;amp; Region \u0026amp;amp; City APIs getSupportedLanguages Get the supported languages which are available in singleton service for the specific product.\ngetSupportedLanguages(): Promise\u0026amp;lt;languagesList\u0026amp;gt;; getSupportedRegions Get the supported regions from singleton service, the supported region list should be unified in all products.\ngetSupportedRegions(languageTag: string): Promise\u0026amp;lt;regionsList\u0026amp;gt;; getCities Get the cities list of the specified region and display the cities\u0026amp;rsquo; names in a specific language.\nNote that the current city list is only available in English, and there is no translation in other languages.\ngetCities(regionCode: string, languageTag: string): Promise\u0026amp;lt;citiesList\u0026amp;gt;; Parameter Type Required Description languageTag String Required Get supported region list with the localized display name by the \u0026amp;rsquo;languageTag\u0026#39;. regionCode string Required Get the cities list of corresponding region. Example Code this.i18nService.getSupportedLanguages().then( languages =\u0026amp;gt; { this.languages = languages; // eg: [ { displayName: \u0026amp;#34;English\u0026amp;#34;, languageTag: \u0026amp;#34;en\u0026amp;#34; }, // { displayName: \u0026amp;#34;français\u0026amp;#34;, languageTag: \u0026amp;#34;fr\u0026amp;#34; }, // { displayName: \u0026amp;#34;简体中文\u0026amp;#34;, languageTag: \u0026amp;#34;zh-Hans\u0026amp;#34; } // ] }); this.i18nService.getSupportedRegions(\u0026amp;#39;fr\u0026amp;#39;).then( regions =\u0026amp;gt; { this.regions = regions; // eg: assuming that languageTag is fr // [ [ \u0026amp;#39;FR\u0026amp;#39;: \u0026amp;#39;France\u0026amp;#39;], // [ \u0026amp;#39;GE\u0026amp;#39;: \u0026amp;#39;Géorgie\u0026amp;#39; ], // [ \u0026amp;#39;CN\u0026amp;#39;: \u0026amp;#39;Chine\u0026amp;#39; ] ] }); Data Formatting APIs Data formatting APIs are locale-sensitive; their return depends on the locale. So when using these formatting APIs in the JavaScript module, locale pattern data is required, which can be loaded synchronously or …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"f1a295ba56da5a00cfc4f98a50b5932b","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/i18n-service/","publishdate":"2019-09-24T20:08:31+08:00","title":"I18n Service"},{"content":"Overview The pipe or directive can\u0026amp;rsquo;t cover all situations, some strings need to be processed in JavaScript module rather than in the template. L10nService provides APIs for translation related information in addition to pipe and directive.\nAPI Get source string Will return source string in sourceBundle by key.\npublic getSourceString(key: string): string; Check if the key exists in the resource Determine whether the key exists in the source bundles or translations. If the locale is source locale, check whether the key exists in sourceBundles. If the locale is not source locale, check whether the key exists in translation.\npublic isExistKey(key: string, locale?: string ): boolean; Register source bundle The registerSourceBundles API is used to register the source strings on demand, such like, register source strings by component. By default, these source strings will be registered under the main configuration for root module or lazy module.\npublic registerSourceBundles(...args: sourceBundleObject[]); If you want to flexibly specify the corresponding configuration to register, please call the underlying source registration api in the VIPService:\npublic registerSourceBundles(sourceBundles: sourceBundleObject[], config: VIPConfig); Get formatted message Get the formatted message of a key. This method is synchronous, you are responsible for knowing when your translations have been loaded, and it is safe to use this method. If you are not sure or you want to support locale live update, you should subscribe to stream API and consume this method in an observer.\npublic getMessage(key: string, variables?: string[]|{}, locale?: string): string; Get scoped translate Get scoped \u0026amp;lsquo;getMessage\u0026amp;rsquo; for isolated module, through this closure the namespace is generated by the specific configuration as a prefix of key to distinguish the original key from the main module. The parameters of the generated function and the original \u0026amp;lsquo;getMessage\u0026amp;rsquo; are the same.\npublic …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"b35536ac0c6547f5398fa83bff911571","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/l10n-service/","publishdate":"2019-09-24T20:08:31+08:00","title":"L10n Service"},{"content":"Overview As the application is growing, certain modules will be defined as the lazy module. In that situation, the translation and patterns could be loaded as lazy mode to enhance performance. The Singleton Angular client provides this option to load translation and patterns along with lazy module. Using the \u0026amp;lsquo;forChild\u0026amp;rsquo; API to initialize the Singleton module, thus the lazy module will use the separated Singleton services instances created by its own injector.\nThe following example is the most recommended usage based on non-blocking data loading. Still, it requires subscribing to the stream to ensure that the data has been loaded when consuming synchronous APIs. If you don\u0026amp;rsquo;t want to implement live locale switching or are concerned about subscribing to the stream event, you can load data in a blocking way through I18nDataGuard in the corresponding route and then use synchronous APIs directly. More details, please refer to Data initialization.\nExample // lazy.module.ts ... import { VIPModule } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; @NgModule({ ... imports: [ ... VIPModule.forChild() ], ... }) export class LazyModule { constructor(private service: VIPService) { // In the simplified configuration of lazy loading module, // only the component name is required, and other fields are optional. service.initLazyModuleData({ component: \u0026amp;#39;default\u0026amp;#39;, sourceBundles: [ENGLISH] }); } } // sample.component.ts import { L10nService, I18nService, VIPService } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; import { Component, OnInit, OnDestroy } from \u0026amp;#39;@angular/core\u0026amp;#39;; @Component({ selector: \u0026amp;#39;sample\u0026amp;#39;, templateUrl: \u0026amp;#39;./sample.component.html\u0026amp;#39; }) export class SampleComponent implements OnInit, OnDestroy { subscription: any; constructor(private l10nService: L10nService, private i18nService: I18nService, private vipService: VIPService) { } ngOnInit() { this.subscription = this.vipService.stream.subscribe((locale: string) =\u0026amp;gt; { …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"5812d7f937aa664e9cac9a0db82ff193","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/lazy-load-module/","publishdate":"2019-09-24T20:08:31+08:00","title":"Lazy Load Module"},{"content":"Overview A locale consists of a number of categories for which country-dependent formatting or other specifications exist. A program\u0026amp;rsquo;s locale defines its code sets, date and time formatting conventions, monetary conventions, decimal formatting conventions, and collation (sort) order. A locale name can be composed of a base language, country (territory) of use, and codeset.\nFor example, German language is de, an abbreviation for Deutsch, while Swiss German is de_CH, CH being an abbreviation for Confederation Helvetica. This convention allows for specific differences by country, such as currency unit notation. The locale naming convention is:language[_territory][.codeset][@modifier]\nsingleton client uses language to determine the translations that need to be displayed in the user interface, as well as the rules for singular plural processing and relative time display. The combination of region and language determines the format of the date time, number, currency, and other string display.\nGet available languages \u0026amp;amp; regions If using a single language from the browser, this language will be treated as a locale for both L2 and L3 support.\nLanguage Provides two ways to get the supported languages: user browser language setting and the language from the user preference. There is one API to get the supported language of the current product, user can pick up one language as a preferred language, then stores into the backend DB. The recommended way is collecting both language and region information from the user as a user profile, this will work well with some complex situations.\nGet user language from browser:\ngetBrowserCultureLang(): string import { getBrowserCultureLang } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; const language = getBrowserCultureLang(); // eg: zh-CN Get supported languages list from singleton:\ngetSupportedLanguages(): Promise\u0026amp;lt;languagesList\u0026amp;gt;; import { I18nService } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; ... …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"0ea4580ec2e87841e55dc1d705c0fe3f","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/locale-management/","publishdate":"2019-09-24T20:08:31+08:00","title":"Locale Management"},{"content":"Overview The LocalizedComponent mixin provides a nice abstraction for localizing components in an Angular app.\nUsing the Mixin approach allows you to achieve three things:\nExtract English strings to a separate file, keeping your HTML template clean and containing only DOM. Provides a consistent pattern of where and how English strings are stored allowing easy automation and parsing of those files to collect the English into singleton. Your translation keys will always be prefixed with the key provided in the mixin, helping to avoid namespace clashes with other components. It also is useful to avoid using the translate pipe in HTML as the Angular linter often has trouble with complex English strings.\nExample Code // source.10n.ts export const ENGLISH = { \u0026amp;#34;my-key\u0026amp;#34;: \u0026amp;#34;Some english for my-key {0} {1}\u0026amp;#34;, \u0026amp;#34;my-key-with-html\u0026amp;#34;: ` \u0026amp;lt;em\u0026amp;gt;Some english in emphasis {0} {1}\u0026amp;lt;/em\u0026amp;gt; ` }; // demo.component.ts import { Component } from \u0026amp;#34;@angular/core\u0026amp;#34;; import { L10nService, LocalizedComponent, Mixin } from \u0026amp;#34;@singleton-i18n/angular-client\u0026amp;#34;; import { ENGLISH } from \u0026amp;#34;./my-component.l10n.ts\u0026amp;#34;; @Component({ selector: \u0026amp;#34;my-component\u0026amp;#34;, templateUrl: \u0026amp;#34;./my-component.template.html\u0026amp;#34;, }) @Mixin([LocalizedComponent], { L10nKey: \u0026amp;#34;my-component\u0026amp;#34;, L10nSourceMap: ENGLISH, }) export class MyComponent implements LocalizedComponent { translate: (key: string, ...args: any[]) =\u0026amp;gt; string; constructor(public l10nService: L10nService) {} } \u0026amp;lt;p\u0026amp;gt; {{translate(\u0026amp;#39;my-key\u0026amp;#39;, \u0026amp;#39;argument 1\u0026amp;#39;, \u0026amp;#39;argument 2\u0026amp;#39;)}} \u0026amp;lt;/p\u0026amp;gt; \u0026amp;lt;div [innerHTML]=\u0026amp;#34;translate(\u0026amp;#39;my-key-with-html\u0026amp;#39;, \u0026amp;#39;argument 1\u0026amp;#39;, \u0026amp;#39;argument 2\u0026amp;#39;)\u0026amp;#34;\u0026amp;gt;\u0026amp;lt;/div\u0026amp;gt; Collecting/Extracting Source English With the English sources isolated to a single type of file, we can easily write a script that collects all the English and dumps it into a JSON file for passing it to the translation team.\nThe Singleton Angular Client library provides a …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"f48b0ebd387db0fe305083a949caf20d","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/localized-component-mixin/","publishdate":"2019-09-24T20:08:31+08:00","title":"Localized Component Mixin"},{"content":"Overview Formats a number as text. Group sizing and separator and other locale-specific configurations are based on the pattern data.\nUsage {{ value | numberFormat [ : formatOptions ] }} Input Value Parameter Type Description value number / string The number to be formatted. Parameters Parameter Type Required Description formatOptions object Optional The results formats can be customized using the formatOptions argument. See formatOptions for further details. formatOptions Attribute Type Required Description minIntegerDigits number Optional The minimum digits of integer numbers used. The possible values are from 1 to 21, and the default value is 1. minFractionDigits number Optional The minimum digits of fraction numbers used. The possible values are from 0 to 20, and the default value is 0. maxFractionDigits number Optional The maximum digits of fraction numbers used. The possible values are from 0 to 20, and the default value is 3. notation string Optional The format in which this number should be displayed. For now only support \u0026amp;lsquo;compact\u0026amp;rsquo; for compact number formats. The default is \u0026amp;ldquo;standard\u0026amp;rdquo;. compactDisplay string Optional The \u0026amp;lsquo;compactDisplay\u0026amp;rsquo; is only used when notation is \u0026amp;ldquo;compact\u0026amp;rdquo;. The possible value is \u0026amp;ldquo;short\u0026amp;rdquo; (default) or \u0026amp;ldquo;long\u0026amp;rdquo;, and the default value is \u0026amp;ldquo;short\u0026amp;rdquo;. Example Code // input \u0026amp;#39;201703.5416926\u0026amp;#39; {{ num | numberFormat }} // output \u0026amp;#39;201,703.542\u0026amp;#39; // input \u0026amp;#39;1.149999\u0026amp;#39; {{ num | numberFormat }} // output \u0026amp;#39;1.150\u0026amp;#39; // input \u0026amp;#39;2.31\u0026amp;#39; {{ num | numberFormat }} // output \u0026amp;#39;2.31\u0026amp;#39; // input \u0026amp;#39;2017120107\u0026amp;#39; {{ num | numberFormat }} // output \u0026amp;#39;2,017,120,107\u0026amp;#39; // input \u0026amp;#39;.23\u0026amp;#39; {{ num | numberFormat }} // output \u0026amp;#39;0.23\u0026amp;#39; // Format options usages // Please note that pass object as a parameter, // the end of the brace should keep a whitespace. // input \u0026amp;#39;0.5416926\u0026amp;#39; {{ num | numberFormat: { maxFractionDigits: 6 } }} // …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"1d4170efad7ba7a184886bef9706abde","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/number-format-pipe/","publishdate":"2019-09-24T20:08:31+08:00","title":"Number Format Pipe"},{"content":"Overview Formats a number into percentage string. Group sizing and separator and other locale-specific configurations are based on the pattern data.\nUsage {{ value | percentFormat [ : formatOptions ] }} Parameters Parameter Type Description formatOptions object The results formats can be customized using the formatOptions argument. See formatOptions for further details. formatOptions Attribute Type Required Description minIntegerDigits number Optional The minimum digits of integer numbers used. The possible values are from 1 to 21, and the default value is 1.. minFractionDigits number Optional The minimum digits of fraction numbers used. The possible values are from 0 to 20, and the default value is 0. maxFractionDigits number Optional The maximum digits of fraction numbers used. The possible values are from 0 to 20, and the default value is 3. Example Code // input \u0026amp;#39;0.1\u0026amp;#39; {{ num | percentFormat }} // output \u0026amp;#39;10%\u0026amp;#39; // input \u0026amp;#39;0.1234\u0026amp;#39; {{ num | percentFormat }} // output \u0026amp;#39;12%\u0026amp;#39; // Format options usages // Please note that pass object as a parameter, // the end of the brace should keep a whitespace. // input \u0026amp;#39;0.1234\u0026amp;#39; {{ num | percentFormat: { minFractionDigits: 2 } }} // output \u0026amp;#39;12.34%\u0026amp;#39; // input \u0026amp;#39;12345\u0026amp;#39; {{ num | percentFormat }} // output \u0026amp;#39;1,234,500%\u0026amp;#39; ","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"7d368731bf599f2c53ca180e95ee6c70","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/percent-format-pipe/","publishdate":"2019-09-24T20:08:31+08:00","title":"Percent Format Pipe"},{"content":"Overview Transform a plural message string to a string that pluralizes the value according to locale rules and translations. It can be implemented using l10n utils, the only difference is the definition of the source.\nPlural Source Text The source text defines the message output for each plural case of the specified locale. Syntax:\nselector { message } /** * selector: explicitValue | keyword * explicitValue: \u0026amp;#39;=\u0026amp;#39; number // adjacent, no white space in between * keyword: Pluralization categories * message: string */ Pluralization categories include (depending on the language):\nzero one two few many other There are 6 predefined case keywords in CLDR/ICU. You always have to define a message text for the default plural case \u0026amp;ldquo;other\u0026amp;rdquo; which is contained in every rule set. If you do not specify a message text for a particular plural case, the message text of the plural case \u0026amp;ldquo;other\u0026amp;rdquo; gets assigned to this plural case.\nWhen formatting, the input number is first matched against the explicitValue clauses. If there is no exact-number match, then a keyword is selected by calling the PluralRules with the input number. If there is no clause with that keyword, then the \u0026amp;ldquo;other\u0026amp;rdquo; clauses is returned.\nAn unquoted pound sign (#) in the selected sub-message itself is replaced by the input number.\nNote: The pipe accept a parameters array, the placeholders in message should be index of variable in parameters array.\nExample Code source in bundle\n... \u0026amp;#39;ngx.singleton.files\u0026amp;#39; : \u0026amp;#39;{0, plural, =0 {No files.} one{There is one file on {1}.} other{There are # files on {1}.} }\u0026amp;#39; import { L10nService } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; @Component({ selector: \u0026amp;#39;test\u0026amp;#39;, templateUrl: \u0026amp;#39;./test.component.html\u0026amp;#39; }) export class TestComponent { constructor(private l10nService: L10nService) {} ... // static refresh mode this.thanslatedFiles = this.l10nService.getMessage(\u0026amp;#39;ngx.singleton.files\u0026amp;#39;, [ this.files.length, …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"5ef4101224744df81ccdd55d4b0fd36c","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/plural-format/","publishdate":"2019-09-24T20:08:31+08:00","title":"Plural Format"},{"content":"Overview Formats simple relative dates. Try to give the best relative time span representation based on start time and end time.\nAPI public formatRelativeTime( from: Date, to: Date, locale?: string, options?: Object ): string Parameters Parameter Type Required Description from Date Required Relative time start time. to Date Required Relative time end time. locale String Optional The locale is only required in async mode for non-blocking loading. Please refer to the stream API usage. options Object Optional The numeric default value is \u0026amp;lsquo;always\u0026amp;rsquo;. If numeric: \u0026amp;lsquo;auto\u0026amp;rsquo; option is passed, it will produce the string yesterday or tomorrow instead of 1 day ago or in 1 day, this allows to not always have to use numeric values in the output. Time Range and Unit Range Unit Output 0s ~ 44 seconds second x second(s) 45 ~ 89 seconds minute 1 minute 90 seconds ~ 44 minutes minute 2 ~ 44 minutes 45 ~ 89 minutes hour an hour 90 minutes ~ 21 hours hour 2 ~ 21 hours 22 ~ 35 hours day a day 36 hours ~ 25 days day 2 ~ 25 day 26 ~ 45 days month a month 45 ~ 319 days month 2 ~ 10 months 320 ~ 547 days(1.5 years) year a year 548 days+ year 2+ years Example Code import { I18nService } from \u0026amp;#39; @singleton-i18n/angular-client\u0026amp;#39;; import { Component, OnInit, OnDestroy } from \u0026amp;#39;@angular/core\u0026amp;#39;; @Component({ selector: \u0026amp;#39;test\u0026amp;#39;, templateUrl: \u0026amp;#39;./test.component.html\u0026amp;#39; }) export class TestComponent implements OnInit, OnDestroy { subscription: any; time:string; constructor(private i18nService: I18nService) {} ngOnInit() { this.subscription = this.i18nService.stream.subscribe((locale: string) =\u0026amp;gt; { // Assuming locale is en-US : const from = new Date(2019, 8, 1), to = new Date(2019, 9, 1); this.time = this.i18nService.formatRelativeTime( from, to, locale); // Output: in 1 month this.time = this.i18nService.formatRelativeTime( to, from, locale); // Output: 1 month ago this.time = this.i18nService.formatRelativeTime( from, to, locale, { numeric: …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"0eb43da64540cbf52ec0d0dc6748e907","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/relative-time-format/","publishdate":"2019-09-24T20:08:31+08:00","title":"Relative Time Format"},{"content":"Overview Creating shared modules allows you to organize and streamline your code. You can put commonly used directives, pipes, and components into one module and then import just that module wherever you need it in other parts of your application. Therefore from the perspective of internationalization, singleton Angular client also provides corresponding support for the shared modules.\nResource Isolation By default, the resources of each Singleton component are isolated and registered in different namespaces to avoid duplicate keys causing content to be unexpectedly overwritten.\nExample Code Configuration // i18n.config.ts import { ENGLISH } from \u0026amp;#39;./header.l10n\u0026amp;#39;; import { PatternCategories } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; const I18nConfig = { productID: \u0026amp;#39;vipuiheader\u0026amp;#39;, component: \u0026amp;#39;default\u0026amp;#39;, version: \u0026amp;#39;1.0.0\u0026amp;#39;, i18nScope: [ PatternCategories.DATE, PatternCategories.NUMBER, PatternCategories.CURRENCIES ], host: \u0026amp;#39;https://singleton.service.com:8090/\u0026amp;#39;, // By default, the resources of each component are isolated. // Please set isolated as false in a shared module. isolated: false, sourceBundles: [ENGLISH] }; Configuration Registration Note: Never call a forRoot static method in a shared module. You might end up with different instances of the service in your injector tree.\n// shared-module.module.ts import { VIPModule, VIPService } from \u0026amp;#39; @singleton-i18n/angular-client\u0026amp;#39;; import { libConfig } from \u0026amp;#39;./i18n.util\u0026amp;#39;; @NgModule({ imports: [ ... VIPModule ] }) export class SharedFeatureModule { constructor(private vipService: VIPService) { // register feature module configuration vipService.registerComponent(libConfig); } } Usages Since the resource loading method in a shared module is uncertain, it may be synchronous or asynchronous depending on the calling scenario, when calling synchronous \u0026amp;lsquo;getMessage\u0026amp;rsquo; or data formatting-related methods, be sure to use these synchronous methods safely by …","date":1655374742,"description":"","lastmod":"2022-06-16T13:19:02+03:00","objectID":"d2ed48b64251ca060838d31a4676afa5","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/shared-feature-module/","publishdate":"2022-06-16T13:19:02+03:00","title":"Shared Feature Module"},{"content":"Standalone mode is designed for the application without singleton service at runtime to support internationalization, the translations and formatting patterns need to be downloaded from singleton service into local asset folder at buildtime. In this way, when the application starts, the Singleton Angular client will get translations and patterns from application web server through HTTP request.\nSpecification Register product No matter the singleton service will be running in product environment or not. For the software globalization process, the first step is always to register the product, component, version and supported locales through singleton service.\nNormalize the language code The language normalization is required when the language comes from user browser lanugage, however, each browser relies on different standard of langugae code, so the normalization is used to map the different format of language code to the singleton standard.\nMost of On-Premise applications have the language seletor to narrow down the language options, in that case the language normalization is only for default selection from user browser language, but just to make sure the language code from the language selector is consistent with the value which defined in the downloading script.\nimport { getBrowserCultureLang, LocaleService } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; ... get selectedLanguage(): string { return localStorage.getItem( USER_SELECTED_LANGUAGE ) || getBrowserCultureLang() || \u0026amp;#39;en\u0026amp;#39;; } // Singleton provides API to transform the language code from the browser into Singleton standard language code. // eg: zh-CN -\u0026amp;gt; zh-Hans getNormalizedLanguageCode(language: string): string{ return this.localeService.normalizeLanguageCode(language); } ... Define script to download locale data Use npm command line script to download locale data (translation and formatting pattern) into asset folder at buildtime.\nload-locale-data Parameter Type Value Description \u0026amp;ndash;directory …","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"77ba3805f91eaa00487d1d9d81033943","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/standalone-mode/","publishdate":"2019-09-24T20:08:31+08:00","title":"Standalone Mode"},{"content":"Overview Use the translate directive in your HTML templates to retrieve translations from the singleton service.\n@Directive({ selector: \u0026amp;#39;[l10n]\u0026amp;#39; }) class L10nDirective implements AfterViewInit { l10n: string; source: string; params: string[]; constructor(el: ElementRef, ...) ngAfterViewInit() } Selector [l10n]\nInputs Attribute Type Required Description key String Required Bound to L10nDirective.l10n.Define the key to identify the translation, it should name like this: component_module_page_control_shortmsg. e.g. web_settings_stats_statsTable_host; source String No Bound to L10nDirective.source.English string as default value, API will return it when there\u0026amp;rsquo;s no translation found either from cache or remote singleton server.If source is null, will looking for source string from sourceBundle. params Array[] No Bound to L10nDirective.params.Parameter array, it\u0026amp;rsquo;s used to format the translation/source when they contain placeholders. Example Code // Translate directive with source from sourceBundle, so there is no source in template \u0026amp;lt;span l10n=\u0026amp;#39;singleton.description\u0026amp;#39; [params]=\u0026amp;#34;[\u0026amp;#39;Singleton for Angular client\u0026amp;#39;]\u0026amp;#34; \u0026amp;gt;\u0026amp;lt;/span\u0026amp;gt; // Deprecated: Simple translate directive use \u0026amp;lt;span l10n=\u0026amp;#39;some.unique.key\u0026amp;#39; source=\u0026amp;#39;English for some.unique.key\u0026amp;#39;\u0026amp;gt;\u0026amp;lt;/span\u0026amp;gt; // Deprecated: Translate directive with substitution \u0026amp;lt;span l10n=\u0026amp;#39;some.unique.key\u0026amp;#39; source=\u0026amp;#39;English for some.unique.key with substitution {0}\u0026amp;#39; [params]=\u0026amp;#34;[\u0026amp;#39;someTemplateVariable\u0026amp;#39;]\u0026amp;#34;\u0026amp;gt;\u0026amp;lt;/span\u0026amp;gt; ","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"219501224d3833b74450c0efaab09ae8","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/translate-directive/","publishdate":"2019-09-24T20:08:31+08:00","title":"Translate Directive"},{"content":"Overview Use the translate pipe in your HTML templates to retrieve translations from the singleton service.\nAPI L10n pipe Get translation by key, will find the source in the sourceBundle according to the key.\n{{ key | vtranslate:[ : variables ] }} Input Parameter Type Required Description key string required Define the key to identify the translation, it should name like this: component_module_page_control_shortmsg. e.g. web_settings_stats_statsTable_host; variables Array[] optional Parameter array, it\u0026amp;rsquo;s used to format the translation/source when they contain placeholders. Example Code export const ENGLISH = { \u0026amp;#39;some.unique.key\u0026amp;#39; : \u0026amp;#39;English for some.unique.key\u0026amp;#39;, \u0026amp;#39;singleton.description\u0026amp;#39; : \u0026amp;#39;{0} is common lib developed by VMware G11n team.\u0026amp;#39;, \u0026amp;#39;innerHTML.usage\u0026amp;#39; : \u0026amp;#39;For more details, please refer to [Singleton Angular Client](https://github.com/vmware/singleton/tree/g11n-angular-client).\u0026amp;#39; // innerHTML usage: use the innerHTML attribute with the pipe on any element. Not only for plain text node, also for raw HTML tags in source strings as inline tags. // Note: Convert \u0026amp;#34; to \u0026amp;amp;quot; for the value of attribute. } // L10n pipe {{\u0026amp;#39;some.unique.key\u0026amp;#39; | vtranslate }} {{\u0026amp;#39;singleton.description\u0026amp;#39; | vtranslate: \u0026amp;#39;Singleton for Angular client\u0026amp;#39;}} // L10n pipe innerHTML sample \u0026amp;lt;label [innerHTML]=\u0026amp;#34;\u0026amp;#39;innerHTML.usage\u0026amp;#39; | vtranslate\u0026amp;#34;\u0026amp;gt;\u0026amp;lt;/label\u0026amp;gt; ","date":1569326911,"description":"","lastmod":"2019-09-24T20:08:31+08:00","objectID":"0a72479ad8cbd671310a45021928bc16","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/translate-pipe/","publishdate":"2019-09-24T20:08:31+08:00","title":"Translate Pipe"},{"content":"","date":1569337166,"description":"","lastmod":"2019-09-24T22:59:26+08:00","objectID":"199f4d0d3d0022ae8e7485ab1a3639a4","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/","publishdate":"2019-09-24T22:59:26+08:00","title":"Singleton SDK"},{"content":"Introduction C# Client is a class libary running on Windows .NET Framework. It enables applications that can use .NET Framework libraries to handle its globalization easily.\nFeatures in C# Client Getting the translation. Getting messages by cache interfaces. Getting configuration content. Enrich implementations by extending different extension interfaces. APIs Available Factory Class I18N Interface For Configuration IConfig IConfigItem Interface For Release IRelease Interface For Translation ITranslation ISource Interface For Cache Messages IReleaseMessages ILocaleMessages IComponentMessages Interface For Extension IExtension ICacheManager ICacheComponentManager ICacheMessages ILog IResourceParser IAccessService Factory Class I18N It\u0026amp;rsquo;s the factory class that creates and initializes the configuration object and the release object. public sealed class I18N { public static IConfig LoadConfig(string resourceBaseName, Assembly assembly, string configResourceName); public static IConfig GetConfig(string product, string version); public static IRelease GetRelease(IConfig config); public static IExtension GetExtension(); } I18N / LoadConfig Load a configuration json or yaml text from the resource defined by a resx file and initialize a correspondent release object. Parameter Type Description resourceBaseName string Resource base name assembly Assembly It owns the resource configResourceName string Configuration resource name after base name Return Description IConfig Configuration Object I18N / GetConfig Get a loaded configuration object by product and version. Parameter Type Description product string Product name version string L10n version Return Description IConfig Configuration Object I18N / GetRelease Get the release object initialized by a configuration object. Parameter Type Description config IConfig Configuration object Return Description IRelease The release object I18N / GetExtension Get the extension interface to change ways of implementation. Return …","date":1584274071,"description":"","lastmod":"2020-03-15T20:07:51+08:00","objectID":"18afc801a4c85501c53a53ef8b8e5feb","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/csharp-client-introduction/","publishdate":"2020-03-15T20:07:51+08:00","title":"C# Client Introduction"},{"content":"The Singleton Go Client is a Singleton SDK to fetch translations from Singleton service or bundles easily.\nFeatures in Go Client SDK Supported interfaces: GetLocaleList: Get supported locale list GetComponentList: Get supported component list GetStringMessage: Get a message with optional arguments. Fallback to default locale is provided. GetComponentMessages: Get messages of a component. Fallback to default locale is NOT provided. Provide cache management as well as cache registration. Support fallback to local bundles when failing to get from server Support fallback to default locale when failing to get a string message of a nondefault locale. APIs Available Global LoadConfig Load configuration from a file.\nParameters Parameter Type Description path string The path to a config file Return values Type Description *Config The config instance created error nil if successful Example\ncfg, err := sgtn.LoadConfig(\u0026amp;#34;resource/conf/singletonconfig.json\u0026amp;#34;) Initialize Initialize the client by the config.\nParameters Parameter Type Description cfg *Config The config to initialize client Return values None\nExample\nsgtn.Initialize(cfg) GetTranslation Get translation instance.\nParameters None\nReturn values Type Description Translation The translation instance Example\ntrans := sgtn.GetTranslation() SetHTTPHeaders Set customized http headers.\nParameters Parameter Type Description h map[string]string The headers to set Return values None\nExample\nsgtn.SetHTTPHeaders(map[string]string{ \u0026amp;#34;user\u0026amp;#34;: \u0026amp;#34;username\u0026amp;#34;, \u0026amp;#34;pass\u0026amp;#34;: \u0026amp;#34;password\u0026amp;#34;, }) SetLogger Set logger for client.\nParameters Parameter Type Description l Logger The logger to set Return values None\nExample\nsgtn.SetLogger(\u0026amp;lt;your logger\u0026amp;gt;) RegisterCache Register a separate cache implementation\nParameters Parameter Type Description c Cache The cache to register Return values None\nExample\nsgtn.RegisterCache(\u0026amp;lt;your cache\u0026amp;gt;) Translation interface GetLocaleList Get available locale list\nParameters …","date":1586226659,"description":"","lastmod":"2020-04-07T10:30:59+08:00","objectID":"a9fe5d2414c1b79fd7cfcf492f45dcdf","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/go-client-introduction/","publishdate":"2020-04-07T10:30:59+08:00","title":"Go Client Introduction"},{"content":"Singleton Java Client Library To facilitate consumption of the Singleton Service API, internationalization(i18n) client libraries have been developed in several programming languages. These libraries encapsulate API calls to the Singleton service, significantly improving development efficiency and reducing the cost of development work. This section gives a high-level overview of the Singleton Java Client Library.\nFeatures Translation - retrieving localized/translated text Formatting - retrieving formatted data using CLDR-compliant, localized patterns (e.g. date, time, number, currency) Pluralization - retrieving singular/plural variations of data Pseudo-translation - generating a fake(pseudo) translation from source text. This is often used for testing purposes. Client-side Localization(L10n) Cache - allows the client application to quickly serve L10n data without frequently communicating with the Singleton service. Globalization(G11n) Modes A Java client application can be configured in one of the following modes.\nOnline - The Singleton service serves localized resources to the client application over HTTP. Offline - The client application uses localized resources that are stored in locally bundled files. Note: The client application can also be configured with both Online and Offline modes enabled. In this case, then Offline Mode will only be used as fallback in case of a Singleton service call failure.\nInstallation The Singleton Java Client Library must be added as a dependency in your client Java application. Builds can be found in this Maven repository. You may also see a sample application here.\nConfiguration The following properties make up the Singleton configuration of a client application. Store them in a Properties file, and put the file in the application classpath. See the configuration file in the sample application for reference.\nproductName - (Required) The name of the product with resources that are localized in the Singleton service. version: …","date":1569326871,"description":"","lastmod":"2019-09-24T20:07:51+08:00","objectID":"51c6142311a72f636b379d4eefc7a733","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/java-client-introduction/","publishdate":"2019-09-24T20:07:51+08:00","title":"Java Client Introduction"},{"content":"Overview The Singleton JSClient(@singleton-i18n/js-core-sdk) is a Singleton Service-based JavaScript library used for l10n and i18n. It almost supports all JavaScript frameworks, and it can run in browsers, as well as NodeJS environments. With the Singleton JavaScript Client, it makes l10n and i18n implementation more easier in most projects. Now, let\u0026amp;rsquo;s look at what it is and how it works.\nFeatures JSClient Initilization Language and region management Load data API Provide string localization API Provide datetime,number,currency,percentage formatting API Source management via CLI scripts Runtime / Offline Mode JSClient Initilization How to initilize Singleton JSClient in frontend framework? it requires to figure out the root loading point where JSClient is able to comminicate with Singele Service fetching translations and patterns. E.g. index.js in React framework is the root loading point, during the initilizing process, it needs to provice basic product information (E.g. ProductID, Component, Version) and interacts with Singleton Service runtime, it will load corresponding translations and patterns by language and region when switching locale. Singleton JSClient offers API i18nClient.init(Configuration) as below snippet which is used to initilize JSClient when App startup. At the same time, Singleton JSClient also provides l10nService and i18nService APIs so that it is able to use their exposed methods to translate strings and format the data regarding datetime, number, percentage and currency.\nConfiguration Parameter Type Required Description productID string Required Product name. version string Required Translation version. component string Optional From Singleton service perspective, it typically has backend component,frontend component.And default component is \u0026amp;lsquo;default\u0026amp;rsquo;. host string Required Singleton service with which Singleton JSClient commnicaites to fetch translations and patterns by language and region. language string Optional …","date":1569326903,"description":"","lastmod":"2019-09-24T20:08:23+08:00","objectID":"594f0a10df0467535741cbffa5554a71","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/javascript-client-introduction/","publishdate":"2019-09-24T20:08:23+08:00","title":"JavaScript Client Introduction"},{"content":"Introduction Several python files are provided as the python client to support accessing Singleton service, making Singleton users to handle its globalization easily.\nFeatures in Python Client Getting configuration content. Getting the translation. Getting messages of a locale. Prerequisites Python 2.x\nPython 3.x\nIt\u0026amp;rsquo;s better to install PyYAML module of python. Otherwise, the configuration file should be written in json.\nIf formats like Plural, Date, Number are needed, please install PyICU after icu4c is installed on the operating system.\nHow to use python client as a python package Install sgtnclient as a python package.\npip install sgtnclient pip3 install sgtnclient How to get and use the client code git clone -b g11n-python-client https://github.com/vmware/singleton.git Install it as a python package.\npython setup.py install Or use its code directly by putting them to a place where they can be imported to the application code.\nHow to write a configuration file The python client of Singleton needs a configuration file. Here is an example.\nBasic definition Key Type Description product string Product name l10n_version string L10N version, sometimes same with product version online_service_url string Points to singleton service offline_resources_base_url string Points to local directory starting with \u0026amp;lsquo;file://\u0026amp;rsquo; components dict Definition of components Extended definition Key Type Description Default default_locale string Default locale en-US source_locale string Source locale Same with default locale log_path string Log path, \u0026amp;lsquo;./\u0026amp;rsquo; means the path of configuration. None. Not in use cache_type string Cache type. \u0026amp;lsquo;by_key\u0026amp;rsquo; means not using component in api. default cache_path string Cache file path, \u0026amp;lsquo;./\u0026amp;rsquo; means the path of configuration. None. Not in use try_wait integer Interval to try again when failed and max delay of http request 10 cache_expired_time integer Interval to update data 3600 pseudo string Switch of pseudo …","date":1645495690,"description":"","lastmod":"2022-02-22T10:08:10+08:00","objectID":"3d01a645560dd11eceb2f7c8564c35d6","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-sdk/python-client-introduction/","publishdate":"2022-02-22T10:08:10+08:00","title":"Python Client Introduction"},{"content":"","date":1569337174,"description":"","lastmod":"2019-09-24T22:59:34+08:00","objectID":"66e96c099e0b747ebb35692fb97c60d3","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-service/","publishdate":"2019-09-24T22:59:34+08:00","title":"Singleton Service"},{"content":"","date":1569339017,"description":"","lastmod":"2019-09-24T23:30:17+08:00","objectID":"22d0b2ddd593184ee544725932334db8","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/","publishdate":"2019-09-24T23:30:17+08:00","title":"Configurations"},{"content":"Encrypt AWS S3 accesskey and secretkey in Singleton Service Prerequisites Java 8 (Java 9+ are not supported, will get compiler issue)\nSingleton S3 I18n Service Build\nS3 configurations (accessKey, secretkey, region, bucketName)\n1. Encrypt AWS S3 accessKey and secretkey You can use the java language RsaCryptUtils to generate private.key and public.key.\nThe demo code as following:\nimport java.io.IOException; import java.io.UnsupportedEncodingException; import java.security.InvalidKeyException; import java.security.KeyFactory; import java.security.KeyPair; import java.security.KeyPairGenerator; import java.security.NoSuchAlgorithmException; import java.security.PrivateKey; import java.security.PublicKey; import java.security.SecureRandom; import java.security.spec.InvalidKeySpecException; import java.security.spec.PKCS8EncodedKeySpec; import java.security.spec.X509EncodedKeySpec; import java.util.Base64; import javax.crypto.BadPaddingException; import javax.crypto.Cipher; import javax.crypto.IllegalBlockSizeException; import javax.crypto.NoSuchPaddingException; public class RsaCryptUtils { private static final String CHARSET = \u0026amp;#34;utf-8\u0026amp;#34;; private static final Base64.Decoder decoder64 = Base64.getDecoder(); private static final Base64.Encoder encoder64 = Base64.getEncoder(); /** * create SecretKey * @param keySize * @return * @throws NoSuchAlgorithmException */ public static SecretKey generateSecretKey(int keySize) throws NoSuchAlgorithmException { KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\u0026amp;#34;RSA\u0026amp;#34;); keyGen.initialize(keySize, new SecureRandom()); KeyPair pair = keyGen.generateKeyPair(); PrivateKey privateKey = pair.getPrivate(); PublicKey publicKey = pair.getPublic(); return new SecretKey(encoder64.encodeToString(publicKey.getEncoded()), encoder64.encodeToString(privateKey.getEncoded())); } /** * encrypt Data by private key * @param data * @param privateInfoStr * @return * @throws IOException * @throws InvalidCipherTextException */ public static …","date":1614153633,"description":"","lastmod":"2021-02-24T16:00:33+08:00","objectID":"f07ee64218c681e967dc918488607be8","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-s3-key-encrypted/","publishdate":"2021-02-24T16:00:33+08:00","title":"Enable S3 Key Encrypted"},{"content":"Singleton Service now supports to store the translation bundle files on AWS S3.\nThis page will introduce the details about Singleton Service S3 build.\nHow to generate Singleton Service S3 build? The steps to generate S3 build:\nClone Singleton Service code using Git. git clone git@github.com:vmware/singleton.git Update the complie configuration file in singleton/g11n-ws/gradle.properties datatype=bundle to\ndatatype=s3 Update the below s3 config items according to your requirements in singleton/g11n-ws/vip-manager-i18n/src/main/resources/application-s3.properties #S3 store config s3.keysEncryptEnable=true #The decode public key file path s3.publicKey=public.key s3.accessKey=##### s3.secretkey=###### s3.region=###### s3.bucketName=###### For S3 keys, you can define plain text, or encrypted text:\nPlain text: Set s3.keysEncryptEnable=false, only provide s3.accessKey and s3.secretkey; Encrypted text: Set s3.keysEncryptEnable=true, and refer to Enable S3 Key Encrypted for the details. Complie a build using Gradle wrapper under ./gradlew build Jar files will be generated to singleton/publish (Eg. singleton/publish/singleton-0.1.0.jar) The translation bundle structure in AWS S3:\n[bucket name]/l10n/bundles/[product name]/[version]/[component name]/messages_xx.json ","date":1572605613,"description":"","lastmod":"2019-11-01T18:53:33+08:00","objectID":"9c532f19e9441401ad815c0207fbb84f","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-s3-storage/","publishdate":"2019-11-01T18:53:33+08:00","title":"Enable S3 Storage"},{"content":"One of Singleton\u0026amp;rsquo;s features is to provide translation for products, but before you can get real translation from Singleton, your translation bundles should be already existing in Singleton Service.\nThis page will show you the details of adding your product(s) definition and corresponding translation bundles to Singleton Service.\nHow to add new product(s) and corresponding translation bundles to Singleton Service? Singleton provides 2 ways to do this:\nUsing Singleton API Go to Singleton Service swagger-ui: https://localhost:8090/i18n/api/doc/swagger-ui.html\ror http://localhost:8091/i18n/api/doc/swagger-ui.html Switch to v2 in Select a spec in the upper right corner;\nFind and expand translation-sync-api, you will get an API as below:\nPUT /i18n/api/v2/translation/products/{productName}/versions/{version} Update translation\nThen click Try it out;\nInput your productName/version/component/locale and the translation messages;\nVerify everything is fine, click Execute, then the translation messages will be pushed into Singleton Service, please use other GET API(s) to fetch the translation.\nNotes:\nproductName/version should match the value in translationData;\nYou can ignore the input for parameters: operationid/dataOrigin/machineTranslation/pseudo/requester, these parameters are VMware internally;\nFor locale definition, please refer to CLDR availableLocales and defaultContent\nCopy translation bundles to the location that Singleton Service reads Check the translation location in singleton-0.1.0.jar\\BOOT-INF\\classes\\application-bundle.properties #translation config\r#the follow item the Directory can\u0026amp;#39;t end of file separator\rtranslation.bundle.file.basepath =.\rtranslation.synch.git.flag = true By default, it\u0026amp;rsquo;s in the same location with the Singleton Service jar file, to find translation.bundle.file.basepath.\nCreate your translation bundle file(s) following the structure as below, and name your file(s) like \u0026amp;ldquo;messages_xx.json\u0026amp;rdquo; (for example: …","date":1589426707,"description":"","lastmod":"2020-05-14T11:25:07+08:00","objectID":"bd66ed4c6a4f401cfdd415386aad8a2d","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-new-product/","publishdate":"2020-05-14T11:25:07+08:00","title":"Enable New Product(s)"},{"content":"Singleton Service adds a new feature to support the product white list defination, that means only the product in the white list can work well to get translations and get supported language list. It is no impact for DateTimes / Numbers / Currencies / Plurals / Measurements / DateFields / RegionList .\nBy default, this feature is disabled.\nThis page will introduce the details about this new feature.\nHow to enable product white list in Singleton Service? The steps:\nGenerate a Singleton Service build or get a Singleton service build based on v0.3.0;\nCreate a JSON file named bundle.json, and put it into the folder .\\l10n\\bundles\\. The content is like:\n{ \u0026amp;#34;Testing\u0026amp;#34;: [\u0026amp;#34;1.0.0\u0026amp;#34;, \u0026amp;#34;1.0.5\u0026amp;#34;], \u0026amp;#34;SampleAPP\u0026amp;#34;: [\u0026amp;#34;1.0.0\u0026amp;#34;] } The products in this file will be supported by Singleton Service, it\u0026amp;rsquo;s not related to version, only productName.\nNotes:\nThis configuration file will be loaded into cache when Singleton Service starts. Please restart Singleton Service if any change for this configuration file.\nIf you use Singleton Service S3 build, please also put this configuration file into local folder .\\l10n\\bundles\\ with Singleton Service S3 build together. Don\u0026amp;rsquo;t move it to AWS storage.\n","date":1576044889,"description":"","lastmod":"2019-12-11T14:14:49+08:00","objectID":"1d452837ecf260e7d50917c3b5d2229d","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-product-white-list/","publishdate":"2019-12-11T14:14:49+08:00","title":"Enable Product White List"},{"content":"","date":1569326808,"description":"","lastmod":"2019-09-24T20:06:48+08:00","objectID":"f1aafb0580d975e0e025d3e0ad688eab","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-pseudo-translation/","publishdate":"2019-09-24T20:06:48+08:00","title":"Enable Pseudo Translation"},{"content":"","date":1569326795,"description":"","lastmod":"2019-09-24T20:06:35+08:00","objectID":"4258a4397060211bb3dfab7d79c8e1b9","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-source-collection/","publishdate":"2019-09-24T20:06:35+08:00","title":"Enable Source Collection"},{"content":"1. Prerequisites Java 8 (Java 9+ are not supported, will get compiler issue) Git Docker 2. Create Singleton Database docker image 2.1 Required Linux 64-bit Operation System and install docker successfully 2.2 Prepare the init db scripts 2.2.1 prepare the create users and databases sql scripts vipinitdb.sql CREATE USER pgvipconfig WITH PASSWORD \u0026amp;#39;vipconfig\u0026amp;#39;; CREATE USER pgvipdata WITH PASSWORD \u0026amp;#39;vipdata\u0026amp;#39;; CREATE DATABASE vipconfig OWNER pgvipconfig; CREATE DATABASE vipdata0 OWNER pgvipdata; CREATE DATABASE vipdata1 OWNER pgvipdata; 2.2.2 prepare the create config tab sql scripts vipinitconfigtab.sql create table vip_product(id bigint not null, product character varying(100) not null, datasource character varying(50) not null, status smallint not null default 0, created_userid bigint, crt_time timestamp); create sequence vip_product_seq increment by 1 minvalue 1 no maxvalue start with 1; alter table vip_product add primary key(id); alter table vip_product alter column id set default nextval(\u0026amp;#39;vip_product_seq\u0026amp;#39;); alter table vip_product add constraint uk_vip_product unique(product); 2.2.3 prepare the create data table sql scripts vipinitdatatab.sql create table vip_msg(id bigint not null, product character varying(100) not null, version character varying(50) not null, component character varying(100) not null, locale character varying(100) not null, messages jsonb, crt_time timestamp) partition by list(product); 2.3 prepare the Dockerfile FROM postgres:10.3 ENV INITDB_PATH /usr/local/initdb ENV AUTO_RUN_DIR /docker-entrypoint-initdb.d RUN mkdir -p $INITDB_PATH COPY ./vipinitdb.sql $INITDB_PATH/ COPY ./vipinitdatatab.sql $INITDB_PATH/ COPY ./vipinitconfigtab.sql $INITDB_PATH/ COPY ./vipinstalldb.sh $AUTO_RUN_DIR/ RUN chmod a+x $AUTO_RUN_DIR/vipinstalldb.sh 2.4 prepare the execute shell vipinstalldb.sh psql -U postgres -d postgres -f $INITDB_PATH/vipinitdb.sql psql -U pgvipconfig -d vipconfig -f $INITDB_PATH/vipinitconfigtab.sql psql -U pgvipdata -d …","date":1593659393,"description":"","lastmod":"2020-07-02T11:09:53+08:00","objectID":"70f408029aebf2e92340ce7324b886a7","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-service/singleton-service-db-build-introducation/","publishdate":"2020-07-02T11:09:53+08:00","title":"DB builder for User guideline"},{"content":"Singleton Service has two API versions available at present: v1 and v2. API v1 was created in the early times of Singleton, while API v2 has been validated with many VMware products over years, which includes the largest number of APIs, and is closer to the Restful style. It is recommended to use API v2 in practice. This version provides two types of APIs:\nFormatting API, which is used to format the data like the date time/number/currency/unit of measure/singular and plural variations, just to name a few. Translation API Next, we\u0026amp;rsquo;ll talk about the usage of the main APIs under the two types.\nFormatting API Date Time Formatting API (formatting-date-api) Convert the specified time stamp to a new format suitable for the language as requested, using the provided pattern.\nGET/i18n/api/v2/formatting/date/localizedDate Parameters:\nlocale: (required) (String), to indicate the language as requested; e.g. en, zh-CN etc.\nlongDate: (required) (String), to indicate the time stamp in long date format; e.g. 1472728030290\npattern: (required) (String), to indicate the pattern to be used; e.g. YEAR = \u0026amp;ldquo;y\u0026amp;rdquo;, QUARTER = \u0026amp;ldquo;QQQQ\u0026amp;rdquo;, ABBR_QUARTER =\u0026amp;ldquo;QQQ\u0026amp;rdquo;, QUARTER_YEAR = \u0026amp;ldquo;QQQQy\u0026amp;rdquo; etc.\nReturn value:\n(JSON Object) The formatted date time value.\nExample:\n{Singleton service}/i18n/api/v2/formatting/date/localizedDate?locale=zh\u0026amp;ndash;CN\u0026amp;amp;longDate=1472728030290\u0026amp;amp;pattern=QQQQ\nReturn value: \u0026amp;ldquo;第三季度\u0026amp;rdquo; (the third quarter or Q3 in Chinese)\nNumber Formatting API (formatting-number-api) Convert the specified number to a new format suitable for the language as requested, with the decimal place provided.\nGET/i18n/api/v2/formatting/number/localizedNumber Parameters:\nlocale: (required) (String), to indicate the language as requested; e.g. zh-CN etc.\nnumber: (required) (String), to indicate the number to be converted; e.g. 123.45\nscale: (optional) (Integer), to indicate the decimal place to use in the formatted number; e.g. 2. The default value is …","date":1569326755,"description":"","lastmod":"2019-09-24T20:05:55+08:00","objectID":"19e6fde36a998d3f3213ceb371478d3f","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-service/singleton-service-apis/","publishdate":"2019-09-24T20:05:55+08:00","title":"Singleton Service APIs"},{"content":"How to use custom log configuration file in Singleton service 1.The custom log configuration sample If you want to use custom log configuration file, you can change the configuration sample as following:\n\u0026amp;lt;?xml version=\u0026amp;#34;1.0\u0026amp;#34; encoding=\u0026amp;#34;UTF-8\u0026amp;#34;?\u0026amp;gt; \u0026amp;lt;Configuration status=\u0026amp;#34;OFF\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;!-- Logging Properties --\u0026amp;gt; \u0026amp;lt;Properties\u0026amp;gt; \u0026amp;lt;property name=\u0026amp;#34;application_name\u0026amp;#34;\u0026amp;gt;Singleton\u0026amp;lt;/property\u0026amp;gt; \u0026amp;lt;property name=\u0026amp;#34;module_name\u0026amp;#34;\u0026amp;gt;i18nManager\u0026amp;lt;/property\u0026amp;gt; \u0026amp;lt;property name=\u0026amp;#34;log_path\u0026amp;#34;\u0026amp;gt;${sys:app.log.home:-./logs}/i18n\u0026amp;lt;/property\u0026amp;gt; \u0026amp;lt;/Properties\u0026amp;gt; \u0026amp;lt;Appenders\u0026amp;gt; \u0026amp;lt;!-- Console Appender configuration--\u0026amp;gt; \u0026amp;lt;Console name=\u0026amp;#34;Console\u0026amp;#34; target=\u0026amp;#34;SYSTEM_OUT\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;ThresholdFilter level=\u0026amp;#34;trace\u0026amp;#34; onMatch=\u0026amp;#34;ACCEPT\u0026amp;#34; onMismatch=\u0026amp;#34;DENY\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;PatternLayout pattern=\u0026amp;#34;%d{yyyy-MM-dd HH:mm:ss,SSS} [${application_name}] [${module_name}] [%level] [%t] %l - %msg%n\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/Console\u0026amp;gt; \u0026amp;lt;!-- Info level log File Appenders configuration --\u0026amp;gt; \u0026amp;lt;RollingFile name=\u0026amp;#34;InfoFile\u0026amp;#34; fileName=\u0026amp;#34;${log_path}/${application_name}-info.log\u0026amp;#34; filePattern=\u0026amp;#34;${log_path}/${application_name}-info-%d{yyyy-MM-dd}.%i.log\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;ThresholdFilter level=\u0026amp;#34;info\u0026amp;#34; onMatch=\u0026amp;#34;ACCEPT\u0026amp;#34; onMismatch=\u0026amp;#34;DENY\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;PatternLayout pattern=\u0026amp;#34;%d{yyyy-MM-dd HH:mm:ss,SSS} [${application_name}] [${module_name}] [%level] [%t] %l - %msg%n\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;Policies\u0026amp;gt; \u0026amp;lt;TimeBasedTriggeringPolicy/\u0026amp;gt; \u0026amp;lt;SizeBasedTriggeringPolicy size=\u0026amp;#34;64 MB\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/Policies\u0026amp;gt; \u0026amp;lt;DefaultRolloverStrategy fileIndex=\u0026amp;#34;nomax\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;Delete basePath=\u0026amp;#34;${log_path}\u0026amp;#34; maxDepth=\u0026amp;#34;1\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;IfFileName glob=\u0026amp;#34;${application_name}-info-*.log\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;!-- Delete All older files except the last created 10 log files --\u0026amp;gt; \u0026amp;lt;IfAccumulatedFileCount exceeds=\u0026amp;#34;10\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;!-- \u0026amp;lt;!-- Delete all files older than 7 days --\u0026amp;gt; \u0026amp;lt;IfLastModified …","date":1678156045,"description":"","lastmod":"2023-03-07T10:27:25+08:00","objectID":"857ecf523e5f7583dae0e76add884477","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-service/singleton-service-custom-log/","publishdate":"2023-03-07T10:27:25+08:00","title":"Singleton Service Custom Log"},{"content":"Singleton adds script files to help user to start/check/stop Singleton Service build.\nHow to generate Singleton Script The steps:\nClone Singleton Service code using Git git clone git@github.com:vmware/singleton.git Complie a build using Gradle wrapper under ./g11n-ws folder ./gradlew build -x test Go to ./Singleton/Publish folder, find singletonScripts-0.1.0.zip, and extract it, you will get 4 files as below: singletonall.sh\rsingletonstart.sh\rsingletoncheck.sh\rsingletonstop.sh How to use Singleton Script singletonall.sh This script is used to start, stop, and status detect Singleton Service, also restart it when something wrong in Singleton Service running .\nPrepare: Make sure that Singleton Service build (name like singleton-xxx.jar) and singletonall.sh to same directory.\nUsage:\n./singletonall.sh [options]\rwhere options include:\rstart\tstart Singleton Service\rstatus\tcheck Singleton Service current status\rcheck\tcheck whether Singleton Sevice is running, will restart it if NO running\rstop\tstop Singleton Service singletonstart.sh This script is used to start Singleton Service build name like singleton-xxx.jar by default, also can start specific xxx.jar app by given parameter.\nPrepare: Make sure that Singleton Service build (name like singleton-xxx.jar) or any xxx.jar file you want to start, and singletonstart.sh to same directory.\nUsages:\n./singletonstart.sh\ror ./singletonstart.sh jarfile singletoncheck.sh This script is used to check running status of singleton-xxx.jar by default, also can check the running status of any xxx.jar by given parameter. And it will restart the app when something wrong in running.\nPrepare: Make sure that Singleton Service build (name like singleton-xxx.jar) or any xxx.jar file you want to check, and singletoncheck.sh to same directory.\nUsage:\n./singletoncheck.sh or\r./singletoncheck.sh jarfile singletonstop.sh This script is used to stop Singleton Service build name like singleton-xxx.jar by default, also can stop specific xxx.jar app by …","date":1583131951,"description":"","lastmod":"2020-03-02T14:52:31+08:00","objectID":"63a037482104e4066134582346f414a9","permalink":"https://vmware.github.io/singleton/docs/overview/singleton-service/singleton-service-script/","publishdate":"2020-03-02T14:52:31+08:00","title":"Singleton Service Script"},{"content":"","date":1569337087,"description":"","lastmod":"2019-09-24T22:58:07+08:00","objectID":"68ec2370d0409cc27325be36693f9368","permalink":"https://vmware.github.io/singleton/docs/tutorials/","publishdate":"2019-09-24T22:58:07+08:00","title":"Tutorials"},{"content":"Coming soon\n","date":1569327076,"description":"","lastmod":"2019-09-24T20:11:16+08:00","objectID":"847142befa2374ee48d0474513b0f3aa","permalink":"https://vmware.github.io/singleton/docs/tutorials/deploy-singleton-service-in-your-app/","publishdate":"2019-09-24T20:11:16+08:00","title":"Deploy Singleton Service in Your App"},{"content":"This guideline demonstrates how to integrate Singleton AngularClient with your Angular Framework on your application. Singleton AngularClient is a common lib providing I18n support for Angular framework on your application. The client will communicate with Singleton service to dynamically fetch translation and I18n pattern data for providing globalization support in messages and formatting. For I18n formatting, Singleton AngularClient also provides I18n support for datetime format, number format, currency and plural. Singleton AngularClient formatting is based on CLDR data repository and keeps the same scope in supported locale set. Install npm install @singleton-i18n/angular-client --save Initialization //Configure app.module.ts for loading data import { APP_INITIALIZER } from \u0026amp;#39;@angular/core\u0026amp;#39;; //These function are injected at application startup and executed during app initialization, singleton rely on it to initilize singleton for loading data import { HttpClientModule } from \u0026amp;#39;@angular/common/http\u0026amp;#39;; // Angular-Client based on this to communicate with Singleton Service import { VIPModule, VIPService, LocaleService, PatternCategories, getBrowserCultureLang, } from \u0026amp;#39;@singleton-i18n/angular-client\u0026amp;#39;; import { ENGLISH } from \u0026amp;#39;app.l10n\u0026amp;#39;; //ENGLISH is source strings extracted from Angular Code export function initSingletonConfig(service: VIPService, localeService: LocaleService) { const browserLanguage = getBrowserCultureLang(); //get browser\u0026amp;#39;s language localeService.init(browserLanguage); return () =\u0026amp;gt; service.initData({ productID: \u0026amp;#39;ProductName\u0026amp;#39;, component: \u0026amp;#39;default\u0026amp;#39;, version: \u0026amp;#39;1.0.0\u0026amp;#39;, host: \u0026amp;#39;https://singleton-service\u0026amp;#39;, i18nScope: [ PatternCategories.DATE, PatternCategories.NUMBER, PatternCategories.PLURAL, PatternCategories.CURRENCIES ], isPseudo: false, collectSource: false, sourceBundle: ENGLISH, }); } @NgModule({ ... imports: [ ... HttpClientModule, VIPModule.forRoot(), ... ], providers: [ { …","date":1569327010,"description":"","lastmod":"2019-09-24T20:10:10+08:00","objectID":"7fa0c895fd8fc1937510b56d1e7fcacf","permalink":"https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-angular-app/","publishdate":"2019-09-24T20:10:10+08:00","title":"Integrate Singleton in Angular App"},{"content":"Coming soon\n","date":1569327023,"description":"","lastmod":"2019-09-24T20:10:23+08:00","objectID":"c9777dcd5a5367a340e2e8ddb3d1f6ad","permalink":"https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-csharp-app/","publishdate":"2019-09-24T20:10:23+08:00","title":"Integrate Singleton in C# App"},{"content":"This guideline demonstrates how to integrate Singleton client(Java) in your application.\nSingleton Client(Java) is a common lib providing I18n support for Java application. The client will communicate with Singleton service to fetch translation and I18n pattern data for providing globalization support in messages and formatting.\nFor I18n formatting, Singleton Client(Java) also provides I18n support for datetime format, number format, currency and plural. Singleton Client(Java) formatting is based on CLDR data repository and keeps the same scope in supported locale set.\nRequirement Java 8+ - Dependency libraries:\njson-simple-1.1.1.jar slf4j-api-1.7.26 Build All of the builds could be found at this path: https://repo1.maven.org/maven2/com/vmware/singleton/singleton-client-java\nSample Codes of API Usage This is the example of how to use the APIs:\n// Import classes import com.vmware.vipclient.i18n.I18nFactory; import com.vmware.vipclient.i18n.VIPCfg; import com.vmware.vipclient.i18n.base.MessageCache; import com.vmware.vipclient.i18n.base.instances.TranslationMessage; // Initialize global setting VIPCfg cfg = VIPCfg.getInstance(); cfg.initialize(\u0026amp;#34;vipconfig\u0026amp;#34;); cfg.initializeVIPService(); cfg.createTranslationCache(MessageCache.class); // Create TranslationMessage Instance TranslationMessage t = (TranslationMessage) I18nFactory.getInstance(cfg).getMessageInstance(TranslationMessage.class); String translation = t.getString(…); // Create Formatting instance cfg.createFormattingCache(FormattingCache.class); DateFormatting dateformatting = (DateFormatting)i18n.getFormattingInstance(DateFormatting.class); dateformatting.formatDate(…); More JAVA APIs details: https://vmware.github.io/singleton/docs/overview/singleton-sdk/java-client-introduction/\nSample App https://github.com/vmware/singleton/tree/g11n-java-client/sample-client-app\n","date":1569326982,"description":"","lastmod":"2019-09-24T20:09:42+08:00","objectID":"c3fb474dddaf4428a9f00f5bbfbee730","permalink":"https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-java-app/","publishdate":"2019-09-24T20:09:42+08:00","title":"Integrate Singleton in Java App"},{"content":"This guideline demonstrates how to integrate Singleton JSClient with your frontend Framework on your application. Singleton JSClient is a common lib providing I18n support theoretically for any frontend framework on your application. The client will communicate with Singleton service to dynamically fetch translation and I18n pattern data for providing globalization support in messages and formatting. For I18n formatting, Singleton JSClient also provides I18n support for datetime format, number format, currency and plural. Singleton JSClient formatting is based on CLDR data repository and keeps the same scope in supported locale set. Install npm install @singleton-i18n/js-core-sdk --save Integration Create Init method Before integration with Singleton JSClient, it needs to create init method using initialization of basic configuration regarding your application, such as productID, version and so on. Example as below. //i18nClient.js import { i18nClient as jsClient, getBrowserCultureLang, invalidParamater,PatternCategories } from \u0026amp;#34;@singleton-i18n/js-core-sdk\u0026amp;#34;; import { ENGLISH } from \u0026amp;#34;./source.l10n\u0026amp;#34;; const initI18nClient = () =\u0026amp;gt; { const currentLanguage = getBrowserCultureLang(); jsClient.init({ productID: \u0026amp;#34;iReact\u0026amp;#34;, component: \u0026amp;#34;UI\u0026amp;#34;, version: \u0026amp;#34;1.0.0\u0026amp;#34;, isPseudo: true, host: \u0026amp;#34;https://singleton-service:8090\u0026amp;#34;, language: currentLanguage, i18nScope: [PatternCategories.DATE, PatternCategories.NUMBER], sourceBundle: ENGLISH, httpOptions: { timeout: 3000, withCredentials: true, }, }); jsClient.paramError = invalidParamater; return jsClient; }; export const i18nClient = initI18nClient(); Root loading point While integrating with Singleton, it needs to load data regarding translations and formating from Singleton Service,so it has to figure out frontend framework root loading point where jsClient can fetch data ahead of pages rendering。 Generally speaking each frontend framework has a root loading file, for example, it is the …","date":1569326993,"description":"","lastmod":"2019-09-24T20:09:53+08:00","objectID":"bebe276fdfcc33c5fd4452e86c392cbc","permalink":"https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-javascript-app/","publishdate":"2019-09-24T20:09:53+08:00","title":"Integrate Singleton in Javascript App"},{"content":"Coming soon\n","date":1569327017,"description":"","lastmod":"2019-09-24T20:10:17+08:00","objectID":"cfd13d8dd63424d8a977989866e536d2","permalink":"https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-python-app/","publishdate":"2019-09-24T20:10:17+08:00","title":"Integrate Singleton in Python App"}]