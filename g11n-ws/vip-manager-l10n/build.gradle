//Copyright 2019-2020 VMware, Inc.
//SPDX-License-Identifier: EPL-2.0

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

description = 'l10n manager'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
    }
}

apply plugin: "org.sonarqube"
apply plugin: "jacoco"

configurations {
    bootJar
    providedRuntime
    // remove default logger
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

dependencies {
    compile project(":vip-common")
    compile project(":md-restful-api")
    if (project.hasProperty('datatype') && project.getProperty('datatype') == 'bundle' && project.getProperty('syncdata') == 'true') {
        compile project(":md-restful-l10n-synch")
    }
    compile("org.apache.commons:commons-lang3:$commonsLangVersion")
    compile("commons-io:commons-io:$commonsIoVersion")
    compile('org.springframework.boot:spring-boot-starter-log4j2') {
        exclude group: "org.apache.logging.log4j"
    }
    compile("org.apache.logging.log4j:log4j-api:$log4j2Version")
    compile("org.apache.logging.log4j:log4j-core:$log4j2Version")
    compile("org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version")

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile('org.apache.tomcat.embed:tomcat-embed-core:9.0.39')
    compile('org.apache.tomcat:tomcat-annotations-api:9.0.39')
    compile('org.xerial:sqlite-jdbc:3.31.1')
    compile('com.fasterxml.jackson.core:jackson-databind:2.10.0.pr1')
    compile('com.fasterxml.jackson.core:jackson-core:2.10.0.pr1')
    compile("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final")
    compile('org.yaml:snakeyaml:1.26')
    compile("io.springfox:springfox-swagger-ui:2.9.2")
    compile("io.springfox:springfox-swagger2:2.9.2")
    compile("com.google.guava:guava:$guavaVersion")
    compile("io.jsonwebtoken:jjwt:0.9.0")
    
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.550'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.15'
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

bootJar {
    baseName = 'vip-manager-l10n'
    version = "$branchName"
    classifier = "$buildNumber"
}

task copyCommonJars(type: Copy, dependsOn: bootJar) {
    from "$buildDir/libs"
    into "$rootDir/../publish/"
    println "The build was output to -> $rootDir/../publish/"
    include "**/*.jar", "**/*.war"
}

bootJar.doFirst {
    def propPath = "${buildDir}/resources/main/application.properties"
    println propPath
    if (project.hasProperty('datatype') && project.getProperty('datatype') == 's3') {
        def updatedS3Content = new File(propPath).getText('UTF-8').replaceFirst("spring.profiles.active=bundle", "spring.profiles.active=s3")
        new File(propPath).write(updatedS3Content, 'UTF-8')
    }
}


task profile {
    if (project.hasProperty('profileType')) {
        def profileType = project.getProperty('profileType')
        ant.propertyfile(file: file("$rootDir/vip-manager-l10n/src/main/resources/application.properties")) {
            entry(key: "spring.profiles.active", value: profileType)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

assemble.dependsOn.add copyCommonJars

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'

}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}
