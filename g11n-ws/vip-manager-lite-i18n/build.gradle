//Copyright 2019-2023 VMware, Inc.
//SPDX-License-Identifier: EPL-2.0
apply plugin: 'java-library'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
description = 'singleton lite manager'

archivesBaseName = 'singleton-lite'

configurations {
	bootJar
    providedRuntime
   // remove default logger
   all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}
 // default encoding is utf-8
[compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

sourceSets {
test {
    java.srcDirs = ['src/test/java']
    java.outputDir = file('build/classes/test')
    output.resourcesDir = file('build/classes/test')
    resources.srcDirs = ['src/test/resources']
  }
}




dependencies {
   if (project.hasProperty('datatype') && project.getProperty('datatype') == 'pgdb') {
       implementation project(":md-data-api-pgimpl")
    }else if (project.hasProperty('datatype') && project.getProperty('datatype') == 's3') {
       implementation project(":md-data-api-s3impl")
    }else {
       implementation project(":md-data-api-bundleimpl")
    }
    implementation project(":vip-common")
    implementation project(":md-restful-api-i18n")

    implementation("org.apache.commons:commons-lang3:$commonsLangVersion")
    implementation("commons-io:commons-io:$commonsIoVersion")
    implementation("commons-codec:commons-codec:$commonsCodecVersion")
    implementation("com.googlecode.json-simple:json-simple:$jsonSimpleVersion"){
          exclude group: 'junit'
    }

    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    implementation("org.springframework.boot:spring-boot-starter-web")


    implementation("org.ehcache:ehcache:$ehCacheVersion")
    implementation("javax.cache:cache-api:$cacheApiVersion")
    implementation("com.google.guava:guava:$guavaVersion")
    implementation("com.ibm.icu:icu4j:$icu4jVersion")
    implementation("org.yaml:snakeyaml:$snakeyam")
    implementation("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:$hibernateJpa21Api")
    //implementation("org.apache.httpcomponents:httpclient:$httpclient")



    /**
    implementation("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
    implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    implementation("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
 **/

    //api group: 'org.webjars.bower', name: 'cldr-data', version: '28.0.1'

   // api ("org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion")
    //api ("org.apache.tomcat:tomcat-annotations-api:$tomcatVersion")
   //api('org.springframework.boot:spring-boot-autoconfigure')
     // api ('org.springframework.boot:spring-boot-starter-log4j2'){
     //         exclude group: "org.apache.logging.log4j"
    //}
    /**
    implementation("org.springframework:spring-webmvc:$springWebVersion")

    implementation("org.apache.logging.log4j:log4j-api:$log4j2Version")
    implementation("org.apache.logging.log4j:log4j-core:$log4j2Version")
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version")
    implementation("org.slf4j:slf4j-api:$slf4jVersion")
    implementation("org.slf4j:jul-to-slf4j:$slf4jVersion")
     **/

    implementation ('org.springframework.boot:spring-boot-starter-actuator')

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("junit:junit:$junitVersion")
    //testImplementation("org.asciidoctor:asciidoctorj:2.5.10")
    //testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")


}

processResources {
    excludes =[]
     if (project.hasProperty('datatype') && project.getProperty('datatype') == 'pgdb') {
        println "begin to exclude pgdb builder configuration file"
        excludes=['**/application-s3.properties', '**/application-bundle.properties']
    }else if(project.hasProperty('datatype') && project.getProperty('datatype') == 'bundle'){
        println "begin to exclude bundle builder configuration file"
        excludes=['**/application-s3.properties', '**/application-pgdb.properties']
    }else if(project.hasProperty('datatype') && project.getProperty('datatype') == 's3'){
       println "begin to exclude S3 builder configuration file"
       excludes=['**/application-bundle.properties', '**/application-pgdb.properties']
      
    }
}

task copyLibs(type :Copy, dependsOn: bootJar) {
    from "$buildDir/libs"
    into "$rootDir/../publish/"
    println "The build was output to -> $rootDir/../publish/"
    include "**/*.jar"
}

bootJar.doFirst {
      def propPath = "${buildDir}/resources/main/application.properties"
       println propPath
     if (project.hasProperty('datatype') && project.getProperty('datatype') == 'pgdb') {
       def updatedPgdbContent = new File(propPath).getText('UTF-8').replaceFirst("spring.profiles.active=bundle", "spring.profiles.active=pgdb")
       new File(propPath).write(updatedPgdbContent, 'UTF-8')
	  }else if (project.hasProperty('datatype') && project.getProperty('datatype') == 's3') {
       def updatedS3Content = new File(propPath).getText('UTF-8').replaceFirst("spring.profiles.active=bundle", "spring.profiles.active=s3")
       new File(propPath).write(updatedS3Content, 'UTF-8')
	  }
	
}

bootJar{
  classifier = 'boot'
  enabled = true  
}

jar {
    classifier = ''
	enabled = false
}

assemble.dependsOn.add copyLibs


jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}
 
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
 
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}
 
artifacts {
    archives sourcesJar
    archives javadocJar
}
