//Copyright 2019-2023 VMware, Inc.
//SPDX-License-Identifier: EPL-2.0
apply plugin: 'java-library'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'war'

description = 'singleton server'
archivesBaseName = 'singleton'
configurations {
	bootJar
    war
    providedRuntime
   // remove default logger
   all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

sourceSets {
  test {
    java.srcDirs = ['src/test/java']
    java.outputDir = file('build/classes/test')
    output.resourcesDir = file('build/classes/test')
    resources.srcDirs = ['src/test/resources']
  }
}

ext {
	baseOutputDir = file("src/docs/asciidoc")
}


dependencies {
  if (project.hasProperty('datatype') && project.getProperty('datatype') == 'pgdb') {
        api project(":md-data-api-pgimpl")
    }else{
        api project(":md-data-api-s3impl")
        api project(":md-data-api-bundleimpl")
    }
    api project(":vip-common")
    api project(":md-restful-api-i18n")
    api project(":md-service-authen")
    if (project.hasProperty('datatype') && project.getProperty('datatype') == 'bundle' && project.getProperty('syncdata') == 'true') {
       api project(":md-restful-synch")
    }
    implementation("org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion")
    implementation("org.apache.tomcat:tomcat-annotations-api:$tomcatVersion")
    implementation("org.springframework:spring-webmvc:$springWebVersion")

    implementation('org.springframework.boot:spring-boot-starter-log4j2'){
              exclude group: "org.apache.logging.log4j"
    }
    implementation("org.apache.logging.log4j:log4j-api:$log4j2Version")
    implementation("org.apache.logging.log4j:log4j-core:$log4j2Version")
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version")
    implementation("org.slf4j:slf4j-api:$slf4jVersion")
    implementation("org.slf4j:jul-to-slf4j:$slf4jVersion")
    implementation("org.apache.commons:commons-lang3:$commonsLangVersion")
    implementation("commons-io:commons-io:$commonsIoVersion")
    implementation("commons-codec:commons-codec:$commonsCodecVersion")
    implementation("org.yaml:snakeyaml:$snakeyam")
    implementation("io.jsonwebtoken:jjwt:$jjwtVersion")
    implementation("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:$hibernateJpa21Api")

    implementation("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
    implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    implementation("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jacksonVersion")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")

    implementation("org.ehcache:ehcache:$ehCacheVersion")
    implementation("javax.cache:cache-api:$cacheApiVersion")
    implementation("org.apache.httpcomponents:httpclient:$httpclient")
    // Actuator - START
	implementation ('org.springframework.boot:spring-boot-starter-actuator')
    // Actuator - END
    
    //swagger UI -START  
    implementation("io.springfox:springfox-boot-starter:$swaggerVersion")
    //swagger UI -END
    
    
    //jdk 11
    runtimeOnly 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    runtimeOnly 'javax.activation:activation:1.1.1'
    runtimeOnly 'com.sun.xml.bind:jaxb-impl:3.0.2'
    runtimeOnly 'com.sun.xml.bind:jaxb-core:3.0.2'
    //end jdk 11
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.asciidoctor:asciidoctorj:2.5.10")
    testImplementation("io.github.swagger2markup:swagger2markup:1.3.3")
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation("junit:junit:$junitVersion")
}


task copyTranslation(type: Copy) {
    dependsOn project(":tool-trans-fetcher").fetchTranslation
}


task zipTranslation(type: Zip,dependsOn: copyTranslation) {
	archiveName='resources.zip'
    from "$buildDir/resources/main/l10n"
	into "l10n"
}

task fetchTranslationForTest(type: JavaExec, dependsOn: classes) {
    println "running fetchTranslationForTest"
    if (project.hasProperty('jenkinsJobName')) {
        args(project.getProperty('jenkinsJobName'))
    }
    if (project.hasProperty('productName')) {
        args(project.getProperty('productName'))
    }
    if (project.hasProperty('productVersion')) {
        args(project.getProperty('productVersion'))
    }
    main = 'com.vmware.vip.i18n.api.v1.common.GitTranslationFetcherMainForTest'
    classpath = sourceSets.test.runtimeClasspath
}

task copyLibs(type :Copy, dependsOn: bootJar) {
    from "$buildDir/libs"
    into "$rootDir/../publish/"
    println "The build was output to -> $rootDir/../publish/"
    include "**/*.jar","**/*.war"
}


task zipSingletonScripts(type: Zip,dependsOn: bootJar) {
	from "$rootDir/scripts/"
	destinationDir file("$rootDir/../publish/")
	baseName 'singletonScripts'
}

processResources {
    excludes =[]
     if (project.hasProperty('datatype') && project.getProperty('datatype') == 'pgdb') {
        println "begin to exclude S3 and bundle builder configuration files"
        excludes=['**/application-s3.properties', '**/application-bundle.properties', '/l10n']
    }else {
        println "begin to exclude pgdb builder configuration file"
        excludes=['**/application-pgdb.properties']
      
    }
}



bootJar.doFirst {
      def propPath = "${buildDir}/resources/main/application.properties"
       println propPath
     if (project.hasProperty('datatype') && project.getProperty('datatype') == 'pgdb') {
       def updatedPgdbContent = new File(propPath).getText('UTF-8').replaceFirst("spring.profiles.active=bundle", "spring.profiles.active=pgdb")
       new File(propPath).write(updatedPgdbContent, 'UTF-8')
	  }
}


bootJar {
    baseName = "singleton"
    if(project.hasProperty('productName')){
      def productName = project.getProperty('productName')
      if(productName == ''){
        productName = 'all'
      }
      baseName = "singleton-$productName"
    }else{
      baseName = "singleton"
    }
    version = "$branchName"
    classifier = "$buildNumber"
    dependsOn zipTranslation
    from "$buildDir/distributions"

    dependsOn test
    from ("${baseOutputDir}/html5") {
        into 'static/i18n/docs'
    }
  
}

bootJar.doLast {
	delete "${baseOutputDir}/generated","${baseOutputDir}/html5"
}

jar {
    classifier = ''
	enabled = false
}

/**
war {
    baseName = "singleton"
    if(project.hasProperty('productName')){
      def productName = project.getProperty('productName')
      if(productName == ''){
        productName = 'all'
      }
      baseName = "singleton-$productName"
    }else{
      baseName = "singleton"
    }
    version = "$branchName"
    classifier = "$buildNumber"
}
**/
assemble.dependsOn.add copyLibs
assemble.dependsOn.add zipSingletonScripts

task testFetchedTranslation(type: JavaExec, dependsOn: classes) {
    def jarPath = "${project(":vip-manager-i18n").buildDir}/libs/"
    args(jarPath)
    args("${project(":vip-manager-i18n").jar.archiveName}")
    if (project.hasProperty('productName')) {
        args(project.getProperty('productName'))
    }
    if (project.hasProperty('productVersion')) {
        args(project.getProperty('productVersion'))
    }
    main = 'com.vmware.vip.i18n.api.v1.common.TranslationFetcherTest'
    classpath = sourceSets.test.runtimeClasspath
}

task profile {
	if(project.hasProperty('profileType')){
		def profileType = project.getProperty('profileType')
		ant.propertyfile(file: file("$rootDir/vip-manager-i18n/src/main/resources/application.properties")){
			entry(key:"spring.profiles.active",value:profileType)
		}
	}
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

//test.dependsOn.add fetchTranslationForTest
test.dependsOn.add testFetchedTranslation

if (project.hasProperty('datatype') && (project.getProperty('datatype') == 'pgdb') || (project.getProperty('datatype') == 's3') ) {
	check.dependsOn.remove(test)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}
 
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
 
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}
 
artifacts {
    archives sourcesJar
    archives javadocJar
}


jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}


    
