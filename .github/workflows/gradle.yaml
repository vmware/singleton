name: g11n-java-client-actions
on: [pull_request, push]
jobs:
  # pre-process:
  #   name: Pre-process
  #   uses: vmware/singleton/.github/workflows/pre-process.yml@devops

  # check-header:
  #   name: Check Header
  #   needs: pre-process
  #   if: needs.pre-process.outputs.were-only-docs-updated != 'yes'
  #   uses: vmware/singleton/.github/workflows/check.yml@devops

  unit-test:
    name: Unit Test
    runs-on: ubuntu-22.04
    # needs: pre-process
    # if: needs.pre-process.outputs.were-only-docs-updated != 'yes'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'
      - name: Unit test
        run: |
          ./gradlew build -x test
          ./gradlew test
          # ./gradlew test jacocoTestReport
      # - name: Upload Codecov report
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: ./build/reports/jacoco.xml

  # security-analysis:
  #   name: Security Analysis
  #   runs-on: ubuntu-latest
  #   needs: pre-process
  #   if: needs.pre-process.outputs.were-only-docs-updated != 'yes'
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - name: Set up JDK 11
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'adopt'
  #         java-version: '11'
  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v2
  #       with:
  #         languages: java
  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v2
  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v2

  # codacy-analysis-cli:
  #   name: Codacy Analysis CLI
  #   runs-on: ubuntu-latest
  #   needs: pre-process
  #   if: needs.pre-process.outputs.were-only-docs-updated != 'yes'
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@main
  #     - name: Run Codacy Analysis CLI
  #       uses: codacy/codacy-analysis-cli-action@master  
  #       with:
  #         output: results.sarif
  #         format: sarif
  #         # Adjust severity of non-security issues
  #         gh-code-scanning-compat: true
  #         # This will handover control about PR rejection to the GitHub side
  #         max-allowed-issues: 2147483647  
  #     # Upload the SARIF file generated in the previous step  
  #     - name: Upload SARIF results file
  #       uses: github/codeql-action/upload-sarif@main
  #       with:
  #         sarif_file: results.sarif  
              
  # smoke-test:
  #   name: Smoke Test
  #   runs-on: ubuntu-latest
  #   needs: pre-process
  #   if: needs.pre-process.outputs.were-only-docs-updated != 'yes'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'adopt'
  #         java-version: '17'
  #     - name: Smoke Test
  #       run: |
  #         git clone --branch=master https://github.com/vmware/singleton.git server
  #         git clone --branch=devops https://github.com/vmware/singleton.git devops
  #         cd $GITHUB_WORKSPACE/server/g11n-ws && ./gradlew build -x test
  #         cp $GITHUB_WORKSPACE/devops/deploy/i18n-service/Dockerfile $GITHUB_WORKSPACE/server/publish/
  #         cd $GITHUB_WORKSPACE/server/publish && mv singleton-[0~9]*.jar i18n-service.jar
  #         docker build -t singleton .
  #         docker run -d -p 8090:8090 --name singleton singleton
  #         docker ps
  #         cd $GITHUB_WORKSPACE && ./gradlew clean build -x test && cp ./build/libs/*.jar $GITHUB_WORKSPACE/devops/autotest/client/java/lib/
  #         cd $GITHUB_WORKSPACE/devops/autotest/client/java && ./gradlew build
  #         docker cp src/main/resources/l10n singleton:/
  #         str=$(printf '=%.0s' {1..50})
  #         echo $str Smoke Test Start $str
  #         cd target && java -cp '.:./*' org.testng.TestNG -d test-output testng.xml
  #         cd $GITHUB_WORKSPACE/devops/autotest/client/java_client_sample_app && ./sample_app_sanity_test.sh $GITHUB_WORKSPACE
  #         echo $str Smoke Test End $str