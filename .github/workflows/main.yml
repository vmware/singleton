name: Singleton-Python-Client

on: [pull_request, push]

jobs:
  pre-process:
    name: Pre-process
    uses: vmware/singleton/.github/workflows/pre-process.yml@devops

  check-header:
    name: Check Header
    needs: pre-process
    if: needs.pre-process.outputs.were-only-docs-updated != 'yes'
    uses: vmware/singleton/.github/workflows/check.yml@devops

  woke:
    needs: pre-process
    name: Inclusive Term Scan
    if: needs.pre-process.outputs.were-only-docs-updated != 'yes'
    uses: vmware/singleton/.github/workflows/woke.yml@devops
    with:
      # Set to true, when you have successfully replaced all the words.
      fail-on-error: false

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: pre-process
    if: needs.pre-process.outputs.were-only-docs-updated != 'yes'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Unit test
        run: |
          python -m pip install --upgrade pip
          pip install coverage pyyaml
          cd sgtn4python/test
          str=$(printf '=%.0s' {1..50})
          echo $str Unit Test Start $str
          coverage run --source=async_util,I18N,sgtn_bykey,sgtn_client,sgtn_debug,stgn_icu,sgtn_locale,sgtn_properties,sgtn_py_base,sgtn_py2_base,sgtn_py3_base,sgtn_py37_base,sgtn_util,util --omit='test_*.py','__init__.py' -m unittest
          coverage report -m
          coverage xml -o coverage.xml
          echo $str Unit Test End $str
      - name: Upload Codecov report for Python-client
        uses: codecov/codecov-action@v2
        with:
          files: sgtn4python/test/coverage.xml
          flags: coverage

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: pre-process
    if: needs.pre-process.outputs.were-only-docs-updated != 'yes'
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          output: results.sarif
          format: sarif
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: results.sarif
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: my-analysis-tool

  codacy-analysis-cli:
    name: Codacy Analysis CLI
    runs-on: ubuntu-latest
    needs: pre-process
    if: needs.pre-process.outputs.were-only-docs-updated != 'yes'
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set-Up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647
      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: results.sarif

  Smoke-Test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: pre-process
    if: needs.pre-process.outputs.were-only-docs-updated != 'yes'
    steps:
    - name: Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9.13'
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '8'
    - name: Smoke Test
      run: |
        sudo apt-get update
        git clone --branch=master --depth=1 https://github.com/vmware/singleton.git server
        git clone --branch=devops --depth=1 https://github.com/vmware/singleton.git devops
        cp -r $GITHUB_WORKSPACE/devops/autotest/client/python/main/lib/l10n/bundles $GITHUB_WORKSPACE/server/g11n-ws/vip-manager-i18n/src/main/resources/l10n/bundles
        mv $GITHUB_WORKSPACE/devops/autotest/client/python/main/lib/application-bundle.properties $GITHUB_WORKSPACE/server/g11n-ws/vip-manager-i18n/src/main/resources/application-bundle.properties
        cd $GITHUB_WORKSPACE/server/g11n-ws && ./gradlew build -x test
        cp $GITHUB_WORKSPACE/devops/deploy/i18n-service/Dockerfile $GITHUB_WORKSPACE/server/publish/
        cd $GITHUB_WORKSPACE/server/publish && mv singleton-[0~9]*.jar i18n-service.jar
        docker build -t singleton .
        docker run -d -p 8090:8090 -p 8091:8091 --name singleton singleton
        docker ps
        sleep 15s
        mkdir -p $GITHUB_WORKSPACE/l10n/bundles
        cp -r $GITHUB_WORKSPACE/devops/autotest/client/python/main/lib/l10n/bundles $GITHUB_WORKSPACE/l10n/
        docker cp $GITHUB_WORKSPACE/l10n singleton:/
        curl -X GET 'http://localhost:8091/actuator/health'
        sudo apt-get install pkg-config libicu-dev
        pip install --no-binary=:pyicu: pyicu
        pip install ruamel.yaml
        pip install -r $GITHUB_WORKSPACE/devops/autotest/client/python/main/requirements.txt
        cd $GITHUB_WORKSPACE/devops/autotest/client/python/
        chmod 777 update_config_files_with_abs_paths.py
        python3 update_config_files_with_abs_paths.py
        cd $GITHUB_WORKSPACE/devops/autotest/client/python/main/testcases        
        pytest -v