//Copyright 2019-2023 VMware, Inc.
//SPDX-License-Identifier: EPL-2.0
apply plugin: 'java'
apply plugin: "jacoco"
apply plugin: "org.sonarqube"

description = 'VIP i18n pattern CLDR data extract tools'

ext {
    javaLevel = 1.8
    cldrVersion = '32.0.0'
    projectVersion = '0.11.0'
    deployPath="$rootDir/../publish/"
    sourceCompatibility = javaLevel
    version = '1.0'
}

[compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

configurations {
        providedRuntime
}

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
  }
}

sourceSets {
    main.java.srcDirs = ['src/main/java']
    main.resources.srcDirs = ['src/main/resources']
}



jar {
    baseName = "i18n-patterns-core"
    version = "$projectVersion"
    classifier = ''
    exclude('**/cldr/data')
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {
    implementation("commons-collections:commons-collections:3.2.2")
    implementation("com.googlecode.json-simple:json-simple:1.1.1"){
        exclude group: 'junit'
    }

    implementation("com.fasterxml.jackson.core:jackson-databind:2.16.0")
    implementation("commons-io:commons-io:2.16.0")
    implementation("org.slf4j:slf4j-api:1.7.26")

    testImplementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.26'
    testImplementation group: 'log4j', name: 'log4j', version: '1.2.17'
    testImplementation group: 'junit', name: 'junit', version: '4.+'

}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

task download(type: JavaExec, dependsOn: classes){
    main 'com.vmware.i18n.PatternParseMain'
    classpath sourceSets.main.runtimeClasspath
}

task copyResources(type: Copy, dependsOn: download) {
    File dir = new File("${buildDir}/resources/main");
    dir.deleteDir();
    from "${projectDir}/src/main/resources"
    into "${buildDir}/resources/main"
}

processTestResources.dependsOn copyResources


task basePatternJar(type: Jar, dependsOn: copyResources) {
    baseName = "i18n-patterns-core-base"
    version = "$projectVersion"
    classifier = ''
    from("${buildDir}/classes/java/main", "${buildDir}/resources/main")
    exclude('**/cldr/data','**/cldr/pattern/**','**/cldr/localedata/**','**/cldr/misc/**')

}

task generateBundleZip(type: Zip, dependsOn: copyResources){
    archiveBaseName='cldr'
    archiveVersion = "$projectVersion"
    from "${buildDir}/resources/main/cldr"
    includes =['pattern/**','localedata/**','misc/**']
    into "cldr"
    //destinationDir file("$rootDir/../publish/")

}

task generateEnZip(type: Zip, dependsOn: copyResources){
    archiveBaseName='cldr-en'
    archiveVersion = "$projectVersion"
    from "${buildDir}/resources/main/cldr"
    includes =['pattern/common/en/**','pattern/timezone/en/**','localedata/en/**','misc/en/**']
    into "cldr"
    //destinationDir file("$rootDir/../publish/")

}



task sourceCodeJar(type: Jar, dependsOn: classes) {
    baseName = "i18n-patterns-core"
    version = "$projectVersion"
    classifier = 'sources'
    from sourceSets.main.allJava
}
 
task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName = "i18n-patterns-core"
    version = "$projectVersion"
    classifier = 'javadoc'
    from javadoc.destinationDir
}


task copyLibs(type :Copy, dependsOn: [jar, generateBundleZip, generateEnZip, sourceCodeJar, javadocJar, basePatternJar]) {
    from "$buildDir/libs", "$buildDir/distributions"
    into "$rootDir/publish/"
    println "The build was output to -> $rootDir/publish/"
    include "**/*.jar", "**/*.zip"
}


 
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}
 
artifacts {
    archives sourceCodeJar
    archives javadocJar
}



assemble.dependsOn.add copyLibs
