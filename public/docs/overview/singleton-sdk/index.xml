<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Singleton SDK on Singleton</title>
    <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/</link>
    <description>Recent content in Singleton SDK on Singleton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Sep 2019 22:59:26 +0800</lastBuildDate>
    
	<atom:link href="https://vmware.github.io/singleton/docs/overview/singleton-sdk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java Client Introduction</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/java-client-introduction/</link>
      <pubDate>Tue, 24 Sep 2019 20:07:51 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/java-client-introduction/</guid>
      <description>As we know in the last article, Singleton provides plenty of APIs to support G11N. However, calling the APIs directly is time-consuming and inefficient. So, Singleton has introduced several Clients for different programming language environments, to encapsulate the API calls to the Service, which significantly improves efficiency, and reduces the cost in development work. These Clients can call the Service&amp;rsquo;s APIs to get the translation and pattern data, then parse the data to provide the translation and data formatting features.</description>
    </item>
    
    <item>
      <title>Javascript Client Introduction</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/javascript-client-introduction/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:23 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/javascript-client-introduction/</guid>
      <description>The Singleton JavaScript Client is a Singleton Service-based JavaScript library used for SW i18n. It supports all JavaScript frameworks, you can run it in browsers, as well as NodeJS environments. With the Singleton JavaScript Client, it is much easier to use the Web front-end for SW i18n. Now, let&amp;rsquo;s look at what the Client does, and how it is used.
Features Overview  Getting and managing locales. Getting the i18n resources from Singleton Service.</description>
    </item>
    
    <item>
      <title>C# Client Introduction</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/csharp-client-introduction/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:58 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/csharp-client-introduction/</guid>
      <description>Coming soon</description>
    </item>
    
    <item>
      <title>Python Client Introduction</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/python-client-introduction/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:51 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/python-client-introduction/</guid>
      <description>Coming soon</description>
    </item>
    
    <item>
      <title>Go Client Introduction</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/go-client-introduction/</link>
      <pubDate>Tue, 07 Apr 2020 10:30:59 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/go-client-introduction/</guid>
      <description>The Singleton Go Client is a Singleton SDK to fetch translations from Singleton service or bundles easily.
Features in Go Client SDK   Supported interfaces:  GetLocaleList: Get supported locale list GetComponentList: Get supported component list GetStringMessage: Get a message with optional arguments. Fallback to default locale is provided. GetComponentMessages: Get messages of a component. Fallback to default locale is NOT provided.   Provide cache management as well as cache registration.</description>
    </item>
    
  </channel>
</rss>