<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About Singleton on Singleton</title>
    <link>https://vmware.github.io/singleton/</link>
    <description>Recent content in About Singleton on Singleton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Sep 2019 18:41:11 +0800</lastBuildDate>
    
	<atom:link href="https://vmware.github.io/singleton/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Integrate Singleton in Java App</title>
      <link>https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-java-app/</link>
      <pubDate>Tue, 24 Sep 2019 20:09:42 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-java-app/</guid>
      <description>This guideline demonstrates how to integrate Singleton client(Java) in your application.
Singleton Client(Java) is a common lib providing I18n support for Java application. The client will communicate with Singleton service to fetch translation and I18n pattern data for providing globalization support in messages and formatting.
For I18n formatting, Singleton Client(Java) also provides I18n support for datetime format, number format, currency and plural. Singleton Client(Java) formatting is based on CLDR data repository and keeps the same scope in supported locale set.</description>
    </item>
    
    <item>
      <title>Java Client Introduction</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/java-client-introduction/</link>
      <pubDate>Tue, 24 Sep 2019 20:07:51 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/java-client-introduction/</guid>
      <description>As we know in the last article, Singleton provides plenty of APIs to support G11N. However, calling the APIs directly is time-consuming and inefficient. So, Singleton has introduced several Clients for different programming language environments, to encapsulate the API calls to the Service, which significantly improves efficiency, and reduces the cost in development work. These Clients can call the Service&amp;rsquo;s APIs to get the translation and pattern data, then parse the data to provide the translation and data formatting features.</description>
    </item>
    
    <item>
      <title>Enable Source Collection</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-source-collection/</link>
      <pubDate>Tue, 24 Sep 2019 20:06:35 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-source-collection/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Download and Installation</title>
      <link>https://vmware.github.io/singleton/docs/get-started/download-and-installation/</link>
      <pubDate>Tue, 24 Sep 2019 20:04:26 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/get-started/download-and-installation/</guid>
      <description>Singleton official 0.1.0 Release is available now! Choose the download that&amp;rsquo;s right for you and click one of the links below.
Singleton Service 0.1.0 Binaries Downloading    filename sha1 hash branch/tag     singleton-manager-i18n-0.1.0.jar 8e7599495292ce34cdb9769ec43695999071a1fe master/v0.1.0-Singleton-Service   singleton-manager-l10n-0.1.0.jar 8d744bb83e310a1b451a68fb65999803488c8cfc master/v0.1.0-Singleton-Service    Installation Singleton Service include 2 types of builds, one is i18n manager, the other is l10n manager:
 I18n manager is the main build, it provides the restful APIs to talk with Singleton SDK.</description>
    </item>
    
    <item>
      <title>Data Initialization</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/data-initialization/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/data-initialization/</guid>
      <description>In general, for most of products, it&amp;rsquo;s good enough to load all translations and patterns one time in root module when the application starts, but for some special requirements, such like: isolated translation for feature module or using lazy module to enhance performance, please refer to Isolated feature module and Lazy Load Module. singleton client provides two ways to load i18n data and initialize the services in root module:
Blocking loading Get the translations from an singleton service API and keep it ready before the application renders the page.</description>
    </item>
    
    <item>
      <title>Locale Management</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/locale-management/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/locale-management/</guid>
      <description>Overview A locale consists of a number of categories for which country-dependent formatting or other specifications exist. A program&amp;rsquo;s locale defines its code sets, date and time formatting conventions, monetary conventions, decimal formatting conventions, and collation (sort) order. A locale name can be composed of a base language, country (territory) of use, and codeset.
For example, German language is de, an abbreviation for Deutsch, while Swiss German is de_CH, CH being an abbreviation for Confederation Helvetica.</description>
    </item>
    
    <item>
      <title>Isolated Feature Module</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/isolated-feature-module/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/isolated-feature-module/</guid>
      <description>Overview singleton client provides localization(l3) support for the third-party libraries, managing its resources and configuration separately from other modules.Note: Since it&amp;rsquo;s impossible to ensure that lib&amp;rsquo;s runtime environment is accessible to singleton service, so please mount the translation bundles to the configuration.
Feature Module Register the lib&amp;rsquo;s configuration, and override pipe util to set the specific configuration.
Configuration Override L10nPipePlus Register component Host Module With singleton There is no special configuration required, the lib will work as well as normal feature module.</description>
    </item>
    
    <item>
      <title>Lazy Load Module</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/lazy-load-module/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/lazy-load-module/</guid>
      <description>Overview As the application is growing, some modules will be defined as the lazy module. In that situation, the translation and patterns could be loaded as lazy mode to enhance performance. The singleton client provides this option to load translation and patterns along with lazy module. Using the &amp;lsquo;forChild&amp;rsquo; API to initialize the singleton module, thus the lazy module will use the separated singleton services instances and injectors.
Example   </description>
    </item>
    
    <item>
      <title>Localized Component Mixin</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/localized-component-mixin/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/localized-component-mixin/</guid>
      <description>Overview The LocalizedComponent mixin provides a nice abstraction for localizing components in an Angular app.
Using the Mixin approach allows you to achieve three things:
 Extract English strings to a separate file, keeping your HTML template clean and containing only DOM. Provides a consistent pattern of where and how English strings are stored allowing easy automation and parsing of those files to collect the English into singleton. Your translation keys will always be prefixed with the key provided in the mixin, helping to avoid namespace clashes with other components.</description>
    </item>
    
    <item>
      <title>Integrate Singleton in Javascript App</title>
      <link>https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-javascript-app/</link>
      <pubDate>Tue, 24 Sep 2019 20:09:53 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-javascript-app/</guid>
      <description>Coming soon</description>
    </item>
    
    <item>
      <title>Translate Pipe</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/translate-pipe/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/translate-pipe/</guid>
      <description>Overview Use the translate pipe in your HTML templates to retrieve translations from the singleton service.
API L10nPlus pipe Get translation by key, will find the source in the sourceBundle according to the key.
{{ key | vtranslate:[ : variables ] }} L10n pipe (deprecated) {{ key | translate: [ : source [ : variables ] ] }} Input    Parameter Type Description     key string Define the key to identify the translation, it should name like this: component_module_page_control_shortmsg.</description>
    </item>
    
    <item>
      <title>Javascript Client Introduction</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/javascript-client-introduction/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:23 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/javascript-client-introduction/</guid>
      <description>The Singleton JavaScript Client is a Singleton Service-based JavaScript library used for SW i18n. It supports all JavaScript frameworks, you can run it in browsers, as well as NodeJS environments. With the Singleton JavaScript Client, it is much easier to use the Web front-end for SW i18n. Now, let&amp;rsquo;s look at what the Client does, and how it is used.
Features Overview  Getting and managing locales. Getting the i18n resources from Singleton Service.</description>
    </item>
    
    <item>
      <title>Enable Pseudo Translation</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-pseudo-translation/</link>
      <pubDate>Tue, 24 Sep 2019 20:06:48 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-pseudo-translation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>https://vmware.github.io/singleton/docs/get-started/quick-start/</link>
      <pubDate>Tue, 24 Sep 2019 20:04:47 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/get-started/quick-start/</guid>
      <description>The Singleton application suite includes:
 Singleton Service: It contains an Application Program Interface (API), which is a web service that is used for i18n features, such as providing translated text. Singleton Client: It is used to communicate with Singleton Service to get the localized resources.  Features and functionality Singleton offers the following features and functionality:
 Singleton Core API - Provides RESTful web services for delivering localized resources. Source collection - Offers a source collection feature for Singleton string-based APIs.</description>
    </item>
    
    <item>
      <title>Translate Directive</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/translate-directive/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/translate-directive/</guid>
      <description>Overview Use the translate directive in your HTML templates to retrieve translations from the singleton service.
@Directive({ selector: &#39;[l10n]&#39; }) class L10nDirective implements AfterViewInit { l10n: string; source: string; params: string[]; constructor(el: ElementRef, ...) ngAfterViewInit() } Selector [l10n]
Inputs    Attribute Type Required Description     key String Required Bound to L10nDirective.l10n.Define the key to identify the translation, it should name like this: component_module_page_control_shortmsg. e.g. web_settings_stats_statsTable_host;   source String No Bound to L10nDirective.</description>
    </item>
    
    <item>
      <title>L10n Service</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/l10n-service/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/l10n-service/</guid>
      <description>Overview The pipe or directive can&amp;rsquo;t cover all situations, some strings need to be processed in JavaScript module rather than in the template. L10nService provides APIs for translation related information in addition to pipe and directive.
API Get source string Will return source string in sourceBundle by key.
public getSourceString(key: string): string; Get formatted message The parameters and return values are the same as the l10n pipe and directive. Get formatted message by key and variables.</description>
    </item>
    
    <item>
      <title>I18n Service</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/i18n-service/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/i18n-service/</guid>
      <description>Overview I18n service provides APIs which are supposed to be used in JavaScript module to get supported languages &amp;amp; regions, and format locale-sensitive data.
Supported Language &amp;amp; Region APIs getSupportedLanguages Get the supported languages which are available in singleton service for the specific product.
getSupportedLanguages(): Promise&amp;lt;languagesList&amp;gt;; getSupportedRegions Get the supported regions from singleton service, the supported region list should be unified in all products.
getSupportedRegions(languageTag: string): Promise&amp;lt;regionsList&amp;gt;;    Parameter Type Description     languageTag String Get supported region list with the localized display name by the &amp;lsquo;languageTag&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Plural Format</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/plural-format/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/plural-format/</guid>
      <description>Overview Transform a plural message string to a string that pluralizes the value according to locale rules and translations. It can be implemented using l10n utils, the only difference is the definition of the source.
Plural Source Text The source text defines the message output for each plural case of the specified locale. Syntax:
selector { message } /** * selector: explicitValue | keyword * explicitValue: &#39;=&#39; number // adjacent, no white space in between * keyword: Pluralization categories * message: string */ Pluralization categories include (depending on the language):</description>
    </item>
    
    <item>
      <title>Relative Time Format</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/relative-time-format/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/relative-time-format/</guid>
      <description>Overview Formats simple relative dates. Try to give the best relative time span representation based on start time and end time.
API public formatRelativeTime( from: Date, to: Date, locale?: string, options?: Object ): string Parameters    Parameter Type Required Description     from Date Required Relative time start time.   to Date Required Relative time end time.   locale String Optional The locale is only required in async mode for non-blocking loading.</description>
    </item>
    
    <item>
      <title>Date Time Format Pipe</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/date-time-format-pipe/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/date-time-format-pipe/</guid>
      <description>Overview Use the dateFormat pipe in your HTML templates to format a date according to locale rules.
Usage {{ value | dateFormat [ : format [ : timezone ] ] }} Input Value    Parameter Type Description     value any a date object or a number (milliseconds since UTC epoch) or an ISO string (https://www.w3.org/TR/NOTE-datetime).    Parameters    Parameter Type Description     format string indicates which date/time components to include.</description>
    </item>
    
    <item>
      <title>Number Format Pipe</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/number-format-pipe/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/number-format-pipe/</guid>
      <description>Overview Formats a number as text. Group sizing and separator and other locale-specific configurations are based on the pattern data.
Usage {{ value | numberFormat }} Input Value    Parameter Type Description     value number The number to be formatted.    Example Code   </description>
    </item>
    
    <item>
      <title>Currency Format Pipe</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/currency-format-pipe/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/currency-format-pipe/</guid>
      <description>Overview Formats a number into currency string. Group sizing and separator and other locale-specific configurations are based on the pattern data.
Usage {{ value | currencyFormat [ : currencyCode ] }} Parameters    Parameter Type Description     currencyCode string Currencycode should be in accordance with ISO 4217 standard, such as USD for the US dollar and EUR for the euro. Optional. Default value is USD.    Example Code </description>
    </item>
    
    <item>
      <title>Percent Format Pipe</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/percent-format-pipe/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/percent-format-pipe/</guid>
      <description>Overview Formats a number into percentage string. Group sizing and separator and other locale-specific configurations are based on the pattern data.
Usage {{ value | percentFormat }} Example Code   </description>
    </item>
    
    <item>
      <title>Integrate Singleton in Angular App</title>
      <link>https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-angular-app/</link>
      <pubDate>Tue, 24 Sep 2019 20:10:10 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-angular-app/</guid>
      <description>This guideline demonstrates how to integrate Singleton AngularClient with your Angular Framework on your application. Singleton AngularClient is a common lib providing I18n support for Angular framework on your application. The client will communicate with Singleton service to dynamically fetch translation and I18n pattern data for providing globalization support in messages and formatting. For I18n formatting, Singleton AngularClient also provides I18n support for datetime format, number format, currency and plural. Singleton AngularClient formatting is based on CLDR data repository and keeps the same scope in supported locale set.</description>
    </item>
    
    <item>
      <title>Command Line Utils</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/command-line-utils/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/command-line-utils/</guid>
      <description>Load Translation Download the specified languages of translation files in your project location.
Command line arguments description    Parameter Type Value Description     &amp;ndash;directory string required The directory you want to put translations in.   &amp;ndash;host string required This is singleton service which provides clients with translations and pattern.   &amp;ndash;product string required Product name. For now, singleton service doesn’t explicitly restrict name of product, but it&amp;rsquo;s better to keep short and sync with the name in release master.</description>
    </item>
    
    <item>
      <title>Standalone Mode</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/standalone-mode/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/angular-client-introduction/standalone-mode/</guid>
      <description>Standalone mode is designed for the application without singleton service at runtime to support internationalization, the translations and formatting patterns need to be downloaded from singleton service into local asset folder at buildtime. In this way, when the application starts, the ngx-vip client will get translations and patterns from application web server through HTTP request.
Specification Register product No matter the singleton service will be running in product environment or not.</description>
    </item>
    
    <item>
      <title>Integrate Singleton in C# App</title>
      <link>https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-csharp-app/</link>
      <pubDate>Tue, 24 Sep 2019 20:10:23 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-csharp-app/</guid>
      <description>Coming soon</description>
    </item>
    
    <item>
      <title>C# Client Introduction</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/csharp-client-introduction/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:58 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/csharp-client-introduction/</guid>
      <description>Coming soon</description>
    </item>
    
    <item>
      <title>Integrate Singleton in Python App</title>
      <link>https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-python-app/</link>
      <pubDate>Tue, 24 Sep 2019 20:10:17 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/tutorials/integrate-singleton-in-python-app/</guid>
      <description>Coming soon</description>
    </item>
    
    <item>
      <title>Deploy Singleton Service in Your App</title>
      <link>https://vmware.github.io/singleton/docs/tutorials/deploy-singleton-service-in-your-app/</link>
      <pubDate>Tue, 24 Sep 2019 20:11:16 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/tutorials/deploy-singleton-service-in-your-app/</guid>
      <description>Coming soon</description>
    </item>
    
    <item>
      <title>Python Client Introduction</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/python-client-introduction/</link>
      <pubDate>Tue, 24 Sep 2019 20:08:51 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/python-client-introduction/</guid>
      <description>Coming soon</description>
    </item>
    
    <item>
      <title>Go Client Introduction</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-sdk/go-client-introduction/</link>
      <pubDate>Tue, 07 Apr 2020 10:30:59 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-sdk/go-client-introduction/</guid>
      <description>The Singleton Go Client is a Singleton SDK to fetch translations from Singleton service or bundles easily.
Features in Go Client SDK   Supported interfaces:  GetLocaleList: Get supported locale list GetComponentList: Get supported component list GetStringMessage: Get a message with optional arguments. Fallback to default locale is provided. GetComponentMessages: Get messages of a component. Fallback to default locale is NOT provided.   Provide cache management as well as cache registration.</description>
    </item>
    
    <item>
      <title>Singleton Service Script</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-service/singleton-service-script/</link>
      <pubDate>Mon, 02 Mar 2020 14:52:31 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-service/singleton-service-script/</guid>
      <description>Singleton adds script files to help user to start/check/stop Singleton Service build.
How to generate Singleton Script The steps:
 Clone Singleton Service code using Git  git clone git@github.com:vmware/singleton.gitComplie a build using Gradle wrapper under ./g11n-ws folder  ./gradlew build -x testGo to ./Singleton/Publish folder, find singletonScripts-0.1.0.zip, and extract it, you will get 4 files as below:  singletonall.shsingletonstart.shsingletoncheck.shsingletonstop.shHow to use Singleton Script singletonall.</description>
    </item>
    
    <item>
      <title>Enable Product White List</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-product-white-list/</link>
      <pubDate>Wed, 11 Dec 2019 14:14:49 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-product-white-list/</guid>
      <description>Singleton Service adds a new feature to support the product white list defination, that means only the product in the white list can work well to get translations and get supported language list. It is no impact for DateTimes / Numbers / Currencies / Plurals / Measurements / DateFields / RegionList .
By default, this feature is disabled.
This page will introduce the details about this new feature.
How to enable product white list in Singleton Service?</description>
    </item>
    
    <item>
      <title>Enable S3 Storage</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-s3-storage/</link>
      <pubDate>Fri, 01 Nov 2019 18:53:33 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-service/configurations/enable-s3-storage/</guid>
      <description>Singleton Service now supports to store the translation bundle files on AWS S3.
This page will introduce the details about Singleton Service S3 build.
How to generate Singleton Service S3 build? The steps to generate S3 build:
 Clone Singleton Service code using Git.  git clone git@github.com:vmware/singleton.git Update the complie configuration file in singleton/g11n-ws/gradle.properties  datatype=bundle to
datatype=s3 Update the below s3 config items according to your requirements in singleton/g11n-ws/vip-manager-i18n/src/main/resources/application-s3.</description>
    </item>
    
    <item>
      <title>_Footer</title>
      <link>https://vmware.github.io/singleton/_footer/</link>
      <pubDate>Thu, 26 Sep 2019 13:43:07 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/_footer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Singleton Service APIs</title>
      <link>https://vmware.github.io/singleton/docs/overview/singleton-service/singleton-service-apis/</link>
      <pubDate>Tue, 24 Sep 2019 20:05:55 +0800</pubDate>
      
      <guid>https://vmware.github.io/singleton/docs/overview/singleton-service/singleton-service-apis/</guid>
      <description>Singleton Service has two API versions available at present: v1 and v2. API v1 was created in the early times of Singleton, while API v2 has been validated with many VMware products over years, which includes the largest number of APIs, and is closer to the Restful style. It is recommended to use API v2 in practice. This version provides two types of APIs:
 Formatting API, which is used to format the data like the date time/number/currency/unit of measure/singular and plural variations, just to name a few.</description>
    </item>
    
  </channel>
</rss>