<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdminExecutionContext" xml:space="preserve">
    <value>Admin</value>
  </data>
  <data name="AirWatchDataPlatformService" xml:space="preserve">
    <value>AirWatch DataPlatform Service</value>
  </data>
  <data name="Always32BitArchitecture" xml:space="preserve">
    <value>32-bit (Forced)</value>
  </data>
  <data name="AssignedDeviceSensorRequested" xml:space="preserve">
    <value>Assign Device Sensor Requested</value>
  </data>
  <data name="AssignmentLabel" xml:space="preserve">
    <value>Assignment</value>
  </data>
  <data name="AssignSensor" xml:space="preserve">
    <value>Assign the sensor to smart groups</value>
  </data>
  <data name="BackButtonLabel" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="BooleanType" xml:space="preserve">
    <value>Boolean</value>
  </data>
  <data name="CannotDeleteWorkflowResource" xml:space="preserve">
    <value>The resources associated to workflow cannot be deleted.</value>
  </data>
  <data name="DataTypeLabel" xml:space="preserve">
    <value>Data Type</value>
  </data>
  <data name="DateTimeType" xml:space="preserve">
    <value>Date Time</value>
  </data>
  <data name="DefineQueryLabel" xml:space="preserve">
    <value>Define Query</value>
  </data>
  <data name="DeviceScriptAssignmentGroup" xml:space="preserve">
    <value>Device Script Assignment Group</value>
  </data>
  <data name="DeviceSensor" xml:space="preserve">
    <value>Device Sensor</value>
  </data>
  <data name="DeviceSensorAssignmenGroupRankingUpdated" xml:space="preserve">
    <value>Device Sensor assignment group ranking updated</value>
  </data>
  <data name="DeviceSensorAssignmentGroup" xml:space="preserve">
    <value>Device Sensor Assignment Group</value>
  </data>
  <data name="DeviceSensorAssignmentGroupAdded" xml:space="preserve">
    <value>Device Sensor assignment group added</value>
  </data>
  <data name="DeviceSensorAssignmentGroupDeleted" xml:space="preserve">
    <value>Device Sensor assignment group deleted.</value>
  </data>
  <data name="DeviceSensorAssignmentGroupEdited" xml:space="preserve">
    <value>Device Sensor assignment group edited</value>
  </data>
  <data name="DeviceSensorAssignmentGroupName" xml:space="preserve">
    <value>Device Sensor assignment name</value>
  </data>
  <data name="DeviceSensorCreated" xml:space="preserve">
    <value>Device Sensor Created</value>
  </data>
  <data name="DeviceSensorDeleted" xml:space="preserve">
    <value>Device Sensor Deleted</value>
  </data>
  <data name="DeviceSensorDeletedSuccessfully" xml:space="preserve">
    <value>Device Sensor Deleted Successfully</value>
  </data>
  <data name="DeviceSensorEdited" xml:space="preserve">
    <value>Device Sensor Edited</value>
  </data>
  <data name="DeviceSensorIdentifiers" xml:space="preserve">
    <value>Device Sensor Identifiers</value>
  </data>
  <data name="DeviceSensorListViewTitle" xml:space="preserve">
    <value>Sensor List View</value>
  </data>
  <data name="DeviceSensorName" xml:space="preserve">
    <value>Device Sensor Name</value>
  </data>
  <data name="DeviceSensorNotSupportedForEmployeeOwnedDevice" xml:space="preserve">
    <value>Employee Owned Device : Device Sensor data not requested</value>
  </data>
  <data name="DeviceSensorOg" xml:space="preserve">
    <value>Device Sensor Organization Group</value>
  </data>
  <data name="DeviceSensorPersistedInDeviceState" xml:space="preserve">
    <value>Sensor sample saved in device state</value>
  </data>
  <data name="DeviceSensorPersistedInIntelligence" xml:space="preserve">
    <value>Sensor sample saved in intelligence</value>
  </data>
  <data name="DeviceSensorSampleReceived" xml:space="preserve">
    <value>Device sensor sample received</value>
  </data>
  <data name="DeviceSensorSampleReceivedWithErrors" xml:space="preserve">
    <value>Sample Received with Errors</value>
  </data>
  <data name="DeviceSensorSampleSentFailed" xml:space="preserve">
    <value>Failed to send the Sensor sample value</value>
  </data>
  <data name="DeviceSensorSampleSentSuccess" xml:space="preserve">
    <value>Successfully sent the Sensor sample value</value>
  </data>
  <data name="DeviceSensorSmartGroupAssigned" xml:space="preserve">
    <value>Device Sensor assigned to Smart Group</value>
  </data>
  <data name="EditSensor" xml:space="preserve">
    <value>Edit Sensor</value>
  </data>
  <data name="Either32Or64BitArchitecture" xml:space="preserve">
    <value>Auto</value>
  </data>
  <data name="EmployeeOwnedDevicesWillNotSupportSensors" xml:space="preserve">
    <value>Devices with Employee Owned ownership type will be automatically excluded from the Sensor assignment for user privacy reasons.</value>
  </data>
  <data name="ExecutionArchitecture" xml:space="preserve">
    <value>Execution Architecture</value>
  </data>
  <data name="ExecutionArchitectureInfo" xml:space="preserve">
    <value>
32-bit(Forced) : Executes as 32-bit regardless of target device architecture.
32-bit : Executes on 32-bit devices only.
64-bit : Executes on 64-bit devices only.
Auto : Executes based on target device architecture.</value>
  </data>
  <data name="ExecutionContextLabel" xml:space="preserve">
    <value>Execution Context</value>
  </data>
  <data name="FinishButtonLabel" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="ImportCodeButtonText" xml:space="preserve">
    <value>Import from VMware Template Library</value>
  </data>
  <data name="IncludeInSmartGroupLabel" xml:space="preserve">
    <value>Include in Smart Groups</value>
  </data>
  <data name="IntegerType" xml:space="preserve">
    <value>Integer</value>
  </data>
  <data name="LastExecutedDate" xml:space="preserve">
    <value>Last Executed Date</value>
  </data>
  <data name="MacOsPeriodicTriggerInfoText" xml:space="preserve">
    <value>Run periodically based on the configured Intelligent Hub data sample interval schedule defined in Settings &gt; Devices &amp; Users &gt; Apple &gt; Apple macOS &gt; Intelligent Hub Settings</value>
  </data>
  <data name="ManageEndpointResources" xml:space="preserve">
    <value>Manage endpoint resources</value>
  </data>
  <data name="ManageEndpointResourcesInfo" xml:space="preserve">
    <value>Use Sensor values as conditions in Freestyle to manage endpoint resources based on custom criteria.</value>
  </data>
  <data name="NetworkChangeTriggerInfo" xml:space="preserve">
    <value>Run whenever a network change is detected on the device (for example, switching from Ethernet to WiFi)</value>
  </data>
  <data name="NewSensor" xml:space="preserve">
    <value>New Sensor</value>
  </data>
  <data name="NextButtonLabel" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="NoRecordsFound" xml:space="preserve">
    <value>No scripts found, please create a new one to begin</value>
  </data>
  <data name="NoSensorsFound" xml:space="preserve">
    <value>No sensors found, please create a new one to begin</value>
  </data>
  <data name="NotRunLabel" xml:space="preserve">
    <value>Not Run</value>
  </data>
  <data name="Only32BitArchitecture" xml:space="preserve">
    <value>32-bit</value>
  </data>
  <data name="Only64BitArchitecture" xml:space="preserve">
    <value>64-bit</value>
  </data>
  <data name="PlatformLabel" xml:space="preserve">
    <value>Platform</value>
  </data>
  <data name="QueryType" xml:space="preserve">
    <value>Query Type</value>
  </data>
  <data name="QueryTypeHelpText" xml:space="preserve">
    <value>This setting determines the target for the device query</value>
  </data>
  <data name="QueryTypeNotSetError" xml:space="preserve">
    <value>Query type cannot be empty</value>
  </data>
  <data name="ReplaceWarningForScriptUpload" xml:space="preserve">
    <value>
	Uploading a script will replace any existing content in the editor.
	
	Note: A total of 4 KB of data will be stored per device across all sensors
	Note: The script will timeout if not completed in 5 minutes.
	</value>
  </data>
  <data name="RequestSensorsSyncFailed" xml:space="preserve">
    <value>Queuing device command to sync sensors failed</value>
  </data>
  <data name="RequestSensorsSyncSuccess" xml:space="preserve">
    <value>Queued device command to sync sensors</value>
  </data>
  <data name="ResponseLabel" xml:space="preserve">
    <value>Response</value>
  </data>
  <data name="RunButtonText" xml:space="preserve">
    <value>Run</value>
  </data>
  <data name="ScheduleTriggerInfo" xml:space="preserve">
    <value>When the trigger is set to Schedule, this sensor will collect and transmit data based on the sensor schedule configured in the Windows Sample Schedule settings page.</value>
  </data>
  <data name="ScriptExecutedAt" xml:space="preserve">
    <value>Executed At</value>
  </data>
  <data name="ScriptLabel" xml:space="preserve">
    <value>Script/Command</value>
  </data>
  <data name="SelectSmartGroupToAssignSensor" xml:space="preserve">
    <value>Select the smart groups to which this sensor will be assigned</value>
  </data>
  <data name="Sensor" xml:space="preserve">
    <value>Sensor</value>
  </data>
  <data name="SensorAssignmentDeploymentTabDesc" xml:space="preserve">
    <value>Select which triggers should cause this sensor to run on assigned devices</value>
  </data>
  <data name="SensorAssignmentGroups" xml:space="preserve">
    <value>Sensors</value>
  </data>
  <data name="SensorDellCustomBIOSQuery" xml:space="preserve">
    <value>Dell Custom BIOS</value>
  </data>
  <data name="SensorDuplicateNameError" xml:space="preserve">
    <value>A sensor with same name exists. Please use a different name.</value>
  </data>
  <data name="SensorEventSelectionError" xml:space="preserve">
    <value>Please select one or more event types to proceed</value>
  </data>
  <data name="SensorEventTrigger" xml:space="preserve">
    <value>Event</value>
  </data>
  <data name="SensorGoToOptIn" xml:space="preserve">
    <value>Click here to opt in</value>
  </data>
  <data name="SensorLoginEvent" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="SensorLogoutEvent" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="SensorMenuDescription" xml:space="preserve">
    <value>Sensor Menu description</value>
  </data>
  <data name="SensorName" xml:space="preserve">
    <value>Sensor Name</value>
  </data>
  <data name="SensorNameFormatError" xml:space="preserve">
    <value>Must be between 2 and 64 characters using only a combination of lowercase letters, numbers, and underscores. The first character must be a lowercase letter.</value>
  </data>
  <data name="SensorNameHelpText" xml:space="preserve">
    <value>Sensor Name is the key to the data returned from the device when the Sensor script/query is run. The key and value are returned and stored in Workspace ONE Intelligence and can be used in reports, charts and automations</value>
  </data>
  <data name="SensorNameNotSetError" xml:space="preserve">
    <value>Sensor name cannot be empty</value>
  </data>
  <data name="SensorOGNotOptedInfo" xml:space="preserve">
    <value>Setting up sensors requires Workspace ONE Intelligence. Please opt into Workspace ONE intelligence and return to this page to create Sensors.</value>
  </data>
  <data name="SensorPowershellQuery" xml:space="preserve">
    <value>PowerShell</value>
  </data>
  <data name="Sensors" xml:space="preserve">
    <value>Sensors</value>
  </data>
  <data name="SensorScheduleTrigger" xml:space="preserve">
    <value>Schedule</value>
  </data>
  <data name="SensorsCreateReports" xml:space="preserve">
    <value>Create reports and dashboards</value>
  </data>
  <data name="SensorsCreateReportsInfo" xml:space="preserve">
    <value>Use Workspace ONE Intelligence to create reports and dashboards based on Sensor data. </value>
  </data>
  <data name="SensorScriptHash" xml:space="preserve">
    <value>Sensor Script Hash</value>
  </data>
  <data name="SensorScriptInvalid" xml:space="preserve">
    <value>Script/Command is a required value. Please specify a valid script to save this sensor</value>
  </data>
  <data name="SensorsDD" xml:space="preserve">
    <value>Sensors</value>
  </data>
  <data name="SensorsDDHelp" xml:space="preserve">
    <value>Controls access to view the device sensor values and request a sync</value>
  </data>
  <data name="SensorsHeader" xml:space="preserve">
    <value>Automated endpoint data collection</value>
  </data>
  <data name="SensorsHelp" xml:space="preserve">
    <value>Controls access to view and manage device sensors</value>
  </data>
  <data name="SensorsInfo" xml:space="preserve">
    <value>Quickly and securely automate data collection for your endpoints using common scripting languages. Read more about Sensors in</value>
  </data>
  <data name="SensorsPurpose" xml:space="preserve">
    <value>What can I do with sensors?</value>
  </data>
  <data name="SensorsRetrieveDeviceData" xml:space="preserve">
    <value>Retrieve device data</value>
  </data>
  <data name="SensorsRetrieveDeviceDataInfo" xml:space="preserve">
    <value>Use common scripting languages and secure environment variables to retrieve data from desktop devices.</value>
  </data>
  <data name="SensorsSync" xml:space="preserve">
    <value>Sensors</value>
  </data>
  <data name="SensorStartupEvent" xml:space="preserve">
    <value>Startup</value>
  </data>
  <data name="SensorStepDefinition" xml:space="preserve">
    <value>Configure the key name, description and triggers for the data that will be returned by the sensor.</value>
  </data>
  <data name="SensorUserSwitchEvent" xml:space="preserve">
    <value>User Switch</value>
  </data>
  <data name="SensorValue" xml:space="preserve">
    <value>Sensor Value</value>
  </data>
  <data name="SetupScriptParametersMac" xml:space="preserve">
    <value>Create variables to be available as part of the script environment during execution.
Shell scripts can reference variables directly by name (e.g. $myvariable) and Python 3 scripts can reference variables with the os module (e.g. os.getenv('myvariable') )</value>
  </data>
  <data name="SetupScriptParametersWindow" xml:space="preserve">
    <value>Create variables to be passed with a script as environment variables.
PowerShell scripts can reference variables defined here by calling $env:key where key is the key field defined below.</value>
  </data>
  <data name="SmartGroupCannotBeAssignedToMultipleAssignmentGroups" xml:space="preserve">
    <value>Duplicate smartgroup(s) cannot be assigned to multiple assignment groups.</value>
  </data>
  <data name="StringType" xml:space="preserve">
    <value>String</value>
  </data>
  <data name="SyncSensors" xml:space="preserve">
    <value>Sync Sensors</value>
    <comment>Label key for DeviceCommand</comment>
  </data>
  <data name="SystemExecutionContext" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="Triggers" xml:space="preserve">
    <value>Triggers</value>
  </data>
  <data name="TriggerTypeHelpText" xml:space="preserve">
    <value>When the trigger is set to Schedule, this sensor will collect and transmit data based on the sensor schedule configured in the Windows Sample Schedule settings page. Selecting Event will collect the data based on chosen device events and will transmit the data based on the settings configured in the Windows Sample Schedule settings page</value>
  </data>
  <data name="TriggerTypeLabel" xml:space="preserve">
    <value>Trigger Type</value>
  </data>
  <data name="UseInLookUpLabel" xml:space="preserve">
    <value>Use as a Lookup Value</value>
  </data>
  <data name="UserExecutionContext" xml:space="preserve">
    <value>Current User</value>
  </data>
  <data name="ValueTypeHelpText" xml:space="preserve">
    <value>Value Type will determine the data type for the collected sample. This will help Workspace ONE determine which operators and commands to provide for this data type</value>
  </data>
  <data name="ValueTypeLabel" xml:space="preserve">
    <value>Value Type</value>
  </data>
  <data name="ValueTypeNotSetError" xml:space="preserve">
    <value>Value type cannot be empty</value>
  </data>
  <data name="WindowsPeriodicTriggerInfoText" xml:space="preserve">
    <value>Run periodically based on the configured Intelligent Hub data sample interval schedule defined in Settings &gt; Devices &amp; Users &gt; Windows &gt; Windows Desktop &gt; Intelligent Hub Settings</value>
  </data>
</root>