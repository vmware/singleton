<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddDomainJoinConfig" xml:space="preserve">
    <value>New Domain Join</value>
  </data>
  <data name="AddedDJSuccessfully" xml:space="preserve">
    <value>Domain Join Added Successfully</value>
  </data>
  <data name="AddedDJUnSuccessfully" xml:space="preserve">
    <value>Domain Join Save Failed</value>
  </data>
  <data name="CreateLocalUser" xml:space="preserve">
    <value>Create Local User</value>
  </data>
  <data name="CreateLocalUserTooltip" xml:space="preserve">
    <value>Select to create a local user account to log in to the device. If not selected, you will have to create a user account using a Custom Profile.</value>
  </data>
  <data name="DeletedDJSuccessfully" xml:space="preserve">
    <value>Domain Join deleted successfully</value>
  </data>
  <data name="DeleteDomainJoinConfig" xml:space="preserve">
    <value>Delete Domain Join</value>
  </data>
  <data name="DJDeleteFailure" xml:space="preserve">
    <value>Domain Join deletion failed</value>
  </data>
  <data name="DJUsernameCannotHaveRestrictedCharacters" xml:space="preserve">
    <value>User name can't contain these characters: / \ [ ] : | &lt; &gt; + = ; , ? * % @</value>
  </data>
  <data name="DomainFriendlyName" xml:space="preserve">
    <value>Domain Friendly Name</value>
  </data>
  <data name="DomainFriendlyNameTooltip" xml:space="preserve">
    <value>The legacy domain name parameter configured in Directory Services Settings. This is the value commonly used with the DOMAIN\username format when signing in with Active Directory domain credentials. If this parameter is not configured, use the same value as Domain Name (previous field).</value>
  </data>
  <data name="DomainJoin" xml:space="preserve">
    <value>Domain Join</value>
  </data>
  <data name="DomainJoinConfigListDescription" xml:space="preserve">
    <value>Domain Join </value>
  </data>
  <data name="DomainJoinConfigWillBeDeleted" xml:space="preserve">
    <value>Deleting this Domain Join Configurtion will remove it from the devices registered but not Enrolled. Enrolled devices will not be affected.
Do you want to continue?</value>
  </data>
  <data name="DomainJoinName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="DomainJoinType" xml:space="preserve">
    <value>Domain Join Type</value>
  </data>
  <data name="DomainServerUrl" xml:space="preserve">
    <value>Domain Name</value>
  </data>
  <data name="DomainServerUrlHelptext" xml:space="preserve">
    <value>Click here to configure this value in {0} settings.</value>
    <comment>{0} will be replaced with link to Directory Services settings page with the the text "Directory Services"</comment>
  </data>
  <data name="DomainServerUrlTooltip" xml:space="preserve">
    <value>The full domain component name of the Active Directory domain (example: dc01.contoso.com). This server must be configured in Directory Services Settings before you add a domain join.</value>
  </data>
  <data name="EditDomainJoinConfig" xml:space="preserve">
    <value>Edit Domain Join</value>
  </data>
  <data name="LocalUsername" xml:space="preserve">
    <value>Local Username</value>
  </data>
  <data name="LocalUsernamePassword" xml:space="preserve">
    <value>Local User Password</value>
  </data>
  <data name="MachineNameFormat" xml:space="preserve">
    <value>Machine Name Format</value>
  </data>
  <data name="MachineNameFormatTooltip" xml:space="preserve">
    <value>Enter a unique 15-character name for the device. For help generating a unique name, use %SERIAL%, which includes a hardware-specific serial number, or %RAND:[#]%, which generates random characters of # length. To minimize the possibility of creating duplicate computer names when using random number generation, the random number length [%RAND:[#]%] must be greater than or equal to 7.</value>
  </data>
  <data name="MakeAdministrator" xml:space="preserve">
    <value>Make Administrator</value>
  </data>
  <data name="MakeAdministratorTooltip" xml:space="preserve">
    <value>Add the local user account to the Administrators group on the device.</value>
  </data>
  <data name="NoDomainJoinConfig" xml:space="preserve">
    <value>No Domain Join Configurations added in this Organization Group.</value>
  </data>
  <data name="OnPremActiveDirectory" xml:space="preserve">
    <value>On-Premises Active Directory</value>
  </data>
  <data name="SmartGroupAlreadyAssigned" xml:space="preserve">
    <value>is already assigned to</value>
  </data>
  <data name="Workgroup" xml:space="preserve">
    <value>Workgroup</value>
  </data>
  <data name="WorkGroupName" xml:space="preserve">
    <value>Workgroup</value>
  </data>
  <data name="WorkgroupNameTooltip" xml:space="preserve">
    <value>The name of the workgroup the client will be joined to.</value>
  </data>
</root>