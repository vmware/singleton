<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddDomainJoinConfig" xml:space="preserve">
    <value>新域加入</value>
  </data>
  <data name="AddedDJSuccessfully" xml:space="preserve">
    <value>已成功添加域加入</value>
  </data>
  <data name="AddedDJUnSuccessfully" xml:space="preserve">
    <value>域加入保存失败</value>
  </data>
  <data name="CreateLocalUser" xml:space="preserve">
    <value>创建本地用户</value>
  </data>
  <data name="CreateLocalUserTooltip" xml:space="preserve">
    <value>选择此选项可创建本地用户帐户以登录到设备。如果未选择此选项，您将必须使用自定义配置文件创建用户帐户。</value>
  </data>
  <data name="DeletedDJSuccessfully" xml:space="preserve">
    <value>已成功删除域加入</value>
  </data>
  <data name="DeleteDomainJoinConfig" xml:space="preserve">
    <value>删除域加入</value>
  </data>
  <data name="DJDeleteFailure" xml:space="preserve">
    <value>域加入删除失败</value>
  </data>
  <data name="DJUsernameCannotHaveRestrictedCharacters" xml:space="preserve">
    <value>用户名不能包含以下字符: / \ [ ] : | &lt; &gt; + = ; , ? * % @</value>
  </data>
  <data name="DomainFriendlyName" xml:space="preserve">
    <value>域友好名称</value>
  </data>
  <data name="DomainFriendlyNameTooltip" xml:space="preserve">
    <value>在目录服务设置中配置的旧版域名参数。这是在使用 Active Directory 域凭据登录时通常与域\用户名格式一起使用的值。如果未配置此参数，请使用与域名（上一字段）相同的值。</value>
  </data>
  <data name="DomainJoin" xml:space="preserve">
    <value>域加入</value>
  </data>
  <data name="DomainJoinConfigListDescription" xml:space="preserve">
    <value>域加入</value>
  </data>
  <data name="DomainJoinConfigWillBeDeleted" xml:space="preserve">
    <value>删除此域加入配置会将其从已登记但未注册的设备中移除。已注册的设备不会受到影响。
是否要继续?</value>
  </data>
  <data name="DomainJoinName" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="DomainJoinType" xml:space="preserve">
    <value>域加入类型</value>
  </data>
  <data name="DomainServerUrl" xml:space="preserve">
    <value>域名</value>
  </data>
  <data name="DomainServerUrlHelptext" xml:space="preserve">
    <value>单击此处可在 {0} 设置中配置此值。</value>
    <comment>{0} will be replaced with link to Directory Services settings page with the the text "Directory Services"</comment>
  </data>
  <data name="DomainServerUrlTooltip" xml:space="preserve">
    <value>Active Directory 域的完整域组件名称 (示例: dc01.contoso.com)。在添加域加入之前，必须在目录服务设置中配置此服务器。</value>
  </data>
  <data name="EditDomainJoinConfig" xml:space="preserve">
    <value>编辑域加入</value>
  </data>
  <data name="LocalUsername" xml:space="preserve">
    <value>本地用户名</value>
  </data>
  <data name="LocalUsernamePassword" xml:space="preserve">
    <value>本地用户密码</value>
  </data>
  <data name="MachineNameFormat" xml:space="preserve">
    <value>计算机名称格式</value>
  </data>
  <data name="MachineNameFormatTooltip" xml:space="preserve">
    <value>为设备输入包含 15 个字符的唯一名称。有关生成唯一名称的帮助，请使用 %SERIAL%（其中包含特定于硬件的序列号），也可以使用 %RAND:[#]%（生成 # 个随机字符）。要最大程度地降低在使用随机字符生成时创建重复计算机名称的可能性，随机字符长度 [%RAND:[#]%] 必须大于或等于 7。</value>
  </data>
  <data name="MakeAdministrator" xml:space="preserve">
    <value>设为管理员</value>
  </data>
  <data name="MakeAdministratorTooltip" xml:space="preserve">
    <value>将本地用户帐户添加到设备上的管理员组。</value>
  </data>
  <data name="NoDomainJoinConfig" xml:space="preserve">
    <value>此 OG 中未添加任何域加入配置</value>
  </data>
  <data name="OnPremActiveDirectory" xml:space="preserve">
    <value>内部部署 Active Directory</value>
  </data>
  <data name="SmartGroupAlreadyAssigned" xml:space="preserve">
    <value>已分配给</value>
  </data>
  <data name="Workgroup" xml:space="preserve">
    <value>工作组</value>
  </data>
  <data name="WorkGroupName" xml:space="preserve">
    <value>工作组</value>
  </data>
  <data name="WorkgroupNameTooltip" xml:space="preserve">
    <value>客户端将加入的工作组的名称。</value>
  </data>
</root>